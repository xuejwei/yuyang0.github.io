<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title></title>
  <link href="http://yuyang.farbox.com/"/>
  <link type="application/atom+xml" rel="self" href="/atom.xml"/>
  <updated>2013-06-01T20:28:51-07:00</updated>
  <id>http://yuyang.farbox.com/</id>
  <author>
    <name>Yu Yang</name>
    <email>yy2012cn@gmail.com</email>
  </author>

  
  <entry>
    <id>reading-notes/IT术语.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/reading-notes/IT术语.html"/>
    <title>IT术语</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;IT术语&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;IT术语&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;透明的（transparent）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;Expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;Statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;IT术语&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;透明的（transparent）&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
透而不见，比如玻璃，所以说什么东西是透明的就是说其内部不可见，可以无视其实现，
而生活中一般的意思是对内部一目了然，如透明度
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;Expression&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
表达式一般会返回值, 但是不会有副作用(&lt;a href=&quot;https://en.wikipedia.org/wiki/Side_effect_%2528computer_science%2529&quot;&gt;side effect&lt;/a&gt;), 表达式一般也会包含变量,常
量,操作符,函数
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;Statement&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
语句一般是不返回值的,他只会产生副作用(&lt;a href=&quot;https://en.wikipedia.org/wiki/Side_effect_%2528computer_science%2529&quot;&gt;side effect&lt;/a&gt;), 常见的语句有
Simple statements
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;assignment: A:= A + 5
&lt;/li&gt;
&lt;li&gt;call: CLEARSCREEN()
&lt;/li&gt;
&lt;li&gt;return: return 5;
&lt;/li&gt;
&lt;li&gt;goto: goto 5
&lt;/li&gt;
&lt;li&gt;assertion: assert(ptr != NULL);
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
Compound statements
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;b&gt;block&lt;/b&gt; : begin integer NUMBER; WRITE(&#39;Number? &#39;); READLN(NUMBER); A:= A*NUMBER end
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;if-statement&lt;/b&gt; : if A &amp;gt; 3 then WRITELN(A) else WRITELN(&quot;NOT YET&quot;); end
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;switch-statement&lt;/b&gt; : switch (c) { case &#39;a&#39;: alert(); break; case &#39;q&#39;: quit(); break; }
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;while-loop&lt;/b&gt; : while NOT EOF DO begin READLN end
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;do-loop&lt;/b&gt; : do { computation(&amp;amp;i); } while (i &amp;lt; 10);
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;for-loop&lt;/b&gt; : for A:=1 to 10 do WRITELN(A) end
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>reading-notes/sicp.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/reading-notes/sicp.html"/>
    <title>SICP笔记</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;SICP笔记&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;&lt;b&gt;SICP笔记&lt;/b&gt;&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;第一章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;primitive element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;some example in the book&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-3-1&quot;&gt;GCD (greatest common divisors)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2&quot;&gt;素数检查&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;一些个人体会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;b&gt;SICP笔记&lt;/b&gt;&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;第一章&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;a programming language must have some primitive procedures and primitive
data, for example mathmatics operations(+ - * / and so on),and the
numbers(primitive data).
&lt;/li&gt;
&lt;li&gt;Nesting of combinations provides a means of combining operations.
&lt;/li&gt;
&lt;li&gt;Definitions that associate names with values provide a limited means of abstraction
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
提供基本的数据与函数，然后通过嵌套来构建组合式以及复合函数，同时为复合
函数或者组合式命名也给抽象带来了方便。
&lt;/p&gt;

&lt;p&gt;
正则序：在计算过程中先代换，完全代换后在一次求值
应用序：在计算过程中先求值在代换
二者的比较：正则序相对与应用序一般会有较多的重复运算，因为过程体中可以
            多次引用形参，那么正则序代换后就会多次求值，而应用序则是先
            求值在代换所以没有这个问题，对于应用序，每个过程的形式参数
            都会先求值在进入过程计算
recursive procedure:语法上的递归
recursive process:计算过程的递归
语法上递归的函数可能表示的是一个递归计算过程，如果程序设计语言支持尾递
归，那么可以获得和循环相同的效率，本质上说，循环结构都只是语法糖衣，
scheme支持尾递归，C不支持尾递归。
&lt;/p&gt;

&lt;p&gt;
一个程序设计语言必须提供的功能：primitive procedure and primitive data，
if结构，构造复合过程的方法（自定义函数）。
&lt;/p&gt;

&lt;p&gt;
高阶函数：
  函数可以作为参数传递，可以作为结果返回。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;primitive element&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;Numbers and arithmetic operations are primitive data and procedures.
&lt;/li&gt;
&lt;li&gt;Nesting of combinations provides a means of combining operations.
&lt;/li&gt;
&lt;li&gt;Definitions that associate names with values provide a limited means of abstraction.
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;some example in the book&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;GCD (greatest common divisors)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;p&gt;
gcd(a, b) = gcd (b, r)        (r = a % b)
&lt;/p&gt;

&lt;p&gt;
证明：设a&amp;gt;b且 a = kb + r 其中k = a/b, r = a % b都为整数
      若存在一个数m被a，b整除，则m也能被（kb + r）整除，又m能被kb整除，
      所以必能被r整除
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;素数检查&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;在2～sqrt(x)之间遍历，如果找到一个因子则意味着x不是素数
&lt;/li&gt;
&lt;li&gt;费马小定律：
如果n是素数，则a&lt;sup&gt;n&lt;/sup&gt; % n = a % n  (a是小于n的任意正整数）
&lt;/li&gt;
&lt;li&gt;通过费马小定律的检查只是素数的必要条件而不是充分条件，存在能通过所
有费马检查但却不是素数的数，但是这种数非常罕见，一般情况下对于数n如
果它不是素数，那么对于小于n的数中大部分不能通过费马检查，因此其概率
大于1/2，据此就可以构造概率算法
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;一些个人体会&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
church数:&lt;br /&gt;
  数实际上没有具体的实际意义，本质上数只是表示一个个孤立的状态的符号，&lt;br /&gt;
  它唯一的意义就是能表示出这一个个状态之间是不同的，如1表示的状态和2表&lt;br /&gt;
  示的状态时不同的，而在这些状态上定义+ - * / 这样的的运算，在执行这些&lt;br /&gt;
  运算时可以从一个状态跳到另外一个状态&lt;br /&gt;
lambda演算:&lt;br /&gt;
  1. 函数与形参无关，也就是说只要将形参名与函数体对该形参名的引用同时&lt;br /&gt;
     替换则函数是等价的&lt;br /&gt;
  2. 如果函数有多个参数，调用时没有给出所有参数那么该调用返回一个函数&lt;br /&gt;
     eg：(define (add x y) (+ x y))&lt;br /&gt;
         调用(add 1) 返回 (lambda(y) (+ 1 y))&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>reading-notes/EOPL.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/reading-notes/EOPL.html"/>
    <title>The Essential of Programming language</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;The Essential of Programming language&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;Forward&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;1. Inductive Sets and Data&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-2-1&quot;&gt;1.1&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-2-1-1&quot;&gt;top-down definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1-2&quot;&gt;bottom-up definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1-3&quot;&gt;rules of inference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2&quot;&gt;1.2&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-2-2-1&quot;&gt;用语法规则定义集合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2-2&quot;&gt;The Smaller-Subproblem Principle&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-2-2-2-1&quot;&gt;nth-element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2-2-2&quot;&gt;remove-first&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2-2-3&quot;&gt;occurs-free?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2-2-4&quot;&gt;subst&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2-3&quot;&gt;Follow the Grammar!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3&quot;&gt;Exercise&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-2-3-1&quot;&gt;1.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3-2&quot;&gt;1.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3-3&quot;&gt;1.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3-4&quot;&gt;1.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3-5&quot;&gt;1.8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3-6&quot;&gt;1.9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3-7&quot;&gt;1.15&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3-8&quot;&gt;1.16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3-9&quot;&gt;1.17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3-10&quot;&gt;1.18&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3-11&quot;&gt;1.19&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3-12&quot;&gt;1.20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3-13&quot;&gt;1.34&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3-14&quot;&gt;1.35&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-3-15&quot;&gt;1.36&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;2 Data Abstraction&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-3-1&quot;&gt;2.3 Interfaces for Recursive Data Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-2&quot;&gt;2.4 A Tool for Defining Recursive Data Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3&quot;&gt;Exercise&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-3-3-1&quot;&gt;2.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3-2&quot;&gt;2.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3-3&quot;&gt;2.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3-4&quot;&gt;2.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3-5&quot;&gt;2.8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3-6&quot;&gt;2.9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3-7&quot;&gt;2.10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3-8&quot;&gt;2.11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3-9&quot;&gt;2.15&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;4 State&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-4-1&quot;&gt;4.1 Computational Effects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Forward&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
  Perhaps the whole distinction between program and programming language is a
misleading idea, and future programmers will see themselves not as writing
programs in particular, but as creating new languages for each new application.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;1. Inductive Sets and Data&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;1.1&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-2-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-1-1&quot;&gt;top-down definition&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1-1&quot;&gt;
&lt;p&gt;
自顶向下意味着从宏观的角度向微观细分
A Scheme list is a list of integers if and only if either
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;it is the empty list, or
&lt;/li&gt;
&lt;li&gt;it is a pair whose car is an integer and whose cdr is a list of integers.
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-1-2&quot;&gt;bottom-up definition&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1-2&quot;&gt;
&lt;p&gt;
自底向上意味着从微观的角度向宏观归纳
The set List-of-Int is the smallest set of Scheme lists satisfying the
following two properties:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;() ∈ List-of-Int, and
&lt;/li&gt;
&lt;li&gt;if n ∈ Int and l ∈ List-of-Int, then (n . l) ∈ List-of-Int.
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-1-3&quot;&gt;rules of inference&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1-3&quot;&gt;
\begin{align}
  () \in List-of-Int  \\
  \frac {n \in Int \quad l \in List-of-Int} {(n . l) \in List-of-Int}
\end{align}
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;1.2&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-2-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-2-1&quot;&gt;用语法规则定义集合&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2-1&quot;&gt;
\begin{align}
  List-of-Int &amp;amp;::= ()  \\
              &amp;amp;::= (Int . List-of-Int)
\end{align}

&lt;p&gt;
可以缩写为:
&lt;/p&gt;
\begin{equation}
  List-of-Int ::= () | (Int . List-of-Int)
\end{equation}
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-2-2&quot;&gt;The Smaller-Subproblem Principle&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2-2&quot;&gt;
&lt;p&gt;
If we can reduce a problem to a smaller subproblem, we can call the
procedure that solves the problem to solve the subproblem.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-2-2-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-2-2-2-1&quot;&gt;nth-element&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-2-2-2-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;nth-element&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lst n)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (null? lst)
        (report-list-too-short n)
        (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (zero？n)
            (car lst)
            (nth-element (cdr lst) (- n 1))))))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;report-list-too-short&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (n)
    (eopl:error ’nth-element
&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;List too short by ~s elements.~%&quot;&lt;/span&gt; (+ n 1))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-2-2-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-2-2-2-2&quot;&gt;remove-first&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-2-2-2-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;remove-first&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (s los)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (null? los)
        &#39;()
        (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (eqv? s (car los))
            (cdr los)
            (cons (car los) (remove-first s (cdr los)))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-2-2-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-2-2-2-3&quot;&gt;occurs-free?&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-2-2-4&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-2-2-2-4&quot;&gt;subst&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-2-2-2-4&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;subst&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (new old slist)
    ()))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-2-3&quot;&gt;Follow the Grammar!&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2-3&quot;&gt;
&lt;p&gt;
When defining a procedure that operates on inductively defined data, the
structure of the program should be patterned after the structure of the
data.
&lt;/p&gt;

&lt;p&gt;
更准确的说:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;Write one procedure for each nonterminal in the grammar. The procedure
will be responsible for handling the data corresponding to that
nonterminal, and nothing else.
&lt;/li&gt;
&lt;li&gt;In each procedure, write one alternative for each production correspond-
ing to that nonterminal. You may need additional case structure, but
this will get you started. For each nonterminal that appears in the
right-hand side, write a recursive call to the procedure for that
nonterminal.
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;Exercise&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-2-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-1&quot;&gt;1.1&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-1&quot;&gt;
&lt;p&gt;
{3n + 2 | n ∈ N }
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;top-down: A natural number &lt;code&gt;n&lt;/code&gt; is in S if and only if
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;n=2 or
&lt;/li&gt;
&lt;li&gt;n-3 \(\in\) S
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;buttom-up: Define S is the smallest set contained in N and satisfying
the following two property:
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;2 \(\in\) S
&lt;/li&gt;
&lt;li&gt;if n \(\in\) S then n+3 \(\in\) S
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;rules of inference
\begin{align}
  2 \in S \\
  \frac {n \in S} {n+3 \in S}
\end{align}
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-2&quot;&gt;1.2&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;(i, 7i+1) (0, 1), (1, 8), (2, 15) …
&lt;/li&gt;
&lt;li&gt;(i, 2^i)  (0, 1), (1, 2), (2, 4)
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-3&quot;&gt;1.6&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-3&quot;&gt;
&lt;p&gt;
当n&amp;gt;=length(lst)时,会导致(cdr lst)出错
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-4&quot;&gt;1.7&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-4&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-5&quot;&gt;1.8&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-5&quot;&gt;
&lt;p&gt;
使用 &lt;code&gt;(remove-first s (cdr los))&lt;/code&gt; 替换 &lt;code&gt;remove-first&lt;/code&gt; 的最后一行会导致los中第一
个s之前的元素都丢失
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-6&quot;&gt;1.9&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-6&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
remove: Sym * Listof(Sym) --&amp;gt; Listof(Sym)
Usage: (remove s los) return a list with the same element arranged in the
same order as los, except that all the occurrence of symbol s is removed
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;remove&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (s los)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (null? los)
        &#39;()
        (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (eqv? s (car los))
            (remove s (cdr los))
            (cons (car los) (remove s (cdr los)))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-7&quot;&gt;1.15&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-7&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;duple&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (n lst)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (eq? n 1)
        (cons  lst &#39;())
        (cons lst (duple (- n 1) lst)))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3-8&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-8&quot;&gt;1.16&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-8&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;invert&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lst)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (null? lst)
        &#39;()
        (cons (invert-2-elt-lst (car lst))
              (invert (cdr lst)))
        )))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;invert-2-elt-lst&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lst)
    (cons (cadr lst)
          (cons (car lst) &#39;()))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3-9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-9&quot;&gt;1.17&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-9&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;down&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lst)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (null? lst)
        &#39;()
        (cons (cons (car lst) &#39;())
              (down (cdr lst))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3-10&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-10&quot;&gt;1.18&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-10&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;swapper&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (s1 s2 lst)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (null? lst)
        &#39;()
        (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ((1st-elt (car lst)))
          (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
           ((eq? 1st-elt s1) (cons s2 (swapper s1 s2 (cdr lst))))
           ((eq? 1st-elt s2) (cons s1 (swapper s1 s2 (cdr lst))))
           ((list? 1st-elt) (cons (swapper s1 s2 1st-elt) (swapper s1 s2 (cdr lst))))
           (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (cons 1st-elt (swapper s1 s2 (cdr lst))))
           )))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3-11&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-11&quot;&gt;1.19&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-11&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;list-set&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lst n x)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
     ((null? lst) (message &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;the list is too short&quot;&lt;/span&gt;))
     ((zero? n) (cons x (cdr lst)))
     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (cons (car lst)
                 (list-set (cdr lst) (- n 1) x))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3-12&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-12&quot;&gt;1.20&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-3-13&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-13&quot;&gt;1.34&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-13&quot;&gt;
&lt;p&gt;
打印二叉树搜索路径
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;path&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (elt bst)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
     ((null? bst) &#39;())
     ((eq? elt (car bst)) &#39;())
     ((&amp;lt; elt (car bst)) (cons &#39;left (path elt (cadr bst))))
     ((&amp;gt; elt (car bst)) (cons &#39;right (path elt (caddr bst))))
     )))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3-14&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-14&quot;&gt;1.35&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-14&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;number-leaves&lt;/span&gt;)
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;interior-node&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (root left right)
    ))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3-15&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-3-15&quot;&gt;1.36&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-15&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;g&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (car-elt cdr-elt)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; (&lt;span style=&quot;color: #A6E22E;&quot;&gt;add1-elt-number&lt;/span&gt; lst)
      (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (null? lst) &#39;()
          (cons (cons (+ 1 (caar lst))
                      (cdar lst))
                (add1-elt-number (cdr lst)))))
    (add1-elt-number (cons car-elt cdr-elt))))

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;number-elements&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lst)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (null? lst) &#39;()
        (g (list 0 (car lst)) (number-elements (cdr lst))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;2 Data Abstraction&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
\(\lceil v \rceil\) 代表数据 &lt;code&gt;v&lt;/code&gt; 的实现
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;2.3 Interfaces for Recursive Data Types&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;p&gt;
Designing an interface for a recursive data type:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;Include one constructor for each kind of data in the data type.
&lt;/li&gt;
&lt;li&gt;Include one predicate for each kind of data in the data type.
&lt;/li&gt;
&lt;li&gt;Include one extractor for each piece of data passed to a constructor of
the data type.
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
举个例子, 比如lambda calculus的语法定义是这样:
&lt;/p&gt;
\begin{align}
  Lc-exp &amp;amp;::= Identifier \\
         &amp;amp;::= (lambda (Identifier) Lc-exp) \\
         &amp;amp;::= (Lc-exp Lc-exp)
\end{align}

&lt;p&gt;
我们来定义它的interface(&lt;b&gt;注意是接口,不是实现&lt;/b&gt;).
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;Constructor
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;var-exp : Var → Lc-exp
&lt;/li&gt;
&lt;li&gt;lambda-exp : Var × Lc-exp → Lc-exp
&lt;/li&gt;
&lt;li&gt;app-exp : Lc-exp × Lc-exp → Lc-exp
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Predicates
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;var-exp? : Lc-exp → Bool
&lt;/li&gt;
&lt;li&gt;lambda-exp? : Lc-exp → Bool
&lt;/li&gt;
&lt;li&gt;app-exp? : Lc-exp → Bool
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Extractors
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;b&gt;var-exp-&amp;gt;var&lt;/b&gt; :Lc-exp → Var
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;lambda-exp-&amp;gt;bound-var&lt;/b&gt; :Lc-exp → Var
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;lambda-exp-&amp;gt;body&lt;/b&gt; :Lc-exp → Lc-exp
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;app-exp-&amp;gt;rator&lt;/b&gt; :Lc-exp → Lc-exp
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;app-exp-&amp;gt;rand&lt;/b&gt; :Lc-exp → Lc-exp
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot;&gt;2.4 A Tool for Defining Recursive Data Types&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;p&gt;
使用define-datatype来自动的定义一个递归数据类型(&lt;b&gt;接口&lt;/b&gt;),以lambda calculus的语法定义
为例子
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(define-datatype lc-exp lc-exp?
  (var-exp
   (var identifier?))
  (lambda-exp
   (bound-var identifier?)
   (body lc-exp?))
  (app-exp
   (rator lc-exp?)
   (rand lc-exp?)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面声明了3个constructor: var-exp, lambda-exp, app-exp以及一个
predicate:Lc-exp?.然后可以使用cases来使用上述定义:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;occurs-free?&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (search-var exp)
    (cases lc-exp exp
           (var-exp (var) (eqv? var search-var))
           (lambda-exp (bound-var body)
                       (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;and&lt;/span&gt;
                        (not (eqv? search-var bound-var))
                        (occurs-free? search-var body)))
           (app-exp (rator rand)
                    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;or&lt;/span&gt;
                     (occurs-free? search-var rator)
                     (occurs-free? search-var rand))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
使用cases可以匹配出一个lc-exp的类型,它到底是var-exp, lambda-exp还是app-exp,
根据不同的情况你可以分支处理,很像一个模式匹配的过程
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-3&quot;&gt;Exercise&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-3-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-1&quot;&gt;2.1&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-1&quot;&gt;
\begin{equation}
  ⌈n⌉ = \left\{\begin{array}{ll}
      () &amp;amp; \textrm{n = 0} \\
      (r . \lceil q \rceil ) &amp;amp; \textrm{n = qN + r, 0 ≤ r 

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;N&lt;/span&gt; 16)
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;zero&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; () &#39;()))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;is-zero?&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (n) (null? n)))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;successor&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (n)
                    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
                     [(null? n) &#39;(1)]
                     [(eq? (car n) (- N 1))
                      (cons 0
                            (successor (cdr n)))]
                     [else (cons (+ 1 (car n)) (cdr n))])))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;predecessor&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (n)
                      (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
                       [(equal? n &#39;(1)) &#39;()]
                       [(zero? (car n))
                        (cons (- N 1)
                              (predecessor (cdr n)))]
                       [else (cons (- (car n) 1) (cdr n))])))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;one&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; () (successor (zero))))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;factorial&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (n)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (is-zero? n) (one)
        (multiple n (factorial (predecessor n))))))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;multiple&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (a b)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (is-zero? (predecessor a)) b
        (plus b (multiple (predecessor a) b)))))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;plus&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (a b)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (is-zero? a) b
        (plus (predecessor a) (successor b)))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-2&quot;&gt;2.3&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-2&quot;&gt;
&lt;p&gt;
Diff-tree ::= (one) | (diff Diff-tree Diff-tree)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;zero&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; () &#39;(diff (one) (one))))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;negative-one&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; () (list &#39;diff (zero) &#39;(one))))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;is-zero?&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (n)
    (equal? n (zero))))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;successor&lt;/span&gt;
  &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;n+1 = n - (-1)&quot;&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (n)
    (list &#39;diff n (negative-one))))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;predecessor&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (n)
    (list &#39;diff n &#39;(one))))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;diff-tree-plus&lt;/span&gt;
  &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;a+b = a - (-b)&quot;&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (a b)
    (list &#39;diff a (list &#39;diff (zero) b))))

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;left&lt;/span&gt; cadr)
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;right&lt;/span&gt; caddr)
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;the number a diff-tree represented is identical to the number of left leaves&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;minus the number of the right leaves&lt;/span&gt;
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;left-minus-right-leaves&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (n)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
     [(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;and&lt;/span&gt; (equal? (left n) &#39;(one))
           (equal? (right n) &#39;(one)))
      0]
     [(equal? (left n) &#39;(one))
      (+ 1 (left-minus-right-leaves (right n)))]
     [(equal? (left n) &#39;(one))
      (- (left-minus-right-leaves (left n)) 1)]
     [else (+ (left-minus-right-leaves (left n))
              (left-minus-right-leaves (right n)))])))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;is-zero?&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (n)
    (zero? (left-minus-right-leaves n))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-3-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-3&quot;&gt;2.4&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-3&quot;&gt;
\begin{align}
  (empty-stack) &amp;amp;= \lceil \Phi \rceil  \\
  (push \lceil f \rceil var) &amp;amp;= \lceil g \rceil  \\
  (pop ⌈ f ⌉) &amp;amp;= cc  \\
  (top ⌈ f ⌉) &amp;amp;= f(top)  \\
  (empty-stack? ⌈ f ⌉) &amp;amp;= dd
\end{align}
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-3-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-4&quot;&gt;2.5&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-4&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;empty-env&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; () &#39;()))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;extend-env&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (var val env)
    (cons (cons var val)
          env)))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;apply-env&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (var env)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt; [(equal? env (empty-env))
           (report-no-binding-found var)]
          [(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;and&lt;/span&gt; (list? env)
                (pair? (car env))
                (list? (cdr env)))
           (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ([saved-var (caar env)]
                 [saved-val (cdar env)]
                 [saved-env (cdr env)])
             (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (eq? var saved-var)
                 saved-val
                 (apply-env var saved-env)))]
          [else (report-invalid-env env)])))

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;report-no-binding-found&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (search-var)
    (eopl:error &#39;apply-env &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;No binding for ~s&quot;&lt;/span&gt; search-var)))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;report-invalid-env&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (env)
    (eopl:error &#39;apply-env &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Bad environment: ~s&quot;&lt;/span&gt; env)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-3-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-5&quot;&gt;2.8&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-5&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;empty-env?&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (env)
    (eqv? env (empty-env))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-3-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-6&quot;&gt;2.9&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-6&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;apply-env&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (var env)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt; [(equal? env (empty-env)) #f]
          [(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;and&lt;/span&gt; (list? env)
                (pair? (car env))
                (list? (cdr env)))
           (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ([saved-var (caar env)]
                 [saved-val (cdar env)]
                 [saved-env (cdr env)])
             (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (eq? var saved-var)
                 #t
                 (apply-env var saved-env)))]
          [else (report-invalid-env env)])))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-3-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-7&quot;&gt;2.10&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-7&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;extend-env*&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (var-lst val-lst env)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;or&lt;/span&gt; (null? var-lst)
            (null? val-lst))
        env
        (extend-env* (cdr var-lst) (cdr val-lst)
                     (extend-env (car var-lst) (car val-lst) env)))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-3-8&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-8&quot;&gt;2.11&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-8&quot;&gt;
&lt;p&gt;
ribcage representation of environment
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;empty-env&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; () &#39;()))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;extend-env&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (var val env)
    (cons (cons (list var) (list val)) env)))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;extend-env*&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (var-lst val-lst env)
    (cons (cons var-lst val-lst) env)))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;apply-env&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (var env)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
     [(equal? env (empty-env))
      (report-no-binding-found var)]
     [else (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let*&lt;/span&gt; ([var-lst (caar env)]
                  [val-lst (cdar env)]
                  [saved-env (cdr env)]
                  [ret (search-lst var var-lst val-lst)])
             (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; ret ret
                 (apply-env var saved-env)))])))

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;search-lst&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (var var-lst val-lst)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
     [(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;or&lt;/span&gt; (null? var-lst)
          (null? val-lst))
      #f]
     [(eqv? var (car var-lst)) (car val-lst)]
     [else (search-lst var (cdr var-lst) (cdr val-lst))])))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;report-no-binding-found&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (search-var)
    (eopl:error &#39;apply-env &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;No binding for ~s&quot;&lt;/span&gt; search-var)))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;report-invalid-env&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (env)
    (eopl:error &#39;apply-env &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Bad environment: ~s&quot;&lt;/span&gt; env)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-3-9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-3-9&quot;&gt;2.15&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-9&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;constructor&lt;/span&gt;
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;var-exp&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (var) var))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;lambda-exp&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (var lc-exp)
    (list &#39;lambda (list var) lc-exp)))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;app-exp&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lc-exp1 lc-exp2)
    (list lc-exp1 lc-exp2)))
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;predicates&lt;/span&gt;
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;var-exp?&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lc-exp)
    (symbol? lc-exp)))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;lambda-exp?&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lc-exp)
    (eqv? (car lc-exp) &#39;lambda)))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;app-exp?&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (exp)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;and&lt;/span&gt; (lc-exp? (car exp))
         (lc-exp? (cadr exp)))))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;lc-exp?&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (exp)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;or&lt;/span&gt; (var-exp? exp)
        (lambda-exp? exp)
        (app-exp? exp))))
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;extractors&lt;/span&gt;
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;var-exp-&amp;gt;var&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lc-exp)
    lc-exp))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;lambda-exp-&amp;gt;bound-var&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lc-exp)
    (caadr lc-exp)))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;lambda-exp-&amp;gt;body&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lc-exp)
    (cddr lc-exp)))

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;app-exp-&amp;gt;rator&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lc-exp)
    (car lc-exp)))
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;app-exp-rand&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lc-exp)
    (cadr lc-exp)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>reading-notes/Theory-Computation.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/reading-notes/Theory-Computation.html"/>
    <title>Theory-Computation</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;Theory-Computation&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;计算理论笔记&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;数学基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;三大理论&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-2-1&quot;&gt;自动机理论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2&quot;&gt;可计算理论&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-3&quot;&gt;计算复杂度理论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;计算理论笔记&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;数学基础&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;谓词是一个函数，他的结果只能是true或者false，也就是值域是{true, false}
&lt;/li&gt;
&lt;li&gt;关系（k元关系）：有k个自变量的谓词，通常的&amp;gt;, &amp;lt;, =都是二元关系，a&amp;lt;b,实际可以写成(&amp;lt; a b)
&lt;/li&gt;
&lt;li&gt;关系是一个谓词（也是一个函数），所以一般应该用前缀表达式，可是实际运用时，因为惯例，可能用中缀表达式，&amp;lt;,&amp;gt;,=都是中缀表达式
&lt;/li&gt;
&lt;li&gt;关系的3个性质：自反性(对每一个x =&amp;gt; xRx)，对称性(xRy &amp;lt;=&amp;gt; yRx)，传递性(xRy且yRz =&amp;gt; xRz)
满足这3个性质那么就是等价关系。
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;三大理论&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;自动机理论&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;p&gt;
正则语言：能被一个有穷自动机接受的语言
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;可计算理论&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-3&quot;&gt;计算复杂度理论&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>reading-notes/how-to-study.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/reading-notes/how-to-study.html"/>
    <title>how to study</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;how to study&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;学习方法&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;知识面覆盖&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;练习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;自省&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;学习方法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;知识面覆盖&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
这一阶段主要目标是对所学的知识有一个大体的印象，要从宏观上把握要学习的
知识，这一阶段是效率最低的，所以要加速完成，课程视频可以2X倍速观看，看
书的话不必做笔记，或者只是读完一个主要章节之后才做一些主旨性，概要性的
笔记
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;练习&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
误区：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;没有及时的反馈，比如说没有检查自己答案的对错
&lt;/li&gt;
&lt;li&gt;题海战术
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
对于非技术类的学科，它的需求是掌握概念，而不是解决实际问题，所以一般只
需要做很少题目
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;自省&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
当对某个东西心里没底，但又不知道什么地方不懂时，就需要自省，可以利用费
曼技巧来查漏补缺。
&lt;/p&gt;

&lt;p&gt;
费曼技巧：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;拿一张白纸
&lt;/li&gt;
&lt;li&gt;在白纸上写上要理解的想法或者技巧
&lt;/li&gt;
&lt;li&gt;用自己的话解释它，就像你在教别人一样
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
费曼技巧的使用：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;对完全摸不着头脑的概念，可以先看书上的介绍性章节，然后应用费曼技巧，
也就是用自己的话来解释，阐述这个概念
&lt;/li&gt;
&lt;li&gt;对于各种过程（各种数学证明过程，化学方程式，生物过程），要解释每一
步在干什么，以及它时怎么执行的
&lt;/li&gt;
&lt;li&gt;对于各种公式，可以对公式的各个部分分而化之，并理解各个部分的意义
&lt;/li&gt;
&lt;li&gt;对于需要记忆的内容，在不参考讲义或者课本的情况下，如果能顺利的应用
费曼技巧那么就ok
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>reading-notes/how-to-read-a-book.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/reading-notes/how-to-read-a-book.html"/>
    <title>how-to-read-a-book</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;how-to-read-a-book&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;How to Read a Book&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;检视阅读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;分析阅读&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;How to Read a Book&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;检视阅读&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;读书名，目录，序，前言，索引（preface index），然后随机的选几页阅读，
或者根据目录选择感兴趣的章节阅读，但最多只连续的阅读几页，这个阶段
必须注意时间控制。
&lt;/li&gt;
&lt;li&gt;快速而粗略的对一本书扫一遍，遇到不懂的地方不要停下来，要注意把握书
的总体上的一些特点与内容，如讲了什么，结构是什么样的。
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;分析阅读&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>reading-notes/python-source-code.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/reading-notes/python-source-code.html"/>
    <title>python源代码解析</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;python源代码解析&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;一些基本概念&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;PyObject, PyVarObject&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;PyIntObject&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;PyStringObject&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5&quot;&gt;PuListObject&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;一些基本概念&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
python中一切都是对象, 类的实例是对象, 类本身是对象,类型也是对象,每一个对象都会有一个指向其type对象的指针,而
其type对象指向一个type type, 而type type指向自己,这是2.7.5源代码的注释,说的很清楚
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
An object has a &#39;type&#39; that determines what it represents and what kind
of data it contains.  An object&#39;s type is fixed when it is created.
Types themselves are represented as objects; an object contains a
pointer to the corresponding type object.  The type itself has a type
pointer pointing to the object representing the type &#39;type&#39;, which
contains a pointer to itself!).
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre class=&quot;example&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; type(1)
    &amp;lt;type &#39;int&#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; type(int)
    &amp;lt;type &#39;type&#39;&amp;gt;

&amp;gt;&amp;gt;&amp;gt; type(type)
    &amp;lt;type &#39;type&#39;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;object&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;PyObject, PyVarObject&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
这是两类基本对象,前者可以看作是不可变对象比如整数等的基类,后者可以看作是可变对象比如list,dict等的基类,c实现
等价于:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;struct&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;_object&lt;/span&gt; {
    &lt;span style=&quot;color: #66D9EF;&quot;&gt;Py_ssize_t&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;ob_refcnt&lt;/span&gt;;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;struct&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;_typeobject&lt;/span&gt; *&lt;span style=&quot;color: #FD971F;&quot;&gt;ob_type&lt;/span&gt;;
} &lt;span style=&quot;color: #66D9EF;&quot;&gt;PyObject&lt;/span&gt;;

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;struct&lt;/span&gt; {
    &lt;span style=&quot;color: #66D9EF;&quot;&gt;Py_ssize_t&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;ob_refcnt&lt;/span&gt;;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;struct&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;_typeobject&lt;/span&gt; *&lt;span style=&quot;color: #FD971F;&quot;&gt;ob_type&lt;/span&gt;;
    &lt;span style=&quot;color: #66D9EF;&quot;&gt;Py_ssize_t&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;ob_size&lt;/span&gt;; &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Number of items in variable part &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
} &lt;span style=&quot;color: #66D9EF;&quot;&gt;PyVarObject&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;ob_refcnt: 对象的引用计数
&lt;/li&gt;
&lt;li&gt;ob_type: 一个type对象,包含了该对象的类型信息,ob_type中会有一系列的函数指针,这些函数指针的值随着类型的不
同而不同,比如IntObject与StringObject的ob_type中的函数指针的值就不同,这个值是python实现多态的关键所在
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #66D9EF;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;Print&lt;/span&gt;(&lt;span style=&quot;color: #66D9EF;&quot;&gt;PyObject&lt;/span&gt;* &lt;span style=&quot;color: #FD971F;&quot;&gt;object&lt;/span&gt;)
{
    object-&amp;gt;ob_type-&amp;gt;tp_print(object);
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
不管是什么类型都可以正确的打印该对象(多态)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;ob_size: 对可变对象,比如 list,该值指定这个对象包含的元素个数(不是内存空间的大小)
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;PyIntObject&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
PyIntObject是python内部用来代表整数对象的C struct
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;struct&lt;/span&gt; {
    &lt;span style=&quot;color: #66D9EF;&quot;&gt;Py_ssize_t&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;ob_refcnt&lt;/span&gt;;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;struct&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;_typeobject&lt;/span&gt; *&lt;span style=&quot;color: #FD971F;&quot;&gt;ob_type&lt;/span&gt;;

    &lt;span style=&quot;color: #66D9EF;&quot;&gt;long&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;ob_ival&lt;/span&gt;;
} &lt;span style=&quot;color: #66D9EF;&quot;&gt;PyIntObject&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
可以看到他的前两项和PyObject是一样的,这样就可以通过 PyObject* 类型的指针来处理 PyIntObject, 因为PyIntObject
的相关操作函数都被封装在ob_type中
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;PyStringObject&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
内部用来代表string对象的C struct
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;struct&lt;/span&gt; {
    &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;PyObject_VAR_HEAD &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #66D9EF;&quot;&gt;Py_ssize_t&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;ob_refcnt&lt;/span&gt;;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;struct&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;_typeobject&lt;/span&gt; *&lt;span style=&quot;color: #FD971F;&quot;&gt;ob_type&lt;/span&gt;;
    &lt;span style=&quot;color: #66D9EF;&quot;&gt;Py_ssize_t&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;ob_size&lt;/span&gt;; &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Number of items in variable part &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;

    &lt;span style=&quot;color: #66D9EF;&quot;&gt;long&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;ob_shash&lt;/span&gt;;
    &lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;ob_sstate&lt;/span&gt;;
    &lt;span style=&quot;color: #66D9EF;&quot;&gt;char&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;ob_sval&lt;/span&gt;[1];

    &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Invariants:&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     *     ob_sval contains space for &#39;ob_size+1&#39; elements.&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     *     ob_sval[ob_size] == 0.&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     *     ob_shash is the hash of the string or -1 if not computed yet.&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     *     ob_sstate != 0 iff the string object is in stringobject.c&#39;s&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     *       &#39;interned&#39; dictionary; in this case the two references&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     *       from &#39;interned&#39; to this object are *not counted* in ob_refcnt.&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
} &lt;span style=&quot;color: #66D9EF;&quot;&gt;PyStringObject&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
开头的三项和 PyVarObject一模一样,这样就可以通过 PyVarObject指针来代表了,要注意这里的一个quirk,ob_sval是一个
长度为1的数组,假设我们要存储&quot;python&quot;这个字符串, 存储这个字符串需要7个字节(包括最后面的\0),所以在申请内存的时
候,我们会在PyStringObject后面紧接着申请6个字节,也就是sizeof(PyStringObject) + strlen(&quot;python&quot;),那么这时候
ob_sval后面的内存就恰好是7个字节了.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;PuListObject&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;typedef&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;struct&lt;/span&gt; {
    &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;PyObject_VAR_HEAD &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #66D9EF;&quot;&gt;Py_ssize_t&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;ob_refcnt&lt;/span&gt;;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;struct&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;_typeobject&lt;/span&gt; *&lt;span style=&quot;color: #FD971F;&quot;&gt;ob_type&lt;/span&gt;;
    &lt;span style=&quot;color: #66D9EF;&quot;&gt;Py_ssize_t&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;ob_size&lt;/span&gt;; &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Number of items in variable part &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;

    &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Vector of pointers to list elements.  list[0] is ob_item[0], etc. &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #66D9EF;&quot;&gt;PyObject&lt;/span&gt; **&lt;span style=&quot;color: #FD971F;&quot;&gt;ob_item&lt;/span&gt;;

    &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;ob_item contains space for &#39;allocated&#39; elements.  The number&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     * currently in use is ob_size.&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     * Invariants:&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     *     0 &amp;lt;= ob_size &amp;lt;= allocated&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     *     len(list) == ob_size&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     *     ob_item == NULL implies ob_size == allocated == 0&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     * list.sort() temporarily sets allocated to -1 to detect mutations.&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     *&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     * Items must normally not be NULL, except during construction when&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     * the list is not yet visible outside the function that builds it.&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;     &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #66D9EF;&quot;&gt;Py_ssize_t&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;allocated&lt;/span&gt;;
} &lt;span style=&quot;color: #66D9EF;&quot;&gt;PyListObject&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>reading-notes/乌合之众.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/reading-notes/乌合之众.html"/>
    <title>乌合之众(古斯塔夫.勒庞 )</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;乌合之众(古斯塔夫.勒庞 )&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;摘录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;摘录&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;真正的历史大动荡，并不是那些以其宏大而暴烈的场面让我们吃惊的事情。造成文明洗心革面的惟一重要的变化，是影
响到思想、观念和信仰的变化
&lt;/li&gt;
&lt;li&gt;从心理学的角度看，&quot;群体&quot;一词却有着完全不同的重要含义。在某些既定的条件下，并且只有在这些条件下，一群人会
表现出一些新的特点，它非常不同于组成这一群体的个人所具有的特点。聚集成群的人，他们的感情和思想全都转到同
一个方向，他们自觉的个性消失了，形成了一种集体心理。它无疑是暂时的，然而它确实表现出了一些非常明确的特点。
这些聚集成群的人进入一种状态，因为没有更好的说法，我姑且把它称为一个组织化的群体，或换个也许更为可取的说
法，一个心理群体。它形成了一种独特的存在，受群体精神统一律的支配。
&lt;/li&gt;
&lt;li&gt;因此，还是让我们把理性留给哲人，不要过于强烈地坚持让它插手对人的统治吧。一切文明的主要动力并不是理性，倒
不如说，尽管存在着理性，文明的动力仍然是各种感情–如尊严、自我牺牲、宗教信仰、爱国主义以及对荣誉的爱。
&lt;/li&gt;
&lt;li&gt;从以上讨论得出的结论是，群体在智力上总是低于孤立的个人，但是从感情及其激起的行动这个角度看，群体可以比个
人表现得更好或更差，这全着环境如何。一切取决于群体所接受的暗示具有什么性质。这就是只从犯罪角度研究群体的
作家完全没有理解的要点。群体固然经常是犯罪群体，然而它也常常是英雄主义的群体。正是群体，而不是孤立的个人，
会不顾一切地慷慨赴难，为一种教义或观念的凯旋提供了保证；会怀着赢得荣誉的热情赴汤蹈火；会导致–就像十字军
时代那样，在几乎全无粮草和装备的情况下–向异教徒讨还基督的墓地，或者像1793年那样捍卫自己的祖国。这种英雄
主义毫无疑问有着无意识的成分，然而正是这种英雄主义创造了历史。如果人民只会以冷酷无情的方式干大事，世界史
上便不会留下他们多少记录了。
&lt;/li&gt;
&lt;li&gt;孤立的个人具有主宰自己的反应行为的能力，群体则缺乏这种能力。
&lt;/li&gt;
&lt;li&gt;在这类事情中，暗示的起点一般都是某个人多少有些模糊的记忆所产生的幻觉，在这一最初的幻觉得到肯定之后，就会
引起相互传染。
&lt;/li&gt;
&lt;li&gt;（1）群体的冲动、易变和急躁。所有刺激因素都对群体有支配作用，并且它的反应会不停地发生变化/群体不会深思熟
虑/种族的影响。（2）群体易受暗示和轻信。群体受暗示的左右/它把头脑中产生的幻觉当做现实/为何这些幻觉对组成
群体的所有个人都是一样的/群体中有教养的人和无知的人没有区别/群体中的个人受幻觉支配的实例/史学著作的价值微
乎其微。（3）群体情绪的夸张与单纯。群体不允许怀疑和不确定/它们的感情总是走极端。（4）群体的偏执、专横和保
守。这些感情的缘由/群体面对强权卑躬屈膝/一时的革命本能不妨碍他们极端保守/对变化和进步的本能敌视。（5）群
体的道德。群体的道德可以比个人高尚或低劣/解释与实例/群体很少被利益的考虑所左右/群体的道德净化作用。
&lt;/li&gt;
&lt;li&gt;影响民众想像力的，并不是事实本身，而是它们发生和引起注意的方式。如果让我表明看法的话，我会说，必须对它们
进行浓缩加工，它们才会形成一种令人瞠目结舌的惊人形象。掌握了影响群众想像力的艺术，也就掌握了统治他们的艺
术。
&lt;/li&gt;
&lt;li&gt;1）群体的观念。基本观念和次要观念/相互矛盾的观念为何能够并存/高深的观念必须经过改造才能被群众所接受/观念
的社会影响与它是否包含真理无关。（2）群体的理性。群体不受理性的影响/群体只有十分低下的推理能力。它所接受
的观念只有表面上的相似性或连续性。（3）群体的想像力。群体有着强大的想像力/群体只会形象思维，这些形象之间
没有任何逻辑关系/群体易受神奇事物的感动，神奇事物是文明的真正支柱/民众的想像力是政客的权力基础/能够以事实
触发群体想像力的方式。
&lt;/li&gt;
&lt;li&gt;一切政治、神学或社会信条，要想在群众中扎根，都必须采取宗教的形式–能够把危险的讨论排除在外的形式。
&lt;/li&gt;
&lt;li&gt;没有传统，文明是不可能的；没有对这些传统的破坏，进步也是不可能的。
&lt;/li&gt;
&lt;li&gt;没有哪种统治形式可以一夜之间建立起来。政治和社会组织是需要数百年才能打造出来的产物。封建制度在建立起它的
典章之前，经历了数百年毫无秩序的混乱。绝对君权也是在存在了数百年后，才找到了统治的成规。这些等待的时期是
极为动荡的。&quot;
&lt;/li&gt;
&lt;li&gt;制度和政府都是种族的产物，它们并不是某个时代的创造者，而是由这个时代所创造。
&lt;/li&gt;
&lt;li&gt;后者总是一点一滴慢慢地发生变化，影响来自必要性，而不是来自思辨式的推理：英国宪法从来不考虑是否严谨对称，更多地是
考虑它是否方便实用；从来不单纯以不一致为理由去消除不一致；除非感到有所不满，绝对不加以变革；除非能够消除
这种不满，绝对不进行革新；除了针对具体情况必须提供的条款之外，绝对不制定任何范围更大的条款–这些原则，
&lt;/li&gt;
&lt;li&gt;人就像动物一样有着模仿的天性。模仿对他来说是必然的，因为模仿总是一件很容易的事情。正是因为这种必然性，才
使所谓时尚的力量如此强大。无论是意见、观念、文学作品甚至服装，有几个人有足够的勇气与时尚作对？支配着大众
的是榜样，不是论证。每个时期都有少数个人同其他人作对并受到无意识的群众的模仿，但是这些有个性的人不能过于
明目张胆地反对公认的观念。他们要是这样做的话，会使模仿他们变得过于困难，他们的影响也就无从谈起。正是由于
这个原因，过于超前于自己时代的人，一般不会对它产生影响。这是因为两者过于界限分明。也是由于这个原因，欧洲
人的文明尽管优点多多，他们对东方民族却只有微不足道的影响，因为两者之间的差别实在是太大了。
&lt;/li&gt;
&lt;li&gt;群体的意见和信念尤其会因为传染，但绝不会因为推理而得到普及。
&lt;/li&gt;
&lt;li&gt;一种信念开始衰亡的确切时刻很容易辨认–这就是它的价值开始受到置疑的时刻。一切普遍信念不过是一种虚构，它唯
一的生存条件就是它不能受到审察。
&lt;/li&gt;
&lt;li&gt;即使当一种信念已经摇摇欲坠时，根据它建立起来的制度仍会保持其力量，消失得十分缓慢。最后，当信念的余威尽失
时，建立于其上的一切很快也会开始衰亡。迄今为止，没有哪个民族能够在没有下决心破坏其全部文明因素的情况下转
变它的信仰。这个民族会继续这一转变过程，直到停下脚步接受一种新的普遍信念为止，在此之前它会一直处在一种无
政府状态中。普遍信念是文明不可缺少的柱石，它们决定着各种思想倾向。只有它们能够激发信仰并形成责任意识。
&lt;/li&gt;
&lt;li&gt;不存在任何引导意见的力量，再加上普遍信仰的毁灭，其最终结果就是对一切秩序都存在着极端分歧的信念，并且使群
众对于一切不明确触及他们直接利益的事情，越来越不关心
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>reading-notes/second-treatise-civil-government.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/reading-notes/second-treatise-civil-government.html"/>
    <title>政府论读书笔记</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;政府论读书笔记&lt;/h1&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;摘录&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;我认为政治权力就是为了规定和保护财产而制定法律的权利，判处死刑和一切较轻处分的权利，以及使用共同体的力量
来执行这些法律和保卫国家不受外来侵害的权利；而这一切都只是为了公众福利。
&lt;/li&gt;
&lt;li&gt;在自然状态中如果怕没有人拥有执行自然法的权力，以保护无辜和约束罪
犯，那么自然法就毫无用处了。而如果有人在自然状态中可以惩罚他人所犯的任何罪恶，那么人人就都可以这样做。因
为，在那种完全平等的状态中，根据自然，没有人享有高于别人的地位或对于别人享有管辖权，所以任何人在执行自然
法的时候所能做的事情，人人都必须有权去做。
&lt;/li&gt;
&lt;li&gt;一个人既然没有创造自己生命的能力，就不能用契约或通过同意把自己交由任何人奴役，或置身于别人的绝对的、任意
的权力之下，任凭夺去生命。谁都不能把多于自己所有的权力给予他人.
&lt;/li&gt;
&lt;li&gt;我们有理由断定政权的一切和平的起源都是基于人民的同意的。
&lt;/li&gt;
&lt;li&gt;政治社会的创始是以那些要加入和建立一个社会的个人的同意为依据的；当他们这样组成一个整体时，他们可以建立他
们认为合适的政府形式。
&lt;/li&gt;
&lt;li&gt;两种不同的权利——一种是人人所享有的旨在制止相类罪行而惩罚犯罪的权利；另一种是只属于受到损害的一方的要求赔
偿的权利
&lt;/li&gt;
&lt;li&gt;对另一个人的人身用强力或表示企图使用 强力，而又不存在人世间可以向其诉请救助的共同尊长，这是战争状态。
&lt;/li&gt;
&lt;li&gt;政府除了保护财产之外，没有其他目的
&lt;/li&gt;
&lt;li&gt;政治社会的创始是以那些要加入和建立一个社会的个人的同意为依据的；当他们这样组成一个整体时，他们可以建立他
们认为合适的政府形式。
&lt;/li&gt;
&lt;li&gt;完全可能的是，天生自由的人们根据他们自己的同意，顺从他们父亲的统治，或由不同的家族联合而成立一个政府，他
们一般地把统治权交给一人掌握，自愿受一人治理，既认为权力在他的诚笃和精明的掌握下相当安全，就没有以明白的
条件加以限制或控制，虽然他们从未梦想到君主政体是神授的权利这一说法，而这种说法在近代神学还没有把它向我们
启示以前，人们是从来没有听见过的；他们也从来没有容许过父权可以享有一种统辖的权利或成为一切政权的基础。可
见有很多证据足以证明，就历史来看，我们有理由断定政权的一切和平的起源都是基于人民的同意的。我之所以说和平
的，是因为我在下文将谈到征服，而有些人认为征服是创立政府的一个途径。
&lt;/li&gt;
&lt;li&gt;无论基于政府本身的实践或基于正当理性的法则，一个孩子生来并不就是国家或政府的一个臣民。在他到达成年以前，
他处在他父亲的教养和权威之下，到了成年，他便是一个自由人，可以随意地使自己处在哪个政府之下，加入哪个国家。
&lt;/li&gt;
&lt;li&gt;当一个人根本并未作出任何表示时，究竟怎样才可以认为他已经同意，从而受制于任何政府。对于这个问题，我可以这
样说，只要一个人占有任何土地或享用任何政府的领地的任何部分，他就因此表示他的默认的同意，从而在他同属于那
个政府的任何人一样享用的期间，他必须服从那个政府的法律。这不管他所占有的是属于他和他的子子孙孙的土地，或
只是一星器的住处，或只是在公路上自由地旅行；事实上，只要身在那个政府的领土范围以内，就构成某种程度的默认。
&lt;/li&gt;
&lt;li&gt;但是，服从一个国家的法律，在法律之下安静地生活和享受权利和保护，并不足以使一个人成为那个社会的成员，这只
是对于那些不处在战争状态中的人们，在他们来到属于政府的领土之内，来到其法律效力所及的范围之内时，所应该给
予的地方保护，以及他们对该政府所应尽的尊礼。不过，这并不使他成为那个社会的一个成员、那个国家的一个永久臣
民，虽然当他继续在那里的时候，他必须遵守法律和服从那里的政府，正如一个人为了方便而暂时寄居在另一个人的家
里，并不能使他从属于那个人一样，所以我们看到，那些终身在另一个政府之下生活并享受它的权利和保护的外国人，
尽管他们甚至在良心上不得不像任何公民一样服从它的管理，却并不因此成为该国的臣民或成员。除了通过明文的约定
以及正式的承诺和契约，确实地加入一个国家之外，没有别的方式可以使任何人成为那个国家的臣民或成员。我所认为
的关于政治社会的起源，以及使任何人成为任何国家的一个成员的同意，就是如此。
&lt;/li&gt;
&lt;li&gt;当人们最初联合成为社会的时候，既然大多数人自然拥有属于共同体的全部权力，他们就可以随时运用全部权力来为社
会制定法律，通过他们自己委派的官吏来执行那些法律，因此这种政府形式就是纯粹的民主政制；或者，如果把制定法
律的权力交给少数精选的人和他们的嗣子或继承人，那么这就是寡头政制；或者，如果把这权力交给一个人，那么这就
是君主政制；如果交给他和他的嗣子，这就是世袭君主制；如果只是交给他终身，在他死后，推定后继者的权力仍归于
大多数人，这就是选任君主制。
&lt;/li&gt;
&lt;li&gt;制定法律的权利归谁这一点就决定国家是什么形式.
&lt;/li&gt;
&lt;li&gt;特权就只能是人民之许可他们的统治者们，在法律没有规定的场合，按照他们的自由抉择来办理一些事情，甚至有时
与法律的明文相抵触，来为公众谋福利；以及人民之默认这种做法。
&lt;/li&gt;
&lt;li&gt;第一，它们应该以正式公布的既定的法律来进行统治，这些法律不论贫富，不论权贵和庄稼人都一视同仁，并不因特殊
情况而有出入。
第二，这些法律除了为人民谋福利这一最终目的之外，不应再有其他目的。
第三，未经人民自己或其代表同意，决不应该对人民的财产课税。这一点当然只与这样的政府有关，那里立法机关是
经常存在的，或者至少是人民没有把立法权的任何部分留给他们定期选出的代表们。
第四，立法机关不应该也不能够把制定法律的权力让给任何其他人，或把它放在不是人民所安排的其他任何地方。
&lt;/li&gt;
&lt;li&gt;每个人生来就有双重的权利：第一，他的人身自由的权利，别人没有权力加以支配，只能由他自己自由处理；第二，
首先是和他的弟兄继承他的父亲的财物的权利。
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;核心观点归纳&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
人类最初是处于自然状态，这种状态下人都是平等的,人的行为受到自然法（也就是理性）的支配,根据这种理性,每一个人
都会保护自己的生命以及财产,如果有人试图侵犯他人的生命或者财产也就是违反自然法,那么其他的人就有权利制止这种侵犯,因为人人是平
等的,既然一个人有这种权利,那么人人都应该有(不管是受害人还是非受害人),但是这种转态有三个弊端:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;自然法并不是明文法,它的许多地方是有含糊之处的,即便是现代社会,有明文法的情况下,仍然有许多人打擦边球,所以
在很多情况下,认定一个人的行为是否违反自然法就变得比较困难
&lt;/li&gt;
&lt;li&gt;如何保证违反自然法的人受到公正的审判,因为如果直接交由受害人审判,它们肯定希望从重处罚,而这种处罚对违反自
然法的人极有可能是不公平的,所以也就需要一个权威审判者
&lt;/li&gt;
&lt;li&gt;即便认定一个人违反了自然法,那么如何确保这个人一定受到惩罚,也是一件困难的事
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
为了解决这些弊端,处于自然状态下的人,基于同意,建立政府,通过政府立法来代替自然法,并且成立一个由全民认同的审判
机构来进行公平的审判,同时每个人让渡自己享有那份处罚罪犯的权利给政府,由政府代表全民的意志来确保违反法律的人
受到应有的处罚
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>reading-notes/Probability.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/reading-notes/Probability.html"/>
    <title>概率论与数理统计笔记</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;概率论与数理统计笔记&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;概率论&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;事件的概率&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;古典概率&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;概率的公理化定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-4&quot;&gt;基本事件(简单事件)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-5&quot;&gt;互斥事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-6&quot;&gt;对立事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-7&quot;&gt;事件的和(补集), 积(交集) 与 差&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-7-1&quot;&gt;和&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-7-2&quot;&gt;积&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-7-3&quot;&gt;差&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-8&quot;&gt;加法定律&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-9&quot;&gt;条件概率(后验概率)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-10&quot;&gt;独立事件与乘法定律&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-11&quot;&gt;全概率公式与贝叶斯公式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;随机变量的概率&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-2-1&quot;&gt;随机变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2&quot;&gt;离散性随机变量&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-2-2-1&quot;&gt;概率函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2-2&quot;&gt;概率分布函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2-3&quot;&gt;离散性随机变量的几个分布&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2-4&quot;&gt;连续性随机变量的几个分布&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;概率论&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;事件的概率&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;古典概率&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;p&gt;
全部试验结果已知并且等可能的情况下才可以应用古典概率,古典概率一般是使用排列组合来求解
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;概率的公理化定义&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
所有的试验结果定义一个全集Ω , 任何定义于该集合上的事件都是它的子集
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;事件&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;p&gt;
一个事件可以看作是实验或者观察的一个结果：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;必须建立在一个明确的试验的基础上
&lt;/li&gt;
&lt;li&gt;这个试验的所有可能的结果已知(每一个可能的结果叫一个基本事件或简单事件)
&lt;/li&gt;
&lt;li&gt;事件明确的界定这些结果中的一部分。
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
如果规定事件E 为掷骰子掷出偶数点,那么它就符合上面的三点要求
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-4&quot;&gt;基本事件(简单事件)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-4&quot;&gt;
&lt;p&gt;
如果只包含结果集中的一种结果的话,那么这个时间可以称为基本事件,比如掷骰子掷出1点就是一个基本时间
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-5&quot;&gt;互斥事件&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-5&quot;&gt;
&lt;p&gt;
如果两个事件不可能同时发生，那么他们就是互斥事件，表现在集合上就是两个集合无交集
互斥事件有一个发生的概率：P(A+B) = P(A) + P(B) (用集合很好理解)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-6&quot;&gt;对立事件&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-6&quot;&gt;
&lt;p&gt;
是互斥事件的特例，表现在集合上两个集合互为补集、
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-7&quot;&gt;事件的和(补集), 积(交集) 与 差&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-7&quot;&gt;
&lt;p&gt;
都可以从集合的角度理解,分别是补集,交集和差集,记住这只是事件本身的运算,不是事件的概率的运算
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-7-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-7-1&quot;&gt;和&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-7-1&quot;&gt;
&lt;p&gt;
若有两个事件A与B
C = {A, B至少有一个发生},那么C就是A, B的和,记作: C = A+B
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-7-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-7-2&quot;&gt;积&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-7-2&quot;&gt;
&lt;p&gt;
若有两个事件A与B
C = {A, B至少有一个发生},那么C就是A, B的积,记作: C = AB
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-7-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-7-3&quot;&gt;差&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-7-3&quot;&gt;
&lt;p&gt;
若有两个事件A与B
C = {A发生但是B不发生},那么C就是A与B的差,记作: C = A-B
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-8&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-8&quot;&gt;加法定律&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-8&quot;&gt;
&lt;p&gt;
对于n个互斥时间A1, A2, … An
P(A1 + A2 + … + An) = P(A1) + P(A2) + … P(An)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-9&quot;&gt;条件概率(后验概率)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-9&quot;&gt;
&lt;p&gt;
有两个事件A与B,在确定B发生的条件下,A发生的概率(也就是A的条件概率,也称为A的后验概率)
P(A|B) = P(AB)/P(B)
&lt;/p&gt;

&lt;p&gt;
可以从集合的角度理解,如果已知B发生这个条件,那么要A发生显然只能是A与B的交集部分
&lt;b&gt;千万不要把条件概率与事件的积混同&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-10&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-10&quot;&gt;独立事件与乘法定律&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-10&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
如果事件B发生对事件A发生的概率无影响，那么A,B就是独立事件。。
P(A|B) = P(AB) / P(B)          ==&amp;gt;这个是条件概率的定义
P(AB) = P(A) P(B)              ==&amp;gt;乘法定律,独立事件积的概率等于各独立事件概率的积
乘法定律的推论：P(A B负) / P(B负) = P(A)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
如果A，B是独立事件，那么P(A|B)=P(AB)/P(B)=P(A),也就是P(AB)=P(A)P(B)
特别注意独立事件表现在集合上，两个集合是有交集的，独立事件的本质是：A在B发生的前提下的条件概率等于A的本来概率，
也就是B的发生对A的发生概率没有影响。在实际应用中并不经常使用 P(AB) = P(A) P(B)来验证是否是独立事件,而是根
据常识来进行判断两个事件是否有关联
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-11&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-11&quot;&gt;全概率公式与贝叶斯公式&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-11&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
B1, B2,…Bn是一个完备事件群,也就是说它们的和事件是必然事件且两两互斥,也就是和事件的概率为1.
已知 B1 + B2 + … + Bn = Ω (样本空间)
那么 A = A(B1 + B2 + … + Bn)
P(A)=P(AB1)+P(AB2)+…+P(ABn)
P(A) = P(B1)P(A|B1) + P(B2)P(A|B2) + … +P(Bn)P(A|Bn) ==&amp;gt; 全概率公式
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
全概率公式可以这样B1, B2, … Bn都是导致A发生的途径, 先计算A在以上各途径发生的条件概率,然后在加权平均(也就
是乘以Bn的概率)
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
P(B|A)=P(AB)/P(A) 而 P(AB)=P(A|B)P(B)
所以 P(B|A)=P(A|B)*P(B)/P(A)      ==&amp;gt;贝叶斯公式
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;随机变量的概率&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;随机变量&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;p&gt;
和函数中自变量的含义类似,随机变量可以取不同的值,而随机变量能取的所有值也会组成一个全集Ω, 与古典概率不同的
是每一个值对应的概率可以是不同的,而古典概率中全集Ω中每一个元素对应一个基本事件,而每个基本事件的概率是均等
的.
随机变量分为离散性随机变量和连续性随机变量
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;离散性随机变量&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-2-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-2-1&quot;&gt;概率函数&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-2-1&quot;&gt;
&lt;p&gt;
f(x) = x这点的概率
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-2-2&quot;&gt;概率分布函数&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-2-2&quot;&gt;
&lt;p&gt;
F(x) = 所有小于等于x 的变量的和
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-2-3&quot;&gt;离散性随机变量的几个分布&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-2-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;二项分布 : 放回抽样,如果事件A在一次试验中发生的概率为p, 把这个试验独立的重复n次, 以X记A在这n次试验中发
生的次数, 那么有下式
\begin{equation}
  P(X=i)=b(i, n, p) = \mathrm{C}_n^i p^i (1-p)^{n-i}
\end{equation}

&lt;p&gt;
记号为 B(n, p)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;泊松分布(Poisson distribution): 很重要的离散性分布,一般出现在表示一定时间或者空间内出现的事件个数这种场
合,它可以看作是二项分布极限得到的,当二项分布的np不太大时,可以近似为泊松分布

\begin{equation}
  P(X=i) = \frac{e^{-\lambda}\lambda^i} {i!}
\end{equation}

&lt;p&gt;
很显然P(x=1)+P(x=2)+P(x=3)+… = 1,证明过程如下:
使用泰勒级数展开\( e^x \), 可得:
&lt;/p&gt;
\begin{equation}
  e^x = \sum_{i=0}^\infty \frac{x^i}{i!}
\end{equation}

&lt;p&gt;
两相比较是明显的倒数关系.
&lt;/p&gt;

&lt;p&gt;
下面来说明泊松分布与二项分布的关系,以及泊松分布的推导过程: 对于二项分布,如果它的试验次数n很大,同时概率
p又很小, 但是 λ=np 适中,于是 p=λ/n ,根据二项分布:
&lt;/p&gt;
\begin{equation}
  P(X=i) = \mathrm{C}_n^i \frac{\lambda}{n}^i
  (1 - \frac{\lambda}{n})^{n-i}
\end{equation}
&lt;p&gt;
因为
&lt;/p&gt;
\begin{equation}
  \lim_{n \to \infty}\frac{\mathrm{A}_n^i}{n^i} = 1
\end{equation}
&lt;p&gt;
所以
&lt;/p&gt;
\begin{equation}
  \mathrm{C}_n^i\frac{\lambda}{n}^i = \frac{\mathrm{A}_n^i}{n^i}
                                      \frac{\lambda^i}{i!}
                                    = \frac{\lambda^i}{i!}
\end{equation}
&lt;p&gt;
因为
&lt;/p&gt;
\begin{equation}
  \lim_{n \to \infty}(1+\frac{1}{n})^n = e
\end{equation}
&lt;p&gt;
所以
&lt;/p&gt;

\begin{equation}
  \lim_{n \to \infty}(1 - \frac{\lambda}{n})^n =
  \lim_{n \to \infty}(1 + \frac{1}{(-\frac{n}{\lambda})})^{-\frac{n}{\lambda} (-\lambda)}=
  e^{-\lambda}
\end{equation}
\begin{equation}
  (1 - \frac{\lambda}{n})^{n-i} = e^{-\lambda}
\end{equation}

&lt;p&gt;
所以
&lt;/p&gt;
\begin{equation}
  P(X=i) = e^{-\lambda} \frac{\lambda^i}{i!}
\end{equation}
&lt;/li&gt;

&lt;li&gt;超几何分布 : 不放回抽样,

\begin{equation}
  P(X=m) = \frac{\mathrm{C}_M^m \mathrm{C}_{N-M} ^{n-m}} {\mathrm{C}_N^n}
\end{equation}
&lt;/li&gt;

&lt;li&gt;负二项分布 :
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2-4&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-2-4&quot;&gt;连续性随机变量的几个分布&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-2-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;正态分布[Normal distribution](高斯分布[Gaussian distribution])
\begin{equation}
  f(x)=(\sqrt{2\pi} \delta)^{-1} e^{-\frac{(x-\mu)^2}{2\delta^2}},
  \qquad -\infty 
&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>django.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/django.html"/>
    <title>DJANGO笔记</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;DJANGO笔记&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;django&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;URLConf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;模板&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-2-1&quot;&gt;best practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2&quot;&gt;模板的基本语法&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-2-2-1&quot;&gt;基本示例代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2-2&quot;&gt;模板的&#39;.&#39;的用法:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2-3&quot;&gt;过滤器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-3&quot;&gt;使用模板的方法：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-4&quot;&gt;模板的包含与继承&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-5&quot;&gt;xss安全问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;Model&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-3-1&quot;&gt;best practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2&quot;&gt;model的基本使用：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-3&quot;&gt;manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-4&quot;&gt;related manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-5&quot;&gt;杂七杂八&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-6&quot;&gt;几个特殊的field&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;表单&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-4-1&quot;&gt;表单的验证步骤&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-4-1-1&quot;&gt;设置validator以及clean_&amp;lt;filedname&amp;gt;的一般方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4-2&quot;&gt;ModelForm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5&quot;&gt;ContentType&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-5-1&quot;&gt;Generic relations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6&quot;&gt;signal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7&quot;&gt;generic views&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-7-1&quot;&gt;几个有用Mixin&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-7-1-1&quot;&gt;TemplateResponseMixin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7-1-2&quot;&gt;SingleObjectMixin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7-1-3&quot;&gt;SingleObjectTemplateResponseMixin(继承自TemplateResponseMixin)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-8&quot;&gt;第三方app的使用&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-8-1&quot;&gt;south&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-8-2&quot;&gt;mptt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-8-3&quot;&gt;django-braces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9&quot;&gt;我遇到的令人费解的error&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;django&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
django是一个python编写的full stack web开发框架
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;URLConf&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
一些注意事项以及一些推荐的编码方式：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;尽量使用named url，也就是每一条url规则都添加一个 name=&#39;…&#39; 的关键字参数
&lt;/li&gt;
&lt;li&gt;在template中可以使用url标签来根据url 规则生成url，这样可以提高程序的通用性，值得注意的是，{% url name %}
中name必须用引号
&lt;/li&gt;
&lt;li&gt;移除每个pattern开头的/， 比如/hello/， 那么就写hello/，django的风格是每一个url后都有一个/，当用户的url不
是以/结尾时，可以通过设置配置文件setting中APPEND_SLASH项为True来自动添加
&lt;/li&gt;
&lt;li&gt;网站的根目录用 ^$ 来匹配
&lt;/li&gt;
&lt;li&gt;当需要传递参数给view时，可以用括号标示要作为参数传递的部分，eg: ^/time/plus/(\d{1, 2})/$ , 那么当访问
/time/plus/22/时， 这个22就会作为参数传递给view
&lt;/li&gt;
&lt;li&gt;pattern中的view，可以不导入，而直接写字符串, patterns函数的第一个参数是前缀
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;mysite.views后以及hello与hours_ahead前都没有点好号&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;urlpatterns&lt;/span&gt; = patterns(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;mysite.views&#39;&lt;/span&gt;,
    url(r&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;^hello/$&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;hello&#39;&lt;/span&gt;, name=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;hello&#39;&lt;/span&gt;),
    url(r&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;^time/plus/(\d{1,2})/$&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;hours_ahead&#39;&lt;/span&gt;, name=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;hours_ahead&#39;&lt;/span&gt;),
)

&lt;span style=&quot;color: #FD971F;&quot;&gt;urlpatterns&lt;/span&gt; = patterns(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;&#39;&lt;/span&gt;,
    url(r&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;^hello/$&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;mysite.views.hello&#39;&lt;/span&gt;),
    url(r&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;^time/plus/(\d{1,2})/$&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;mysite.views.hours_ahead&#39;&lt;/span&gt;),
)

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; mysite.views &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; hello, hours_ahead
&lt;span style=&quot;color: #FD971F;&quot;&gt;urlpatterns&lt;/span&gt; = patterns(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;&#39;&lt;/span&gt;,
    url(r&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;^hello/$&#39;&lt;/span&gt;, hello),
    url(r&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;^time/plus/(\d{1,2})/$&#39;&lt;/span&gt;, hours_ahead),
)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;三者是等价的，我比较喜欢第二种方式&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
三者是等价的，前两种方式不需要用import进行导入，我比较喜欢第一种方式
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;命名参数，&#39;^mydata/(?P&amp;lt;month&amp;gt;\d{1, 2})/(?P&amp;lt;day&amp;gt;\d\d)/$&#39; ,那么其中的month, day就是关键字参数，如果用户访问
      &lt;i&gt;mydate/11/22&lt;/i&gt; 那么就会调用my_view(month=&#39;11&#39;, day=&#39;22&#39;)
&lt;/li&gt;
&lt;li&gt;urlCONF不会区分是get， post，put，delete，只要url相同它就会将请求导向同一个视图处理函数，所以必要的情况
下区分get请求，post请求是视图函数的责任，还有urlConf不会理会url中的查询字符串，比如
&lt;a href=&quot;http://www.example.com/app/?aa=1&amp;amp;bb=2&quot;&gt;http://www.example.com/app/?aa=1&amp;amp;bb=2&lt;/a&gt; ,那么urlCONF只会使用 app/ 去匹配，而不管后面的查询字符串
&lt;/li&gt;
&lt;li&gt;对于app的URLConf，可以通过include包含到主模块的URLConf中，注意这种情况下要有^, 但是不能有$,
eg: (r &#39;^blog/&#39;, include(&#39;blog.urls&#39;)) ,那么访问 /blog/subject/1111 时，就会将 subject/1111传入blog的
URLConf中进行匹配
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;模板&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;best practices&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;endblock应该带上block名，这样能让代码更清晰 eg： {% block footerjs %}….{% endblock footerjs %}
&lt;/li&gt;
&lt;li&gt;尽量让模板代码清晰，而不是让生成的html代码清晰，所以像循环，判断逻辑代码不要为了html好看而放在同一行
&lt;/li&gt;
&lt;li&gt;通过url标签生成网址，而不要硬编码，对静态文件也是如此，尽量使用static标签
&lt;/li&gt;
&lt;li&gt;尽量使用好记的名字来代表对象，而不要用object,object_list之类的名字（CBV编码时特别注意，因为object，
object_list是默认名字）
&lt;/li&gt;
&lt;li&gt;自定义的模板tag与filter只有在没有其它选择时在使用，不能滥用
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;模板的基本语法&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-2-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-2-1&quot;&gt;基本示例代码&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-2-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt;&amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;html&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;head&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;Ordering notice&lt;/span&gt;&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;title&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;head&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;body&lt;/span&gt;&amp;gt;

    &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;Ordering notice&lt;/span&gt;&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;h1&lt;/span&gt;&amp;gt;

    &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;Dear {{ person_name }},&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;

    &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;Thanks for placing an order from {{ company }}. It&#39;s scheduled to
      ship on {{ ship_date|date:&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;F j, Y&quot;&lt;/span&gt; }}.&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;

    &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;Here are the items you&#39;ve ordered:&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;

    &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;ul&lt;/span&gt;&amp;gt;
      {% for item in item_list %}
      &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;li&lt;/span&gt;&amp;gt;{{ item }}&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;li&lt;/span&gt;&amp;gt;
      {% endfor %}
    &amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;ul&lt;/span&gt;&amp;gt;

    {% if ordered_warranty %}
    &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;Your warranty information will be included in the packaging.&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;
    {% else %}
    &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;You didn&#39;t order a warranty, so you&#39;re on your own when
      the products inevitably stop working.&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;
    {% endif %}

    &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;Sincerely,&amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;br&lt;/span&gt; /&amp;gt;{{ company }}&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;html&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-2-2&quot;&gt;模板的&#39;.&#39;的用法:&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-2-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;引用字典
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; django.template &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; Template, Context
&lt;span style=&quot;color: #FD971F;&quot;&gt;person&lt;/span&gt; = {&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;name&#39;&lt;/span&gt;: &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Sally&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;age&#39;&lt;/span&gt;: &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;43&#39;&lt;/span&gt;}
&lt;span style=&quot;color: #FD971F;&quot;&gt;t&lt;/span&gt; = Template(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;{{ person.name }} is {{ person.age }} years old.&#39;&lt;/span&gt;)
&lt;span style=&quot;color: #FD971F;&quot;&gt;c&lt;/span&gt; = Context({&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;person&#39;&lt;/span&gt;: person})
t.render(c)
&lt;span style=&quot;color: #75715E;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;result is: u&#39;Sally is 43 years old.&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;引用list的索引
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; django.template &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; Template, Context
&lt;span style=&quot;color: #FD971F;&quot;&gt;t&lt;/span&gt; = Template(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Item 2 is {{ items.2 }}.&#39;&lt;/span&gt;)
&lt;span style=&quot;color: #FD971F;&quot;&gt;c&lt;/span&gt; = Context({&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;items&#39;&lt;/span&gt;: [&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;apples&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;bananas&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;carrots&#39;&lt;/span&gt;]})
t.render(c)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;result is :u&#39;Item 2 is carrots.&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;引用对象的属性
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; django.template &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; Template, Context
 &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; datetime
 &lt;span style=&quot;color: #FD971F;&quot;&gt;d&lt;/span&gt; = datetime.date(1993, 5, 2)
 &lt;span style=&quot;color: #FD971F;&quot;&gt;t&lt;/span&gt; = Template(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;The month is {{ date.month }} and the year is {{ date.year }}.&#39;&lt;/span&gt;)
 &lt;span style=&quot;color: #FD971F;&quot;&gt;c&lt;/span&gt; = Context({&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;date&#39;&lt;/span&gt;: d})
 t.render(c)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;result is : u&#39;The month is 5 and the year is 1993.&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;引用对象的方法(只能引用不需要参数的方法)
和引用对象的属性类似，不需要()
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-2-3&quot;&gt;过滤器&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-2-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;addslashes: 添加反斜杠到任何反斜杠
&lt;/li&gt;
&lt;li&gt;date: 按指定的格式字符串参数格式化 date 或者 datetime 对象，范例：
{{ pub_date|date:&quot;F j, Y&quot; }}
&lt;/li&gt;
&lt;li&gt;safe: 默认django模板会把所有的html tag转义，也就是将&amp;lt;转换为&amp;amp;lt之类的符号，添加这个过滤器后
它就不转义了,和它等价的还有autoescape，但是autoescape是一个tag，不是filter
&lt;/li&gt;
&lt;li&gt;add：加，如果想减，那就添加负数
&lt;/li&gt;
&lt;li&gt;length：对字符串以及list有效
&lt;/li&gt;
&lt;li&gt;upper: 大写
&lt;/li&gt;
&lt;li&gt;lower：小写
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-3&quot;&gt;使用模板的方法：&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;创建一个模板对象
&lt;/li&gt;
&lt;li&gt;创建一个contex对象(和字典相似)
&lt;/li&gt;
&lt;li&gt;render模板
&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; django &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; template
&lt;span style=&quot;color: #FD971F;&quot;&gt;t&lt;/span&gt; = template.Template(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;My name is {{ name }}.&#39;&lt;/span&gt;)
&lt;span style=&quot;color: #FD971F;&quot;&gt;c&lt;/span&gt; = template.Context({&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;name&#39;&lt;/span&gt;: &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Adrian&#39;&lt;/span&gt;})
t.render(c)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
因为是重复性的工作，所以django提供了shortcut,建议现在settings.py设定
TEMPLATE_DIRS
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; django.shortcuts &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; render_to_response
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; datetime

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;current_datetime&lt;/span&gt;(request):
    &lt;span style=&quot;color: #FD971F;&quot;&gt;now&lt;/span&gt; = datetime.datetime.now()
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; render_to_response(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;current_datetime.html&#39;&lt;/span&gt;, {&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;current_date&#39;&lt;/span&gt;: now})
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
render_to_response只需要提供模板文件，与一个字典，它会渲染模板，并且返回一
个HttpResponse对象,极大的简化了工作
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-4&quot;&gt;模板的包含与继承&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;include标签
{% include &quot;includes/nav.html&quot; %}，
在include时，你可以用with指定一个变量，比如如下代码：
{% include &quot;include/nav.html&quot; with current_idx=1 %}
这样就可以创建一个通用的页面片段来render几个有细微差别的不同页面
&lt;/li&gt;
&lt;li&gt;模板继承
base.html:
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt;&amp;lt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;!DOCTYPE&lt;/span&gt; HTML PUBLIC &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;-//W3C//DTD HTML 4.01//EN&quot;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;html&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;lang&lt;/span&gt;=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;{% block title %}{% endblock %}&lt;/span&gt;&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;title&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;head&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;My helpful timestamp site&lt;/span&gt;&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;h1&lt;/span&gt;&amp;gt;
    {% block content %}{% endblock %}
    {% block footer %}
    &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;hr&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;Thanks for visiting my site.&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;
    {% endblock %}
  &amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;html&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt;{% extends &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;base.html&quot;&lt;/span&gt; %}

{% block title %}The current time{% endblock %}

{% block content %}
&amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;It is now {{ current_date }}.&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;
{% endblock %}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
每一个block就是一个子模板可以重定义的区域
根据需要使用任意多的继承次数。使用继承的一种常见方式是下面的三层法：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;创建 base.html 模板，在其中定义站点的主要外观感受。这些都是不常修改甚至从不修改的部分.
&lt;/li&gt;
&lt;li&gt;为网站的每个区域创建 base_SECTION.html 模板(例如, base_photos.html 和 base_forum.html )。这些模板对 base.html 进行拓展，并包含区域特定的风格与设计。
&lt;/li&gt;
&lt;li&gt;为每种类型的页面创建独立的模板，例如论坛页面或者图片库。这些模板拓展相应的区域模板。
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-5&quot;&gt;xss安全问题&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-5&quot;&gt;
&lt;p&gt;
跨站脚本攻击，防范措施就是escape 用户提交的内容，去掉其中html tag
django默认打开了auto escape，有几个template tag以及filter需要说明
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;autoescape： 这是一个template tag，不是filter，等价于对每一个模板变量应用escape filter
&lt;/li&gt;
&lt;li&gt;escape： 在auto escape打开的时候没有效果，注意不管这个filter是不是最后一个filter，它的效果等同于将它放
在最后，也就是说输出只有等到最后才会应用这个filter，这也就保证，不过escape的位置在哪里，最终用于输出的
字符串都是已经转义的
&lt;pre class=&quot;example&quot;&gt;
{% autoescape off %}
{{ title|escape }}
{% endautoescape %}
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;force_escape： 和escape的区别是，它直接应用于输入，而不是等到最后
&lt;/li&gt;
&lt;li&gt;safe：不转义，如果后面又添加别的filter是可能改变这个结果的，比如:
{{ var|safe|escape }}
var仍然会转义
&lt;/li&gt;
&lt;li&gt;在view中可以使用如下代码来escape html
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; django.utils.html &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; escape
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; HttpResponse(escape(some_string))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
view中操作html字符串还有几个比较有用的函数：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;strip_tags(value): 删除所有的html标签，注意不是转义，它会将&amp;lt;div&amp;gt;,&amp;lt;h1&amp;gt;这样的标签整个删掉，只保留text
&lt;/li&gt;
&lt;li&gt;remove_tags(value, tags)：和strip_tags类似，不过它只删掉tags指定的tag，tags是一个以空格分割的字符串，
比如： &quot;div h1 a&quot;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;Model&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;best practices&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;每一个app都有一个app_label属性，这个属性的值默认是app的导入路径的最后一部分，比
如&#39;django.contrib.contenttypes&#39;, 那么这个app的app_label就是contenttypes，在model中ForiegnKey，
ManyToManyField中指定target model时都是使用app_label.model_name的格式，还有当自定义USER_AUTH_MODEL时也是
如此
&lt;/li&gt;
&lt;li&gt;在一个app最好不要超过5个model， 如果model过多，那么要考虑将其拆分为更小的app
&lt;/li&gt;
&lt;li&gt;尽量不要直接使用SQL语句
&lt;/li&gt;
&lt;li&gt;在需要时添加index (db_index)
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;model的基本使用：&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;第一步必须设置settings.py的数据库相关域,用以下代码验证配置是否正确：
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;python manage.py shell &lt;span style=&quot;color: #75715E;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;enter django shell&lt;/span&gt;

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; django.db &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; connection
&lt;span style=&quot;color: #FD971F;&quot;&gt;cursor&lt;/span&gt; = connection.cursor()
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;创建一个app(使用module必须创建app)
python manage.py startapp appname
然后在module.py添加代码
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; django.db &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; models

&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Create your models here.&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Publisher&lt;/span&gt;(models.Model):
    &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;name&lt;/span&gt; = models.CharField(max_length = 30)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;address&lt;/span&gt; = models.CharField(max_length = 50)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;city&lt;/span&gt; = models.CharField(max_length = 60)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;state_province&lt;/span&gt; = models.CharField(max_length = 30)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;country&lt;/span&gt; = models.CharField(max_length = 50)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;website&lt;/span&gt; = models.URLField()

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Author&lt;/span&gt;(models.Model):
    &lt;span style=&quot;color: #FD971F;&quot;&gt;first_name&lt;/span&gt; = models.CharField(max_length=30)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;last_name&lt;/span&gt; = models.CharField(max_length=40)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;email&lt;/span&gt; = models.EmailField()

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Book&lt;/span&gt;(models.Model):
    &lt;span style=&quot;color: #FD971F;&quot;&gt;title&lt;/span&gt; = models.CharField(max_length=100)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;authors&lt;/span&gt; = models.ManyToManyField(Author)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;publisher&lt;/span&gt; = models.ForeignKey(Publisher)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;publication_date&lt;/span&gt; = models.DateField()
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
然后运行python manage.py validate检查模型语法是否正确，无误后运行
python manage.py sqlall books会显示最终运行的sql语句
python manage.py syncdb会最终执行数据库的创建
&lt;b&gt;常见的field option&lt;/b&gt;
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;verbose_name: 建议每一个field都加上，会显示在admin上的field name
&lt;/li&gt;
&lt;li&gt;editable: 如果为false，那么该项不会显示在admin或者modelForm中
&lt;/li&gt;
&lt;li&gt;default: 默认值
&lt;/li&gt;
&lt;li&gt;choices：对应的域被限制在一个已定义的范围内
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; django.db &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; models

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Person&lt;/span&gt;(models.Model):
    &lt;span style=&quot;color: #FD971F;&quot;&gt;SHIRT_SIZES&lt;/span&gt; = (
        (&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;S&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Small&#39;&lt;/span&gt;),
        (&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;M&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Medium&#39;&lt;/span&gt;),
        (&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;L&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Large&#39;&lt;/span&gt;),
    )
    &lt;span style=&quot;color: #FD971F;&quot;&gt;name&lt;/span&gt; = models.CharField(max_length=60)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;shirt_size&lt;/span&gt; = models.CharField(max_length=1, choices=SHIRT_SIZES)

&lt;span style=&quot;color: #FD971F;&quot;&gt;p&lt;/span&gt; = Person(name=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Fred Flintstone&quot;&lt;/span&gt;, shirt_size=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;L&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;max_length: 对于CharFiled这是必须的
&lt;/li&gt;
&lt;li&gt;unique: 如果你需要这一列每一个值都唯一，那么你就指定为true
&lt;/li&gt;
&lt;li&gt;related_name: 这个只在 ForeignKey,ManyToManyField中有用，比如上面model，如果一个Author对象a要获得自己
的所有书，那么它需要这么干a.book_set.all(), 如果你在Book model的authors指定了related_name, 那么
book_set就换成你指定的值
&lt;/li&gt;
&lt;li&gt;auto_now_add:对DateField, DateTimeField有效，如果记录第一次创建，那么自动添加当前时间，比如博客的创建
时间，会自动继承editable属性，所以admin不会显示
&lt;/li&gt;
&lt;li&gt;auto_now: 同上，但是每一次调用save方法时都会更新时间为当前时间，所以比较适合像last_update这样的条目
&lt;/li&gt;
&lt;li&gt;null, blank: 默认django创建数据库时是会指定NOT NULL，那么数据库就不会接受null值，而如果你指定
null=True，那么django创建数据库就不会指定NOT NULL， 而blank的作用实际是在admin中以及form中对数据进行
验证，如果指定blank=True，那么admin或者modelForm的form就会允许空值，这里有个表来显示对不同的field如何
使用二者

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;&lt;colgroup&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;field name&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;null&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;blank&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;CharField, EmailField,SlugFiled, TextField…&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;不要设置为True，因为默认以空字符串代替null&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ok&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;BooleanField&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;Don&#39;t do this, use NullBooleanField instead&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;Don&#39;t do this&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;IntegerField, FloatField, DecimalField&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ok&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ok&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;DateField, TimeField, DateTimeField..etc&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ok&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ok&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;ForeignKey, ManyToManyField, OneToOneField&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ok&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ok(最好两项都指定为True)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;IPAddressField&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ok&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;不推荐，主要是postgreSQL有一个类型存储ip&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;访问修改数据库
一些基本概念：
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;QuerySet是一个类list的结构，支持list的很多操作，比如分片，下标等
&lt;/li&gt;
&lt;li&gt;all, filter, order_by返回QuerySet,而且它们都是QuerySet对象的method，这样可以构建连锁查询
&lt;/li&gt;
&lt;li&gt;delete也是QuerySet的方法，如果调用那么就会删除QuerySet中所有记录
&lt;/li&gt;
&lt;li&gt;get应该返回单个对象，如果有多个符合条件，或者没有符合条件的，都会返回exception
&lt;/li&gt;
&lt;li&gt;对于主键查询，尽量使用pk,而不是id，原因是id是python的关键字，容易引起混淆，而且pk更灵活的指定条件，比
如pk__gt=4
&lt;/li&gt;
&lt;li&gt;在filter,get函数的参数可以指定field应满足的条件，多个条件是and的关系，也就是对应SQL的AND，如果需要更
复杂的查询(比如需要多个条件之间为OR)可以使用Q来构造，看下面的示例代码
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;格式是fieldname__type=value&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;常见的type是exact(如果直接使用field=value,那么type就是exact)，iexact(case sensitive),&lt;/span&gt;
Entry.objects.get(id__exact=14)
Entry.objects.get(&lt;span style=&quot;color: #A6E22E;&quot;&gt;id&lt;/span&gt;=14)        &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;默认是exact&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;startswith, endswith, istartwith, iendwith&lt;/span&gt;
Entry.objects.&lt;span style=&quot;color: #A6E22E;&quot;&gt;filter&lt;/span&gt;(headline__startswith=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Will&#39;&lt;/span&gt;)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;contains,icontains(case sensitive)&lt;/span&gt;
Entry.objects.get(headline__contains=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Lennon&#39;&lt;/span&gt;)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;in&lt;/span&gt;
Entry.objects.&lt;span style=&quot;color: #A6E22E;&quot;&gt;filter&lt;/span&gt;(id__in=[1, 3, 4])
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;gt, gte,lt, lte&lt;/span&gt;
Entry.objects.&lt;span style=&quot;color: #A6E22E;&quot;&gt;filter&lt;/span&gt;(id__gt=4)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;year,month,day(对date，datetime field有效)&lt;/span&gt;
Entry.objects.&lt;span style=&quot;color: #A6E22E;&quot;&gt;filter&lt;/span&gt;(pub_date__year=2005)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;regex，iregex，（正则表达式匹配）&lt;/span&gt;
Entry.objects.get(title__regex=r&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;^(An?|The) +&#39;&lt;/span&gt;)

&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;对于ManyToManyField以及ForeignKey可以使用__来搜索关联的model&lt;/span&gt;
Entry.objects.get(author__name__contain=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;jim&#39;&lt;/span&gt;)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;它会搜索Entry的外键author model中name包含jim的项&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
下面的完整的models代码示例，包括create, insert, update, delete
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;insert a record&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;p&lt;/span&gt; = Publisher(name=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Apress&#39;&lt;/span&gt;,
        address=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;2855 Telegraph Ave.&#39;&lt;/span&gt;,
        city=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Berkeley&#39;&lt;/span&gt;,
        state_province=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;CA&#39;&lt;/span&gt;,
        country=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;U.S.A.&#39;&lt;/span&gt;,
        website=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;http://www.apress.com/&#39;&lt;/span&gt;)
p.save()

&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;just update, do not create record&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;p.name&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Apress Publishing&#39;&lt;/span&gt;
p.save()
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;django1.5可以指定update_fields,比如一个更新点击数的代码&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;article.clicks&lt;/span&gt; = F(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;clicks&#39;&lt;/span&gt;) + 1 &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;使用F避免竞争条件&lt;/span&gt;
article.save(update_fields=[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;clicks&#39;&lt;/span&gt;,])

&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;只更新name字段，而不像save那样更新所有的字段，即便那些字段没有改变&lt;/span&gt;
Publisher.objects.&lt;span style=&quot;color: #A6E22E;&quot;&gt;filter&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;id&lt;/span&gt;=52).update(name=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Apress Publishing&#39;&lt;/span&gt;)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;访问数据，转换为select语句&lt;/span&gt;
Publisher.objects.&lt;span style=&quot;color: #A6E22E;&quot;&gt;all&lt;/span&gt;()
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;filter返回一个QuerySet结构， 该结构和list类似,在QuerySet结构上&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;可以调用order_by, delete, update等方法，所以可以构建下文的连锁查询&lt;/span&gt;
Publisher.objects.&lt;span style=&quot;color: #A6E22E;&quot;&gt;filter&lt;/span&gt;(country=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;U.S.A.&quot;&lt;/span&gt;, state_province=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;CA&quot;&lt;/span&gt;)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;要获得单个对像，应使用get方法,如果不存在会返回Publisher.DoesNotExist异常&lt;/span&gt;
Publisher.objects.get(country=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;U.S.A.&quot;&lt;/span&gt;, state_province=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;CA&quot;&lt;/span&gt;)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;select ... order by ...&lt;/span&gt;
Publisher.objects.order_by(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;name&quot;&lt;/span&gt;)
&lt;span style=&quot;color: #75715E;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;逆序&lt;/span&gt;
Publisher.objects.order_by(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;-name&quot;&lt;/span&gt;)
&lt;span style=&quot;color: #75715E;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;连锁查询，同时指定where与order by子句&lt;/span&gt;
Publisher.objects.&lt;span style=&quot;color: #A6E22E;&quot;&gt;filter&lt;/span&gt;(country=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;U.S.A.&quot;&lt;/span&gt;).order_by(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;-name&quot;&lt;/span&gt;)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;select ... order by ... limit ...&lt;/span&gt;
Publisher.objects.order_by(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;name&#39;&lt;/span&gt;)[0]
Publisher.objects.order_by(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;name&#39;&lt;/span&gt;)[0:2]

&lt;span style=&quot;color: #75715E;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;delete record&lt;/span&gt;
Publisher.objects.&lt;span style=&quot;color: #A6E22E;&quot;&gt;filter&lt;/span&gt;(country=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;USA&#39;&lt;/span&gt;).delete()
Publisher.objects.&lt;span style=&quot;color: #A6E22E;&quot;&gt;all&lt;/span&gt;().delete()

&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;外键，以及ManyToMany field&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;获取出版商的所有书籍&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;p&lt;/span&gt; = Publisher.objects.get(name=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Apress Publishing&#39;&lt;/span&gt;)

&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;默认模型(Book)的小写名加上set,返回QuerySet,如果你在定义外键或者&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;ManyToMany field时指定了related_name，那么这里就使用指定的&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;related_name&lt;/span&gt;
p.book_set.&lt;span style=&quot;color: #A6E22E;&quot;&gt;all&lt;/span&gt;()
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-3&quot;&gt;manager&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-3&quot;&gt;
&lt;p&gt;
每一个model都有至少有一个manager，默认的manager叫objects，也可以自定义多个manager,我们就是使用这些manager
与django model进行交互，如查询，插入，更新等。下面是一个自定义manager的例子
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; django.db &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; models
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; django.utils &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; timezone

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;PublishedManager&lt;/span&gt;(models.Manager):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;published&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, *args, **kwargs):
        &lt;span style=&quot;color: #FD971F;&quot;&gt;qs&lt;/span&gt; = &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.get_query_set().&lt;span style=&quot;color: #A6E22E;&quot;&gt;filter&lt;/span&gt;(*args, **kwargs)
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; qs.&lt;span style=&quot;color: #A6E22E;&quot;&gt;filter&lt;/span&gt;(pub_date__lte=timezone.now())


&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;FlavorReview&lt;/span&gt;(models.Model):
    &lt;span style=&quot;color: #FD971F;&quot;&gt;review&lt;/span&gt; = models.CharField(max_length=255)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;pub_date&lt;/span&gt; = models.DateTimeField()
    &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;add our custom model manager&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;objects&lt;/span&gt; = PublishedManager()
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这样默认的objects 管理器就被替换为PublishedManager，如果你想保持默认的objects，又要PubloishedManager，那么
你可以用如下代码：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;objects&lt;/span&gt; = models.Manager()
&lt;span style=&quot;color: #FD971F;&quot;&gt;publishmanager&lt;/span&gt; = PublishedManager()
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这样就有两个manager，记住objects的那一行必须放在所有的自定义的manager的前面
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-4&quot;&gt;related manager&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-4&quot;&gt;
&lt;p&gt;
在ManyToManyField, ForeignKey中返回的都是related manager,比如下面的代码:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Topping&lt;/span&gt;(models.Model):
    &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;...&lt;/span&gt;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;pass&lt;/span&gt;

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Pizza&lt;/span&gt;(models.Model):
    &lt;span style=&quot;color: #FD971F;&quot;&gt;toppings&lt;/span&gt; = models.ManyToManyField(Topping)



&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Reporter&lt;/span&gt;(models.Model):
    &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;...&lt;/span&gt;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;pass&lt;/span&gt;

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Article&lt;/span&gt;(models.Model):
    &lt;span style=&quot;color: #FD971F;&quot;&gt;reporter&lt;/span&gt; = models.ForeignKey(Reporter)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上例上Topping的pizza_set, Pizza的toppings, 以及Reporter的article_set都返回的是related manager, related
manager在默认的方法外,他还有以下方法:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;add: 可以使用对象,也可以直接使用对象的pk, 因为效率更高, 参见&lt;a href=&quot;http://stackoverflow.com/questions/6996176/how-to-create-an-object-for-a-django-model-with-a-many-to-many-field&quot;&gt;stackoverflow&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;remove: 如果要移除的对象不在relate manager中,不会有异常
&lt;/li&gt;
&lt;li&gt;create
&lt;/li&gt;
&lt;li&gt;clear
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-5&quot;&gt;杂七杂八&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-5&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;get_FOO_display() : 当model中有choices属性的field时,那么这个方法可以获得display name,这是&lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/models/instances/#django.db.models.Model.get_FOO_display&quot;&gt;文档&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;get_next_by_FOO(): 当model中DateField,DatetimeField时可以通过该方法根据时间顺序获得当前记录的下一条记录
&lt;/li&gt;
&lt;li&gt;get_previous_by_FOO() : 根据时间顺序获得当前记录的前一条记录
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-6&quot;&gt;几个特殊的field&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-6&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;FileField：有几个重要的属性
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;path: 该文件在文件系统中的绝对路径
&lt;/li&gt;
&lt;li&gt;name： 在upload_to的相对路径
&lt;/li&gt;
&lt;li&gt;size: 文件的大小，单位是bytes
&lt;/li&gt;
&lt;li&gt;url: 该文件的url
&lt;/li&gt;
&lt;li&gt;save方法： 当你要把一个已存在的文件与model的FileField关联起来的时候，非常有用，示例代码
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; django.core.files &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; File
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Open an existing file using Python&#39;s built-in open()&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;f&lt;/span&gt; = &lt;span style=&quot;color: #A6E22E;&quot;&gt;open&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;/tmp/hello.world&#39;&lt;/span&gt;)
&lt;span style=&quot;color: #FD971F;&quot;&gt;myfile&lt;/span&gt; = File(f)
my_model_instance.&lt;span style=&quot;color: #A6E22E;&quot;&gt;file&lt;/span&gt;.save(name=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;new_path&#39;&lt;/span&gt;, content=myfile)
my_model_instance.save()
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这是&lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.fields.files.FieldFile&quot;&gt;文档&lt;/a&gt; ，与form合用时，在bound form的时候需要传入request.POST, request.FILES
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ImageField： 和FileField类似
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;表单&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;&lt;colgroup&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;request.path&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;除域名以外的请求路径，以正斜杠开头&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&quot;&lt;i&gt;hello&lt;/i&gt;&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;request.get_host()&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;主机名（比如，通常所说的域名）&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&quot;127.0.0.1:8000&quot; or &quot;www.example.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;request.get_full_path()&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;请求路径，可能包含查询字符串&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&quot;&lt;i&gt;hello&lt;/i&gt;?print=true&quot;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;request.is_secure()&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果通过HTTPS访问，则此方法返回True，否则返回False True 或者 False&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;request.META&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个字典，包含很多客户端信息(key: HTTP_REFERER, HTTP_USER_AGENT)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;request.META.get(&#39;HTTP_USER_AGENT&#39;, &#39;unknown&#39;)&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;request.GET&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表单的get方法传递的数据(是一个类字典结构)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;request.GET[&#39;q&#39;]就是查询字符串&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;request.POST&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表单的post方法传递的数据（是一个类字典结构）&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt; &lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;
基本代码结构:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;f&lt;/span&gt; = MyForm(request.POST)
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; f.is_valid():
    &lt;span style=&quot;color: #FD971F;&quot;&gt;first_field&lt;/span&gt; = f.cleaned_data[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;first_field&#39;&lt;/span&gt;]
    &lt;span style=&quot;color: #FD971F;&quot;&gt;second_field&lt;/span&gt; = f.cleaned_data[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;second_field&#39;&lt;/span&gt;]
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; HttpResponse(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;/succesa&#39;&lt;/span&gt;)
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt;:
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; HttpResponse(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;template.html&quot;&lt;/span&gt;, {&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;form&#39;&lt;/span&gt;: f})
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
注意forms.Form的原型：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;BaseForm&lt;/span&gt;(Object):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__init__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, data=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;, files=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;, auto_id=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;id_%s&#39;&lt;/span&gt;, prefix=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;,
                 initial=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;, error_class=ErrorList, label_suffix=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;:&#39;&lt;/span&gt;,
                 empty_permitted=&lt;span style=&quot;color: #AE81FF;&quot;&gt;False&lt;/span&gt;):
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
有几个比较重要的参数：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;data: 传给form的数据，这样调用 MyForm(request.POST) 等价于 MyForm(data=request.POST)，只有指定该参数创建的
form对象才是绑定的
&lt;/li&gt;
&lt;li&gt;initial: 这个是初始化的数据，格式是{&#39;field1_name&#39;: val1, &#39;field2_name&#39;; val2, …},只有data为None时才有效，
也就是只对没有绑定的form有效， &lt;b&gt;注意每一个field也有个initial参数，这个参数只是指定该项的初始值&lt;/b&gt;
&lt;/li&gt;
&lt;li&gt;instance： ModelForm有效，这个是和form绑定的model对象，如果指定了，调用save()时会更新而不是创建新record
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-4-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-1&quot;&gt;表单的验证步骤&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-1&quot;&gt;
&lt;p&gt;
调用form.is_valid()会触发以下动作:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;调用form.full_clean()方法
&lt;/li&gt;
&lt;li&gt;form.full_clean()会触发以下动作
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;使用to_python将form提交的数据转换为python 对象
&lt;/li&gt;
&lt;li&gt;使用validator包括form上的自定义的validators来验证数据合法性
&lt;/li&gt;
&lt;li&gt;调用clean_&amp;lt;fieldname&amp;gt;方法(如果存在这种方法的情况下才调用)
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;form.full_clean()执行form.clean()方法
&lt;/li&gt;
&lt;li&gt;如果是ModelForm对象,那么会调用form._post_clean(),form._post_clean()会触发以下动作
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;将数据设置到一个model对象(不管form.is_valid()是否为真)
&lt;/li&gt;
&lt;li&gt;调用model的clean方法,注意当使用ORM save一个对象到数据库中时是不会调用model的clean方法的
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
最后需要明白的一点是：不管is_valid是否返回true，只要它调用完成，那么form对象中就有cleaned_data字典，所有验
证成功的field都是其中的元素，注意对于foreignKey，ManyToManyField而言，如果验证通过，那么对应的cleaned_data
中元素的value会变成相应的对象(注意POST中的数据实际只是id)，所以当is_valid返回False，需要重新显示表单时，你
可以在template中通过{{ form.cleaned_data.field_name}}来获得相应的field的值。
&lt;/p&gt;

&lt;p&gt;
form对象还有一个data字典属性，它的值实际就是POST字典，比如 f = MyForm(request.POST) ,在内部实际就是
self.data = data(也就是request.POST), data属性可以看做是裸数据，而cleaned_data是处理后的数据
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-4-1-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-4-1-1&quot;&gt;设置validator以及clean_&amp;lt;filedname&amp;gt;的一般方法&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-4-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;validate函数的调用保证数据的合法性，validate函数可以在model或者form中指定，下面是一段示例代码
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; django.core.exceptions &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; ValidationError
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;validate_delicious&lt;/span&gt;(value):
    &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;&quot;&quot; Raise a ValidationError if the value doesn&#39;t start&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;    with the word &#39;delicious&#39;&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;not&lt;/span&gt; value.lower().startswith(u&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;delicious&#39;&lt;/span&gt;):
        &lt;span style=&quot;color: #FD971F;&quot;&gt;msg&lt;/span&gt; = u&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Enter a value starting with &#39;Delicious&#39;&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;raise&lt;/span&gt; ValidationError(msg)


&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Flavor&lt;/span&gt;(models.Model):
    &lt;span style=&quot;color: #FD971F;&quot;&gt;title&lt;/span&gt; = models.CharField(max_length=255,
                             validators=[validate_delicious])
    &lt;span style=&quot;color: #FD971F;&quot;&gt;slug&lt;/span&gt; = models.SlugField()
    &lt;span style=&quot;color: #FD971F;&quot;&gt;scoops_remaining&lt;/span&gt; = models.IntegerField(default=0)

    &lt;span style=&quot;color: #66D9EF;&quot;&gt;@models.permalink&lt;/span&gt;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;get_absolute_url&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; (&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;flavor_detail&#39;&lt;/span&gt;, (), {&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;slug&quot;&lt;/span&gt;: &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.slug})

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;FlavorForm&lt;/span&gt;(forms.ModelForm):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__init__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, *args, **kwargs):
        &lt;span style=&quot;color: #A6E22E;&quot;&gt;super&lt;/span&gt;(FlavorForm, &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;).__init__(*args, **kwargs)
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.fields[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;title&#39;&lt;/span&gt;]&lt;span style=&quot;color: #FD971F;&quot;&gt;.validators&lt;/span&gt; = [validate_delicious]
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.fields[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;slug&#39;&lt;/span&gt;]&lt;span style=&quot;color: #FD971F;&quot;&gt;.validators&lt;/span&gt; = [validate_delicious]

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Meta&lt;/span&gt;:
        &lt;span style=&quot;color: #FD971F;&quot;&gt;model&lt;/span&gt; = Flavor
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;clean的调用保证去除无效的数据，并得到clean_data字典,clean主要是为了验证form的多个项，比如一个注册表单中
有password1与password2,那么就可以在clean_password1或者clean_password2中来验证两个密码是否一样，注意每一
个field的clean方法的名字是clean_&amp;lt;field_name&amp;gt;，并且该方法要返回该field在cleaned_data中的值, &lt;b&gt;一定要返回
合法的值&lt;/b&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;clean_flavor&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;):
    &lt;span style=&quot;color: #FD971F;&quot;&gt;flavor&lt;/span&gt; = &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.cleaned_data[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;flavor&#39;&lt;/span&gt;]
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; Flavor.objects.get(slug=flavor). scoops_remaining &amp;lt;= 0:
        &lt;span style=&quot;color: #FD971F;&quot;&gt;msg&lt;/span&gt; = u&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Sorry, we are out of that flavor&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;raise&lt;/span&gt; forms.ValidationError(msg)
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; flavor
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-2&quot;&gt;ModelForm&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-2&quot;&gt;
&lt;p&gt;
根据model来创建form，有几点注意事项
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;如果一个field在不包含在form中，但是model中没有提供默认值(没有指定default)而且也不允许为空(没有设置blank，
null)，那么你直接调用form.save()会返回错误，在这种情况下，你可以先调用form.save(commit=False)得到model
instance，然后指定缺失的field的值，然后在save
&lt;/li&gt;
&lt;li&gt;如果model中指定了blank=True，那么在form中对应的field就是required=False，也就是可以接受empty value
&lt;/li&gt;
&lt;li&gt;默认save会创建一条新纪录，所以如果你要更新记录，那么你必须在初始化是传入被更新的model instance，就像下
面这样：
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;a&lt;/span&gt; = Article.objects.get(pk=1)
&lt;span style=&quot;color: #FD971F;&quot;&gt;f&lt;/span&gt; = ArticleForm(request.POST, instance=a)
f.save()
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
那么就会更新a，而不是创建一条新记录
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;在template要得到某一个field的值,可以使用: {{ form.field_name.value|default_if_none:&quot;&quot; }},该方法对于那种
没有绑定的form也就是没有传入data,但是传入了instance的ModelForm非常有用, 因为这种情况下,form的data与
cleaned_data都是无效的
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;ContentType&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;p&gt;
ContentType也是一个model, 所以在数据库中它也有一张表, 只是这张表每一行存储的信息都是用来描述一个已安装的
model的, 举个例子,如果有一个名叫profiles的app, 这个app的models.py中一个名叫User的model, 为了描述这个model,
那么就有一个ContentType对象, 这个对象有三个属性: app_label=&#39;profiles&#39;, model=&#39;user&#39;, name=&#39;user&#39;(准确的说是
verbose_name), 而且这个对象还有许多method, 用来完成各种操作, 现在将ContentType的比较常用属性列在下面:
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;属性&lt;/b&gt;
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;app_label
&lt;/li&gt;
&lt;li&gt;model
&lt;/li&gt;
&lt;li&gt;name
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
&lt;b&gt;method&lt;/b&gt;
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;ContentType.get_object_for_this_type(**kwargs)
得到描述的model的实例对象
&lt;/li&gt;
&lt;li&gt;ContentType.model_class()
返回描述的model的class
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; django.contrib.contenttypes.models &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; ContentType

&lt;span style=&quot;color: #FD971F;&quot;&gt;user_type&lt;/span&gt; = ContentType.objects.get(app_label=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;profiles&#39;&lt;/span&gt;, model=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;user&#39;&lt;/span&gt;)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;user_type is ContentType Instance&lt;/span&gt;
user_type.model_class()

&lt;span style=&quot;color: #FD971F;&quot;&gt;u&lt;/span&gt; = user_type.get_object_for_this_type(pk=1)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;u is profiles.models.User Instance whose pk is 1&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-5-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-1&quot;&gt;Generic relations&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-1&quot;&gt;
&lt;p&gt;
它的最大的作用, 它可以创建一个外键指向多个model,也就是多张表, 而如果用 models.ForeignKey只能关联一个model,
具体的用法还是直接看&lt;a href=&quot;https://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#id1&quot;&gt;文档&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;signal&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;p&gt;
signal是同步阻塞的，要异步则要与celery配合，由于signal的receiver代码与发送signal的代码分开在两处，所以代码
可读性不好，因此尽量不要滥用signal
&lt;/p&gt;

&lt;p&gt;
不要用signal的场合：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;signal如果只与一个model相关，那么尽量将逻辑放入model的method中处理，特别是model的save method
&lt;/li&gt;
&lt;li&gt;signal只与一个view相关，那么尽量将逻辑放入view中处理
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-7&quot;&gt;generic views&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-7&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-7-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-1&quot;&gt;几个有用Mixin&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-7-1-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-7-1-1&quot;&gt;TemplateResponseMixin&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-7-1-1&quot;&gt;
&lt;p&gt;
用于render template
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;render_to_response(self, context, **response_kwargs):这个函数用于显示页面
&lt;/li&gt;
&lt;li&gt;get_template_names: 这是一个占位符，子类如果不指定template_name属性那么就需要实现这个函数
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-1-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-7-1-2&quot;&gt;SingleObjectMixin&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-7-1-2&quot;&gt;
&lt;p&gt;
提供了一些用来获得单个model对象的方法
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;get_object: 默认会根据url提供的pk或者slug来获得单个对象
&lt;/li&gt;
&lt;li&gt;get_context_object_name: 返回在template中使用的单个对象的名字，默认是类名的小写
&lt;/li&gt;
&lt;li&gt;get_context_data: 会将一个model实例放入context中
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-1-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-7-1-3&quot;&gt;SingleObjectTemplateResponseMixin(继承自TemplateResponseMixin)&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-7-1-3&quot;&gt;
&lt;p&gt;
提供获得template name的函数，DetailView就是继承的这个Mixin
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;属性
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;template_name_field
&lt;/li&gt;
&lt;li&gt;template_name_suffix :
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
get_template_names() : 会返回一个包含template名字的列表，其中包括指定的template_name,以及默认的名字，默认
的名字格式如下：app_label/object_name + template_name_suffix + &#39;.html&#39;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-8&quot;&gt;第三方app的使用&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-8&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-8-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-8-1&quot;&gt;south&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-8-1&quot;&gt;
&lt;p&gt;
south基本已经是django开发必不可少的app了，它可以自动同步model的改变，这是&lt;a href=&quot;http://south.readthedocs.org/en/latest/index.html&quot;&gt;文档&lt;/a&gt;, 我这里说一下基本用法:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;installation
使用pip安装south，然后将south添加到settings的installed_apps的最后
&lt;/li&gt;
&lt;li&gt;基本使用
schemamigration会生成本次修改的py文件（在your_app/migrations/下）,而migrate则会应用这次修改，也就是会对
数据库做出修改
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;生成表的初始版本
&lt;pre class=&quot;example&quot;&gt;
./manage.py schemamigration your_app --initial
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;生成表结构
数据库存在表结构，也就是对该app已经运行了syncdb,以下二者都可以
&lt;pre class=&quot;example&quot;&gt;
./manage.py convert_to_south your_app
# 或
./manage.py migrate your_app --fake
&lt;/pre&gt;

&lt;p&gt;
数据库不存在表结构，也就是对该app没有运行syncdb
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
./manage.py migrate your_app
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;修改表结构后
&lt;pre class=&quot;example&quot;&gt;
./manage.py schemamigration your_app --auto
./manage.py migrate your_app
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-8-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-8-2&quot;&gt;mptt&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-8-2&quot;&gt;
&lt;p&gt;
可以用来存储结构化的数据，在实现评论系统时比较有用
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-8-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-8-3&quot;&gt;django-braces&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-8-3&quot;&gt;
&lt;p&gt;
有一系列的Minix，在使用CBV时非常方便，而且还可以实现简单的REST api，它自带了几个json response
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-9&quot;&gt;我遇到的令人费解的error&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-9&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;url tag: &quot;&#39;str&#39; object has no attribute &#39;regex&#39;&quot;
在模板中使用url标签遇到上述问题,原因是定义URLConf时忘记了patterns
代码：
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;wrong&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;urlpatterns&lt;/span&gt;= (&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;&#39;&lt;/span&gt;,
              ....)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;correct&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;urlpatterns&lt;/span&gt;= patterns(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;&#39;&lt;/span&gt;,
                      ...)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>emacs.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/emacs.html"/>
    <title>Emacs/elisp笔记</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;Emacs/elisp笔记&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;emacs/elisp笔记&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;emacs大杂烩&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;emacs各种设置与注意事项&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-1-1&quot;&gt;emacs在英文系统的输入法问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-1-2&quot;&gt;交换Control\_L与Capslocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;grep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;isearch的相关技巧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-4&quot;&gt;ido-mode的快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-5&quot;&gt;dired的快捷键&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-5-1&quot;&gt;wdired(批量改名)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-6&quot;&gt;ibuffer的快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-7&quot;&gt;cua-mode以及矩形操作的快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-8&quot;&gt;mutiple cursors多光标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-9&quot;&gt;ace-jump-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-10&quot;&gt;expand region&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-11&quot;&gt;paredit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-12&quot;&gt;ido(Interactively Do Things)&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-12-1&quot;&gt;smex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-13&quot;&gt;helm(a good alternative to ido)&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-13-1&quot;&gt;打开文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-13-2&quot;&gt;ediff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-13-3&quot;&gt;grep(increment grep)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-13-4&quot;&gt;locate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-14&quot;&gt;w3m&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-15&quot;&gt;ansi-term&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-16&quot;&gt;我设置的快捷键以及我常用的快捷键，函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-17&quot;&gt;emacs导出pdf的中文支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-18&quot;&gt;emacs的奇淫技巧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-19&quot;&gt;我写的一些命令&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-19-1&quot;&gt;短网址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-20&quot;&gt;elpa&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-20-1&quot;&gt;proxy(goagent代理)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;org-mode&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-2-1&quot;&gt;org-mode的快捷键与命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2&quot;&gt;org-mode的一些格式化语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-3&quot;&gt;表格&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-2-3-1&quot;&gt;基本使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-3-2&quot;&gt;技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-4&quot;&gt;org-mode TODO list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-5&quot;&gt;org-mode 中的latex代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-6&quot;&gt;org-mode中的latex代码的预览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-7&quot;&gt;org-mode中latex导出html时的设置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-8&quot;&gt;Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-9&quot;&gt;dot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;elisp学习笔记&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-3-1&quot;&gt;elisp基本语法&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-3-1-1&quot;&gt;help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-1-2&quot;&gt;control flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-1-3&quot;&gt;let&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-1-4&quot;&gt;function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-1-5&quot;&gt;lists&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-3-1-5-1&quot;&gt;Associate List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-1-5-2&quot;&gt;property list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2&quot;&gt;常用的函数&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-3-2-1&quot;&gt;lisp的基本语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2-2&quot;&gt;光标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2-3&quot;&gt;文本编辑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2-4&quot;&gt;字符串操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2-5&quot;&gt;buffer相关：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2-6&quot;&gt;file相关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2-7&quot;&gt;other useful function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2-8&quot;&gt;&lt;b&gt;useful variable&lt;/b&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2-9&quot;&gt;useful code snippet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-3&quot;&gt;interactive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-4&quot;&gt;autoload&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;一些我遇到的emacs让人困惑的问题&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-4-1&quot;&gt;overwrite mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4-2&quot;&gt;whitespace-mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;emacs/elisp笔记&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
这是我的emacs配置：&lt;a href=&quot;https://github.com/yuyang0/emacs.d&quot;&gt;https://github.com/yuyang0/emacs.d&lt;/a&gt; ,我在&lt;a href=&quot;https://github.com/purcell/emacs.d&quot;&gt;purcell&lt;/a&gt; 的配置的基础
上添加了一些我自己的设置.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;emacs大杂烩&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;emacs各种设置与注意事项&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1-1-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-1-1&quot;&gt;emacs在英文系统的输入法问题&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-1-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-bash&quot;&gt;mv /usr/bin/emacs /usr/bin/emacs.raw
gedit /usr/bin/emacs

#!/bin/sh
export LC_CTYPE=zh_CN.utf-8
/usr/bin/emacs.raw &quot;$@&quot;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-1-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-1-2&quot;&gt;交换Control\_L与Capslocks&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-1-2&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
通过 xev | grep &#39;keycode&#39;得到键码，然后输入以下文件:&lt;br /&gt;
remove Lock = Caps\_Lock&lt;br /&gt;
remove Control = Control\_R&lt;br /&gt;
keycode  66 = Control\_R NoSymbol Control\_R&lt;br /&gt;
keycode  105 = Caps\_Lock NoSymbol Caps\_Lock&lt;br /&gt;
add Lock = Caps\_Lock&lt;br /&gt;
add Control = Control\_R&lt;br /&gt;
保存为.xmodmap，然后运行xmodmap .xmodmap&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;grep   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;grep&quot;&gt;grep&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
如果是想搜索当前buffer，那么你可以是occur，如果你想搜索多个文件，那么可以使用grep，推荐两个命令
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;lgrep：只会搜索当前目录(不搜索子目录)
&lt;/li&gt;
&lt;li&gt;rgrep：它会递归搜索子目录
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
wgrep包可以是emacs在grep buffer中直接修改文件内容
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;C-c C-p: 在grep buffer中只要按该快捷键，就可以在grep buffer直接编辑文件
&lt;/li&gt;
&lt;li&gt;C-c C-k: 放弃所有修改
&lt;/li&gt;
&lt;li&gt;M-x wgrep-save-all-buffers
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;isearch的相关技巧   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;isearch&quot;&gt;isearch&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;p&gt;
C-x C-x:可以在isearch之后回到原来的位置
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-4&quot;&gt;ido-mode的快捷键   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;ido&quot;&gt;ido&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-4&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
C-s C-r：在匹配的文件左右切换&lt;br /&gt;
C-p    ：会启动部分匹配，而前面是严格的前缀匹配&lt;br /&gt;
C-t    ：正则表达式匹配 eg:*.py$匹配所有python源文件&lt;br /&gt;
M-up M-down：切换以前访问的目录&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-5&quot;&gt;dired的快捷键   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;dired&quot;&gt;dired&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-5&quot;&gt;
&lt;p&gt;
dired的标记方式有很多种，如标记删除（D标记，用于删除）， 如标记为*（m所做的
标记就是*标记），默认如果有被*标记的文件，那么所有的文件操作就是在这些标记的
文件上进行的，否则就在当前行代表的文件上进行操作，当然还可以有其他类型的标记
如t标记，k标记，只是这些标记没有快捷键，一般D标记和*标记用的多，其他标记一般
用于临时的转换一下。*c命令可以修改标记，eg：*c D t将D标记修改为t标记，*c t
*将t标记修改为*标记
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&quot;#&quot;: 标记所有自动保存的文件（D标记）
&lt;/li&gt;
&lt;li&gt;～：标记所有的备份文件（D标记）
&lt;/li&gt;
&lt;li&gt;&amp;amp;： 标记所有的垃圾文件(D标记)
&lt;/li&gt;
&lt;li&gt;d: mark D标记
&lt;/li&gt;
&lt;li&gt;x：执行删除
&lt;/li&gt;

&lt;li&gt;m: mark *标记
&lt;/li&gt;
&lt;li&gt;t: 将所有*标记的文件变为未标记，所有未标记的变为*标记
&lt;/li&gt;
&lt;li&gt;**：标记所有可执行文件
&lt;/li&gt;
&lt;li&gt;*@：标记所有符号链接
&lt;/li&gt;
&lt;li&gt;*s: 标记所有文件
&lt;/li&gt;
&lt;li&gt;*/：标记所有目录（不包括. ..)
&lt;/li&gt;
&lt;li&gt;%m or *%: 正则匹配文件名
&lt;/li&gt;
&lt;li&gt;%g：正则匹配所有文件的内容
&lt;/li&gt;
&lt;li&gt;u: unmark
&lt;/li&gt;
&lt;li&gt;常用的文件操作：
&lt;/li&gt;
&lt;li&gt;U: unmark all
&lt;/li&gt;
&lt;li&gt;D: 立即删除
&lt;/li&gt;
&lt;li&gt;R：rename
&lt;/li&gt;
&lt;li&gt;C：copy
&lt;/li&gt;
&lt;li&gt;A: 正则搜索
&lt;/li&gt;
&lt;li&gt;Q：正则替换
&lt;/li&gt;
&lt;li&gt;Z：解压文件
&lt;/li&gt;
&lt;li&gt;L：把lisp文件加载进emacs
&lt;/li&gt;
&lt;li&gt;B：byte compile
&lt;/li&gt;
&lt;li&gt;O：chown
&lt;/li&gt;
&lt;li&gt;G：chgrp
&lt;/li&gt;
&lt;li&gt;M：chmod
&lt;/li&gt;
&lt;li&gt;+：create a directory
&lt;/li&gt;
&lt;li&gt;!: 可以显示打开文件的命令（对pdf等文件不要RET）
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
&lt;b&gt;我设置的快捷键：&lt;/b&gt;
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;/ m n: 标记所有文件名匹配正则表达式的文件（mark name）
&lt;/li&gt;
&lt;li&gt;/ m e: 标记所有可执行文件                (mark executable files)
&lt;/li&gt;
&lt;li&gt;/ m d: 标记所有的目录                    (mark directory)
&lt;/li&gt;
&lt;li&gt;/ m c：标记所有内容匹配正则表达式的文件   (mark content)
&lt;/li&gt;
&lt;li&gt;/ m l: 标记所有符号链接                  (mark symlink)
&lt;/li&gt;
&lt;li&gt;/ m u: unmark all marks
&lt;/li&gt;
&lt;li&gt;/ /： unmark all marks
&lt;/li&gt;
&lt;li&gt;/ u: 将所有标记的文件的文件重命名为大写
&lt;/li&gt;
&lt;li&gt;/ l：将所有标记的文件的文件重命名为小写
&lt;/li&gt;
&lt;li&gt;/ c：change marks，和*c等价
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-5-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-5-1&quot;&gt;wdired(批量改名)&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-5-1&quot;&gt;
&lt;p&gt;
C-x C-q : (wdired-change-to-wdired-mode) 进入wdired mode, 进入后就可以像普
通的buffer一样编辑文件名(用multiple cursor来编辑多个文件名), 完成后C-c C-c
或者C-x C-s
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-6&quot;&gt;ibuffer的快捷键   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;ibuffer&quot;&gt;ibuffer&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-6&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
p：prev&lt;br /&gt;
n: next&lt;br /&gt;
m：mark&lt;br /&gt;
u: unmark&lt;br /&gt;
t: mark all&lt;br /&gt;
**: unmark all&lt;br /&gt;
x: kill the marked buffer or current buffer if no buffer marked&lt;br /&gt;
S: save the marked buffer or current buffer if no buffer marked&lt;br /&gt;
D: same as &#39;x&#39;&lt;br /&gt;
O: 在所有mark的buffer中正则搜索&lt;br /&gt;
U: 在所有mark的buffer中替换&lt;br /&gt;
Q: 在所有mark的buffer中query，replace&lt;br /&gt;
/m: 按主模式过滤&lt;br /&gt;&lt;i&gt;n: 按名字过滤，可以只输入一部分&lt;br /&gt;
/&lt;/i&gt;: 撤销过滤，全部显示&lt;br /&gt;
/p: 多重过滤时撤销上一层过滤&lt;br /&gt;
/f: 过滤filename，与/n类似&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-7&quot;&gt;cua-mode以及矩形操作的快捷键   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;cua&quot;&gt;cua&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-7&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
enable: M-x cua-mode&lt;br /&gt;
C-RET: 激活矩形操作，然后就可以常规移动光标来进行列编辑&lt;br /&gt;
C-v  : past rectangle&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-8&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-8&quot;&gt;mutiple cursors多光标   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;multiple&quot;&gt;multiple&lt;/span&gt; &lt;span class=&quot;cursor&quot;&gt;cursor&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-8&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;C-&amp;lt;: mc/mark-previous-like-this
&lt;/li&gt;
&lt;li&gt;C-&amp;gt;: mc/mark-next-like-this
&lt;/li&gt;
&lt;li&gt;C-c &amp;lt;: mc/mark-all-like-this (上面三项功能以word为单位，必须先mark-word)
&lt;/li&gt;

&lt;li&gt;C-c c a:在所有行的开头加入光标
&lt;/li&gt;
&lt;li&gt;C-c c e:在所有行的结尾加入光标
&lt;/li&gt;
&lt;li&gt;C-c c c:在所有的行加入一个光标(上面的三项功能以行为单位，必须先mark数行)
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
在multiple cursors中isearch失效的,为了实现C-s, C-r增量搜索,有以下两种方法:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;defvar&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;jc/mc-search--last-term&lt;/span&gt; nil)

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;jc/mc-search&lt;/span&gt; (search-command)
  &lt;span style=&quot;color: #75715E;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Read new search term when not repeated command or applying to fake cursors&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;when&lt;/span&gt; (and (not mc--executing-command-for-fake-cursor)
             (not (eq last-command &#39;jc/mc-search-forward))
             (not (eq last-command &#39;jc/mc-search-backward)))
    (setq jc/mc-search--last-term (read-from-minibuffer &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Search(regex): &quot;&lt;/span&gt;)))
  (funcall search-command jc/mc-search--last-term))

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;jc/mc-search-forward&lt;/span&gt; ()
  &lt;span style=&quot;color: #75715E;&quot;&gt;&quot;Simplified version of forward search that supports multiple cursors&quot;&lt;/span&gt;
  (interactive)
  (jc/mc-search &#39;search-forward-regexp))

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;jc/mc-search-backward&lt;/span&gt; ()
  &lt;span style=&quot;color: #75715E;&quot;&gt;&quot;Simplified version of backward search that supports multiple cursors&quot;&lt;/span&gt;
  (interactive)
  (jc/mc-search &#39;search-backward-regexp))

(add-hook &#39;multiple-cursors-mode-enabled-hook
          (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt;()
            (local-set-key (kbd &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;C-s&quot;&lt;/span&gt;) &#39;jc/mc-search-forward)
            (local-set-key (kbd &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;C-r&quot;&lt;/span&gt;) &#39;jc/mc-search-backward)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上述代码放入配置中,就可以开启增量搜索, 还有一种方法是使用phi-search
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-9&quot;&gt;ace-jump-mode   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;ace&quot;&gt;ace&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-9&quot;&gt;
&lt;p&gt;
类似于火狐的vim插件，输入一个head char，就会在所有匹配的地方放入一个字母
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;C-; ：ace-jump-char-mode
&lt;/li&gt;
&lt;li&gt;C-: : ace-jump-word-mode
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-10&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-10&quot;&gt;expand region   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;expand&quot;&gt;expand&lt;/span&gt; &lt;span class=&quot;region&quot;&gt;region&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-10&quot;&gt;
&lt;p&gt;
这个包可以根据程序的语法结构来选定区域
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;C-= : 不断的按该快捷键,会使选定的区域不断的扩展,而且只扩展到语法层面的父
结构中,
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-11&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-11&quot;&gt;paredit   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;paredit&quot;&gt;paredit&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-11&quot;&gt;
&lt;p&gt;
该模式下你不能直接编辑括号,而只能通过命令来调整程序结构,主要用于lisp编程
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;M-r: 这个命令可以将紧跟着光标后的sexp( &lt;b&gt;不是当前的sexp, 所以建议将光标放在
要操作sexp的左括号的前面&lt;/b&gt;)在树中的位置向上提一层,比如对 &lt;code&gt;let&lt;/code&gt; 中的sexp应用
该命令,那么就可以直接删除 &lt;code&gt;(let ([] ...))&lt;/code&gt; 因此该sexp在语法树中的位置就上
升了一层,默认该命令会删除该sexp平级的兄弟sexp. 可以通过C-u来指定要将跟着的
几个sexp提一层,默认是一个
&lt;/li&gt;
&lt;li&gt;M-( : 会用新建() 将跟着光标的sexp包起来
&lt;/li&gt;
&lt;li&gt;C-) C-&amp;lt;right&amp;gt; : 会将光标所在的当前表达式的紧挨着的兄弟表达式吞进来
&lt;/li&gt;
&lt;li&gt;C-} C-&amp;lt;left&amp;gt; : 将当前sexp包含的最后一个sexp移出去, 可以看作是C-)的逆命令
&lt;/li&gt;
&lt;li&gt;M-J : 将两个sexp合并成一个sexp, 比如 &lt;code&gt;(a b) (c d)&lt;/code&gt; 变成 &lt;code&gt;(a b c d)&lt;/code&gt; 注意
光标要放在两个sexp之间,上例中要放在 &lt;code&gt;(a b)&lt;/code&gt; 与 &lt;code&gt;(c d)&lt;/code&gt; 之间
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-12&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-12&quot;&gt;ido(Interactively Do Things)   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;ido&quot;&gt;ido&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-12&quot;&gt;
&lt;p&gt;
使用 &lt;code&gt;C-x b&lt;/code&gt; 来切换 &lt;code&gt;buffer&lt;/code&gt;,或者使用 &lt;code&gt;C-x C-f&lt;/code&gt; 来打开文件时,会自动在
&lt;code&gt;minibuffer&lt;/code&gt; 展示可能的补全项,下面是几个快捷键:
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;C-s:后退
&lt;/li&gt;
&lt;li&gt;C-r: 前进
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
单打开文件时(C-x C-f)时,有以下几个特殊的快捷键
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;C-f: 进入emacs内置的find-file
&lt;/li&gt;
&lt;li&gt;C-d: 会使用 &lt;code&gt;dired&lt;/code&gt; 打开当前目录
&lt;/li&gt;
&lt;li&gt;C-j: 创建新文件(因为当前输入的字符有匹配项时,默认是打开匹配项)
&lt;/li&gt;
&lt;li&gt;//: 进入根目录
&lt;/li&gt;
&lt;li&gt;~/: 当前用户的家目录
&lt;/li&gt;
&lt;li&gt;M-p: history中的前一条目录
&lt;/li&gt;
&lt;li&gt;M-n: history中的后一条目录
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-12-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-12-1&quot;&gt;smex   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;smex&quot;&gt;smex&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-12-1&quot;&gt;
&lt;p&gt;
构建于 &lt;code&gt;ido&lt;/code&gt; 之上, 在你使用 M-x 运行命令时会提供自动补全
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-13&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-13&quot;&gt;helm(a good alternative to ido)   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;helm&quot;&gt;helm&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-13&quot;&gt;
&lt;p&gt;
一个比较好的可以替换ido,smex的包,功能非常强大, 基本上emacs中出现选择的地方,
他都可以用,比如打开文件,切换buffer,kill buffer, M-x等等,下面来说说它的的几
个重点功能
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-13-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-13-1&quot;&gt;打开文件&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-13-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;TAB :打开Action buffer, 对每一个文件可以有许多动作, 比如copy, 比如用外部
程序打开,那么这些操作都在这个action buffer中
&lt;/li&gt;
&lt;li&gt;C-z: 扩展当前的候选项, 比如你的当前候选项是一个目录, 那么C-z就会进入该目
录,不要按 &lt;code&gt;Enter&lt;/code&gt;, 因为那会以 &lt;code&gt;dired&lt;/code&gt; 打开这个目录
&lt;/li&gt;
&lt;li&gt;M-&amp;lt;space&amp;gt; : mark 当前的文件
&lt;/li&gt;
&lt;li&gt;C-&amp;lt;backspace&amp;gt;: 会禁止自动补全,这在创建新文件与新目录时特别有用(因为如果
新的文件名与现在存在的文件名很相似的话,那么helm会自动补全为已存在的文件
或目录,因此你也就无法创建新目录)
&lt;/li&gt;
&lt;li&gt;新建目录: 在 &lt;code&gt;minibuffer&lt;/code&gt; 中正常输入,只是最后要以 / 结尾, helm会提示创建
新目录
&lt;/li&gt;
&lt;li&gt;复制文件: 先mark文件,然后TAB 选择copy file, 选择目的地就好
&lt;/li&gt;
&lt;li&gt;移动文件: 和复制文件类似
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-13-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-13-2&quot;&gt;ediff   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;ediff&quot;&gt;ediff&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-13-2&quot;&gt;
&lt;p&gt;
第一个文件TAB上选择ediff action,自动弹出第二个helm-find-files选择第二个文
件, &lt;b&gt;强力推荐&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-13-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-13-3&quot;&gt;grep(increment grep)   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;grep&quot;&gt;grep&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-13-3&quot;&gt;
&lt;p&gt;
&lt;b&gt;helm-do-grep&lt;/b&gt; : helm中执行grep的命令,你也可以使用 helm-find-files然后TAB
 选择grep, 如果使用 C-u M-x helm-do-grep, 那么就会递归的在目录中搜索
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-13-4&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-13-4&quot;&gt;locate   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;locate&quot;&gt;locate&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-13-4&quot;&gt;
&lt;p&gt;
M-x helm-locate: 使用操作系统的locate所产生的数据库文件来搜索文件
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-14&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-14&quot;&gt;w3m   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;w3m&quot;&gt;w3m&lt;/span&gt; &lt;span class=&quot;w3c&quot;&gt;w3c&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-14&quot;&gt;
&lt;p&gt;
w3m 是一个文本浏览器，它不支持CSS与js，非常适合浏览文本很多的页面，以及避免
在emacs与firefox切换带来的烦恼。。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;links&lt;/b&gt;
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;g: Prompt for a url in minibuffer (w3m-browse-url)
&lt;/li&gt;
&lt;li&gt;G: same as &lt;b&gt;g&lt;/b&gt; excepte it open a new session(a new tab)
&lt;/li&gt;
&lt;li&gt;R: reload the page
&lt;/li&gt;
&lt;li&gt;S: search engion
&lt;/li&gt;
&lt;li&gt;H: goto home page
&lt;/li&gt;
&lt;li&gt;u: display the under the point in the echo area
&lt;/li&gt;
&lt;li&gt;RET: Display the page pointed by the link under point (w3m-view-this-url)
&lt;/li&gt;
&lt;li&gt;[: move point to previous form
&lt;/li&gt;
&lt;li&gt;]: move point to next form
&lt;/li&gt;
&lt;li&gt;TAB: move point to next link
&lt;/li&gt;
&lt;li&gt;M-TAB, S-TAB: move point to previous link
&lt;/li&gt;
&lt;li&gt;d: download thee url under the point
&lt;/li&gt;
&lt;li&gt;M-d: Download the url
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
&lt;b&gt;scroll&lt;/b&gt;
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;SPC: scroll downwards
&lt;/li&gt;
&lt;li&gt;&amp;gt;: scroll to the right
&lt;/li&gt;
&lt;li&gt;&amp;lt;: scroll to the left
&lt;/li&gt;
&lt;li&gt;DEL: scroll upwards
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
&lt;b&gt;bookmarks&lt;/b&gt;
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;v: show all bookmarks
&lt;/li&gt;
&lt;li&gt;a: add current url to bookmarks
&lt;/li&gt;
&lt;li&gt;M-a: Add the url under point to the bookmark.
&lt;/li&gt;
&lt;li&gt;C-k: kill a bookmark
&lt;/li&gt;
&lt;li&gt;E: edit bookmark
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
&lt;b&gt;move in page&lt;/b&gt;
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;hjkl: like vim
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
&lt;b&gt;switch tabs&lt;/b&gt;
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;C-c C-n: next tab
&lt;/li&gt;
&lt;li&gt;C-c C-p: previous tab
&lt;/li&gt;
&lt;li&gt;C-c C-t: new tab
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
&lt;b&gt;images&lt;/b&gt;
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;I: Display the image under point in the external viewer.
&lt;/li&gt;
&lt;li&gt;M-i: Save the image under point to a file.
&lt;/li&gt;
&lt;li&gt;t: Toggle the visibility of an image under point
&lt;/li&gt;
&lt;li&gt;T: Toggle the visibility of all images
&lt;/li&gt;
&lt;li&gt;M-T: turn off to display all images
&lt;/li&gt;
&lt;li&gt;M-[: zoom in an image on the point
&lt;/li&gt;
&lt;li&gt;M-]: zoom out an image on the point
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-15&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-15&quot;&gt;ansi-term   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;shell&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;term&quot;&gt;term&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-15&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;C-c C-j: 进入line mode， 可以复制
&lt;/li&gt;
&lt;li&gt;C-c C-k: 回到character mod
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-16&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-16&quot;&gt;我设置的快捷键以及我常用的快捷键，函数   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;shortcut&quot;&gt;shortcut&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-16&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
M-x browse-url: 通过浏览器打开当前url&lt;br /&gt;
C-g C-/: redo&lt;br /&gt;
C-x C-v: find-alternate-file(fresh buffer)&lt;br /&gt;
C-x C-m: 替代M-x,按M很别扭&lt;br /&gt;
M-c : capticalize-word&lt;br /&gt;
M-u : upcase-word&lt;br /&gt;
C-x C-u : upcase-region&lt;br /&gt;&lt;br /&gt;
M-l : downcase-word&lt;br /&gt;
C-x C-l: downcase-region&lt;br /&gt;&lt;br /&gt;
C-c p: 复制粘贴一行&lt;br /&gt;
M-up: Shift lines up&lt;br /&gt;
M-down: Shift lines down&lt;br /&gt;
M-x occur: 创建一个新的buffer，然后将当前buffer，所有匹配regex的内容显示其中,进入该buffer，enter就可以跳转&lt;br /&gt;
M-x imenu：可以根据类型跳转（变量，函数,include等等）&lt;br /&gt;
C-k: kill the current line&lt;br /&gt;
C-o: new line and indent,like the &#39;o&#39; in vim&lt;br /&gt;&lt;br /&gt;
M-;: comment or uncomment the region&lt;br /&gt;
M-j: 这个在多行注释时,可以换行,换行时会在行首自动添加comment-prefix字符(C语言是*), 如果使用C-j或者RET就不会添加该字符&lt;br /&gt;&lt;br /&gt;
C-/: undo (same as C-x u and C-\_)&lt;br /&gt;
C-c d: translate the word using sdcv&lt;br /&gt;
C-c f: 迭代的搜索字符，eg：C-c f g会移到第一个g，在按g移到&lt;br /&gt;
       第二个g&lt;br /&gt;
%  : jump to the matched parenthesis&lt;br /&gt;
C-c -: fold the code&lt;br /&gt;
C-c =: unfold the code&lt;br /&gt;
C-M-f: 表达式的首部&lt;br /&gt;
C-M-b:&lt;br /&gt;
C-M-a: 函数的首部&lt;br /&gt;
C-M-e：&lt;br /&gt;
C-x backspace: 删除到行首&lt;br /&gt;
C-M-h: 标记一个函数&lt;br /&gt;
M-u: 一个字改为大写&lt;br /&gt;
M-l：一个字改为小写&lt;br /&gt;
C-x C-u：region to uppercase&lt;br /&gt;
C-x C-l：区域小写&lt;br /&gt;
C-t：将光标前后的字符交换&lt;br /&gt;
C-x C-t: 光标所在行与上一行交换&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-17&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-17&quot;&gt;emacs导出pdf的中文支持   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;pdf&quot;&gt;pdf&lt;/span&gt; &lt;span class=&quot;chinese&quot;&gt;chinese&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-17&quot;&gt;
&lt;p&gt;
org-mode默认的导出系统对中文支持不好,我参考这篇&lt;a href=&quot;http://yzprofile.me/2013/01/14/emacs-org-mode-xelatex.html&quot;&gt;文章&lt;/a&gt;, 将导出中文pdf的方法总结如下:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;安装textlive,如果是ubuntu,运行以下命令:
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;sudo apt-get install texlive texlive-xetex textlive-latex-extra
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
textlive-latex-extra一定要装,不装会有File `wrapfig.sty&#39; not found.的错误
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;在emacs配置文件中添加
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;org-mode &amp;lt; 8.0&lt;/span&gt;
(setq org-latex-to-pdf-process &#39;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;xelatex -interaction nonstopmode %f&quot;&lt;/span&gt;
                                 &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;xelatex -interaction nonstopmode %f&quot;&lt;/span&gt;))
&lt;span style=&quot;color: #75715E;&quot;&gt;;;  &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;org-mode 8.0&lt;/span&gt;
(setq org-latex-pdf-process &#39;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;xelatex -interaction nonstopmode %f&quot;&lt;/span&gt;
                              &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;xelatex -interaction nonstopmode %f&quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;在org文档的开头部分添加:
&lt;pre class=&quot;example&quot;&gt;
#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setCJKmainfont{SimSun}
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-18&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-18&quot;&gt;emacs的奇淫技巧   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;face&quot;&gt;face&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-18&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;M-x flush-lines RET ^$ RET :删除所有的空行（正则匹配）
&lt;/li&gt;
&lt;li&gt;M-x list-faces-display: 显示faces，在很多需要颜色，字体样式的命令中需要face参数
&lt;/li&gt;
&lt;li&gt;绑定快捷键时用C-h k查询得到的内容可以直接放在kbd后
&lt;/li&gt;
&lt;li&gt;indent-region可以格式化所有的代码
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-19&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-19&quot;&gt;我写的一些命令&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-19&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1-19-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-19-1&quot;&gt;短网址   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;dwz&quot;&gt;dwz&lt;/span&gt; &lt;span class=&quot;tinyurl&quot;&gt;tinyurl&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-19-1&quot;&gt;
&lt;p&gt;
使用百度的dwz.cn(之所以不用t.cn, 是因为它的api要求app key,比较麻烦)来缩短网
址, 会自动将得到的短网址插入当前buffer, 依赖request, emacs24可以通过
M-x package-install request安装
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;require&lt;/span&gt; &#39;&lt;span style=&quot;color: #AE81FF;&quot;&gt;request&lt;/span&gt;)
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;require&lt;/span&gt; &#39;&lt;span style=&quot;color: #AE81FF;&quot;&gt;json&lt;/span&gt;)
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;dwz-url-shorten&lt;/span&gt; (long-url)
  &lt;span style=&quot;color: #75715E;&quot;&gt;&quot;shorten url with dwz.cn&quot;&lt;/span&gt;
  (interactive (list
                (read-string (format &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;long url (%s): &quot;&lt;/span&gt; (thing-at-point &#39;url))
                             nil nil (thing-at-point &#39;url))))
  (request
   &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;http://dwz.cn/create.php&quot;&lt;/span&gt;
   &lt;span style=&quot;color: #A6E22E;&quot;&gt;:type&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;POST&quot;&lt;/span&gt;
   &lt;span style=&quot;color: #75715E;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;:data &#39;((&quot;url&quot; . long-url))&lt;/span&gt;
   &lt;span style=&quot;color: #A6E22E;&quot;&gt;:data&lt;/span&gt; (format &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;url=%s&quot;&lt;/span&gt; long-url)
   &lt;span style=&quot;color: #75715E;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;:data &quot;key=value&amp;amp;key2=value2&quot;  ; this is equivalent&lt;/span&gt;
   &lt;span style=&quot;color: #A6E22E;&quot;&gt;:parser&lt;/span&gt; &#39;json-read
   &lt;span style=&quot;color: #A6E22E;&quot;&gt;:success&lt;/span&gt; (function*
             (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (&lt;span style=&quot;color: #66D9EF;&quot;&gt;&amp;amp;key&lt;/span&gt; data &lt;span style=&quot;color: #66D9EF;&quot;&gt;&amp;amp;allow-other-keys&lt;/span&gt;)
               (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ((tinyurl (assoc-default &#39;tinyurl data))
                     (url-boundaries (bounds-of-thing-at-point &#39;url)))
                 (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;progn&lt;/span&gt;
                   (message &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;%S&quot;&lt;/span&gt; tinyurl)
                   (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; url-boundaries
                       (goto-char (cdr url-boundaries)))
                   (insert &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; &quot;&lt;/span&gt; tinyurl &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; &quot;&lt;/span&gt;)))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-20&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-20&quot;&gt;elpa   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;elpa&quot;&gt;elpa&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-20&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1-20-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-20-1&quot;&gt;proxy(goagent代理)   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;proxy&quot;&gt;proxy&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-20-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(setq url-proxy-services &#39;((&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;no_proxy&quot;&lt;/span&gt; . &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;work\\.com&quot;&lt;/span&gt;)
                           (&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;http&quot;&lt;/span&gt; . &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;localhost:8087&quot;&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;org-mode   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;org&quot;&gt;org&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
org-mode是一个神器,有许多强大的功能
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;org-mode的快捷键与命令&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;org-w3m-copy-for-org-mode: 在w3m中可以带链接，图片拷贝到org中（先选中region）
&lt;/li&gt;
&lt;li&gt;tab，S-tab
&lt;/li&gt;
&lt;li&gt;C-c C-n: next tiltle
&lt;/li&gt;
&lt;li&gt;C-c C-p: prev tilte
&lt;/li&gt;
&lt;li&gt;C-c C-f: 平级的上一个标题
&lt;/li&gt;
&lt;li&gt;C-c C-b：平级的下一个标题
&lt;/li&gt;
&lt;li&gt;C-c C-u：上一级标题：next
&lt;/li&gt;
&lt;li&gt;M-RET : 插入同级标题
&lt;/li&gt;
&lt;li&gt;M-S RET：插入一个同级的TODO标题
&lt;/li&gt;
&lt;li&gt;M-LEFT/RIGHT: 标题升/降级
&lt;/li&gt;
&lt;li&gt;M-S-LEFT/RIGHT：子树升/降级
&lt;/li&gt;
&lt;li&gt;C-c*：将本行设置为标题
&lt;/li&gt;
&lt;li&gt;C-c C-l: insert a link
&lt;/li&gt;
&lt;li&gt;C-c C-o: open a link
&lt;/li&gt;
&lt;li&gt;C-c C-c : 当在标题上时,可以用来插入标签
&lt;/li&gt;
&lt;li&gt;C-c C-q : 为当前标题插入标签
&lt;/li&gt;
&lt;li&gt;C-c \ : org-match-sparse-tree
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
&lt;b&gt;内容元数据及其快捷键：&lt;/b&gt;
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&amp;lt;v tab: begin\_verse   区域内换行
&lt;/li&gt;
&lt;li&gt;&amp;lt;s tab: begin\_src     区域内为代码 按 *C-c C-&#39;* 进入主模式编辑，在按退出
&lt;/li&gt;
&lt;li&gt;&amp;lt;e tab: begin\_example 例子，每行以：开始
&lt;/li&gt;
&lt;li&gt;&amp;lt;q tab: begin\_quote   区域左右都会留出缩进，用于引用
&lt;/li&gt;
&lt;li&gt;&amp;lt;c tab: begin\_center  居中区域
&lt;/li&gt;
&lt;li&gt;&amp;lt;l tab: begin\_latex
&lt;/li&gt;
&lt;li&gt;&amp;lt;h tab: begin\_html    嵌入html
&lt;/li&gt;
&lt;li&gt;&amp;lt;a tab: begin\_ascii
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;org-mode的一些格式化语法&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;链接: &quot;【【link】【descripter】】&quot;（用英文的方括号）
&lt;/li&gt;
&lt;li&gt;org-mode能自动识别链接，如http，file等
&lt;/li&gt;
&lt;li&gt;有序列表；1. 2. 3.
&lt;/li&gt;
&lt;li&gt;无序列表：*，+，-开头都可以
&lt;/li&gt;
&lt;li&gt;注解的格式：方括号+数字，或者方括号+fn+数字
C-c C-c可以在注解与正文之间跳转
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
(下面的格式，开头结尾必须都是空格或标点)
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;粗体(&lt;b&gt;): *粗体&lt;/b&gt;
&lt;/li&gt;
&lt;li&gt;斜体(&lt;i&gt;): /斜体&lt;/i&gt;
&lt;/li&gt;
&lt;li&gt;删除线(\+): &lt;del&gt;删除线&lt;/del&gt;
&lt;/li&gt;
&lt;li&gt;下划线(\_): &lt;span class=&quot;underline&quot;&gt;下划线&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;下标：H_2 O(会将\_后的字符串加上下标，空格为截止符)
&lt;/li&gt;
&lt;li&gt;上标：E=mc^2 (同上)
&lt;/li&gt;
&lt;li&gt;等宽字: &lt;code&gt;pair?&lt;/code&gt; 或者 &lt;code&gt;pair?&lt;/code&gt; 在文章中插入一小段代码或者变量时很有用(可以
突出重点)
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-3&quot;&gt;表格&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-3-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-3-1&quot;&gt;基本使用&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-3-1&quot;&gt;
&lt;p&gt;
在某一行的顶格输入‘|’，然后输入第一行第一列，在输入‘|’，接着第一行第二
列，依次类推，完成后tab，会将当前行对齐并为你创造表格的下一行，tab和
S-tab可以在表格中正向或者反向的移动，在表格的空白项中输入数字eg:&amp;lt;6&amp;gt;则
限定为6个字符长，多余的部分会隐藏，用C-c C-c可以展开
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-3-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-3-2&quot;&gt;技巧&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-3-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;在表格的两行之间之间插入 |- 然后TAB, 可以在表格中插入一个|—+—+–|类
似的行,可以用于区分表头行与数据行
&lt;/li&gt;
&lt;li&gt;表格内的公式运算
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;&lt;colgroup&gt;&lt;col class=&quot;right&quot; /&gt;&lt;col class=&quot;right&quot; /&gt;&lt;col class=&quot;right&quot; /&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th scope=&quot;col&quot; class=&quot;right&quot;&gt;单价&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;right&quot;&gt;数量&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;right&quot;&gt;总价&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;2&lt;/td&gt;
&lt;td class=&quot;right&quot;&gt;2.5&lt;/td&gt;
&lt;td class=&quot;right&quot;&gt;5.&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;3&lt;/td&gt;
&lt;td class=&quot;right&quot;&gt;3.5&lt;/td&gt;
&lt;td class=&quot;right&quot;&gt;10.5&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;right&quot;&gt;4&lt;/td&gt;
&lt;td class=&quot;right&quot;&gt;4.5&lt;/td&gt;
&lt;td class=&quot;right&quot;&gt;18.&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;
&lt;img src=&quot;static/img/org-table-formula.gif&quot; alt=&quot;org-table-formula.gif&quot; /&gt;
注意$1 代表第一列, $2代表第二列, 一般表格会自动计算,如果要强制自动计算
可以使用C-u C-c C-c或者M-x org-table-recalculate-buffer-tables
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-4&quot;&gt;org-mode TODO list&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-4&quot;&gt;
&lt;p&gt;
在一个标题上按shift+left/right，C-c C-t可以设置todo list的状态
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-5&quot;&gt;org-mode 中的latex代码&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-5&quot;&gt;
&lt;p&gt;
为了在org-mode中高亮latex代码,同时使latex能在html以及pdf中都能生效,不要使用
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
#+BEGIN_LaTeX

#+END_LaTeX
&lt;/pre&gt;
&lt;p&gt;
上面的代码不能高亮latex代码,同时它只在导出pdf时有效,所以你应该使用
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
#+BEGIN_SRC latex :exports results :results value raw
  \begin{equation}
    P(X=i) = \frac{e^{-\lambda}\lambda^i} {i!}
  \end{equation}
#+END_SRC
&lt;/pre&gt;
&lt;p&gt;
注意后面的results选项,它会将裸的latex代码直接放入导出的html或者tex文件,org-mode可以自动处理这种裸的latex
代码,这种裸的latex代码,可以有以下这几种形式:
&lt;/p&gt;

&lt;p&gt;
行内latex代码有下面两种界定符(如果你的latex代码有\lambda这类代码也可以不要界定符,org-mode会自动识别):
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$\lambda = np$     ==&amp;gt; $与代码之间不要有空格,第二个$后要跟空格,标点符号或破折号
\(\lambda=np\)
&lt;/pre&gt;
&lt;p&gt;
多行latex代码时
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
\begin{environment}
  latex code
\end{environment}
&lt;/pre&gt;
&lt;p&gt;
注意begin, end必须位于忽略空格后的行首
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-6&quot;&gt;org-mode中的latex代码的预览&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-6&quot;&gt;
&lt;p&gt;
org-mode中的latex代码可以预览,这是官方&lt;a href=&quot;http://orgmode.org/worg/org-tutorials/org-latex-preview.html&quot;&gt;文档&lt;/a&gt;, 有以下几个快捷键与命令:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;C-c C-x C-l, 命令是org-preview-latex-fragment.
&lt;/li&gt;
&lt;li&gt;C-u C-c C-x C-l: 预览该子树的所有latex代码
&lt;/li&gt;
&lt;li&gt;C-u C-u C-c C-x C-l 预览当前buffer中的所有latex代码
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
latex代码预览的原理是先创建一个临时的tex文件, 然后调用latex程序来处理该tex文件生成dvi文件,然后根据dvipng或
者imagemagick(convert)来生成png图片, 有几点注意事项:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;LATEX_HEADER指定的内容会包含进临时的tex文件, 而 LATEX_HEADER_EXTRA指定的内容则不会包含进临时tex文件
&lt;/li&gt;
&lt;li&gt;有两种方法来预览latex代码: dvipng(默认) 和 imagemagick,可以通过如下代码设置
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(setq org-latex-create-formula-image-program &#39;dvipng)
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;or&lt;/span&gt;
(setq org-latex-create-formula-image-program &#39;imagemagick)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;dvipng会调用标准latex程序(比如latexpdf)来处理tex文件, 这情况下,建议加入额外的不能被标准latex处理的宏包
(比如中文的xeCJK)时使用
&lt;pre class=&quot;example&quot;&gt;
#+LATEX_HEADER_EXTRA: \usepackage{xeCJK}
#+LATEX_HEADER_EXTRA: \setCJKmainfont{SimSun}
&lt;/pre&gt;
&lt;p&gt;
而不是
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setCJKmainfont{SimSun}
&lt;/pre&gt;
&lt;p&gt;
因为后者会将xeCJK包含在临时的tex文件中,而这个tex文件需要xetex来处理,所以在预览时会报错
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;会调用org-latex-pdf-process 指定的程序来处理,这种情况不会出现3中的问题,可是据我测试,生成图片的速度比3慢,而
且显示图片过大,所以推荐第三种方式
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-7&quot;&gt;org-mode中latex导出html时的设置&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-7&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;使用MaxJax.js (推荐,默认)
&lt;pre class=&quot;example&quot;&gt;
#+HTML_MATHJAX: align:&quot;left&quot; mathml:t path:&quot;/MathJax/MathJax.js&quot;
&lt;/pre&gt;
&lt;p&gt;
上述代码不是必须的,因为org-mode会自动添加一个org-mode官方的MathJax.js的链接到html,但是为了减轻org-mode
服务器的压力,还是建议你加入上述代码并使用MathJax官方的cdn:
&lt;a href=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js&quot;&gt;http://cdn.mathjax.org/mathjax/latest/MathJax.js&lt;/a&gt; ,更好的做法是在配置文件中加入如下代码:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(setq org-html-mathjax-options &#39;((path &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;http://cdn.mathjax.org/mathjax/latest/Ma&lt;/span&gt;&lt;span style=&quot;color: #F92672; background-color: #272822;&quot;&gt;thJax.js?config=TeX-AMS-MML_HTMLorMML&quot;)&lt;/span&gt;
                                 (scale &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;100&quot;&lt;/span&gt;)
                                 (align &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;center&quot;&lt;/span&gt;)
                                 (indent &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;2em&quot;&lt;/span&gt;)
                                 (mathml t)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这是全局的,如果要单个buffer那么就使用 HTML_MATHJAX文件头
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;将latex代码的处理结果导出成图片
&lt;pre class=&quot;example&quot;&gt;
 #+OPTIONS: tex:dvipng
or
 #+OPTIONS: tex:imagemagick
&lt;/pre&gt;
&lt;p&gt;
注意系统中必须要安装dvipng, imagemagik
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-8&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-8&quot;&gt;Babel&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-8&quot;&gt;
&lt;p&gt;
通过Babel,你可以直接在org-mode中运行各种编程语言的代码,每一个代码片段都组织为一个block,
可以向这个代码片段传递参数,同时每一个代码片段都可以产生输出,而这个输出又可以作为输入传递
给另一个代码片段,关于Babel的详细介绍可以看这篇官方的&lt;a href=&quot;http://orgmode.org/worg/org-contrib/babel/intro.html&quot;&gt;Instruction&lt;/a&gt; 与这篇&lt;a href=&quot;static/doc/babel.pdf&quot;&gt;pdf&lt;/a&gt; ,特别是后者,
建议认真看看,只有26页,Babel的基本结构分为数据块和代码块
数据块:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
#+name: &amp;lt;name&amp;gt;
&amp;lt;data block body&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
使用该数据时,直接引用&amp;lt;name&amp;gt;就好
代码块:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
#+name: &amp;lt;name&amp;gt;
#+headers: &amp;lt;header arguments&amp;gt;
#+begin_src &amp;lt;language&amp;gt; &amp;lt;header arguments&amp;gt;
 &amp;lt;body&amp;gt;
#+end_src
&lt;/pre&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;name: 如果指定,那么最后得到结果就会赋给该变量,可以通过该变量将代码块的执行结果作为参数传递给其他代码块
&lt;pre class=&quot;example&quot;&gt;
#+name: ret1
#+BEGIN_SRC python :results output
print &#39;hello world&#39;
#+END_SRC

#+RESULTS: ret1
: hello world

#+BEGIN_SRC sh :var arg=ret1
echo $arg
#+END_SRC

#+RESULTS:
: hello world
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;language: 代码的类型,eg: C, cpp, python, ruby
&lt;/li&gt;
&lt;li&gt;header-arguments: 头部参数,头部参数可以放在两个地方:代码块的上方以及&amp;lt;language&amp;gt;后,常用的头部参数:
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;:results output(捕捉输出), :results value (default,捕捉最后一个表达式的结果,代码块当做一个函数)
&lt;/li&gt;
&lt;li&gt;:file aa.png (将输出存入文件,下面会加入链接,这对于输出是图片(eg:gunplot)时非常方便)
&lt;/li&gt;
&lt;li&gt;:dir ~/Documents (将~/Documents 作为运行代码的进程的当前目录)
&lt;pre class=&quot;example&quot;&gt;
#+headers: :dir ~/Documents/blog
#+BEGIN_SRC sh
echo $PWD
#+END_SRC

#+RESULTS:
: /home/yangyu/Documents/blog
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;:var n=5 (传递一个变量n给code block,并且其值为5)
&lt;/li&gt;
&lt;li&gt;:exports both (输出code与results), :exports code(默认), :exports results, :exports none
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
现在我放入几个例子:
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2-9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-9&quot;&gt;dot&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-9&quot;&gt;
&lt;p&gt;
dot语言可以用来画流程图，和Babel结合起来非常方便，这是一份dot语言的&lt;a href=&quot;static/doc/dotguide.pdf&quot;&gt;guide&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;elisp学习笔记   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;elisp&quot;&gt;elisp&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;elisp基本语法&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-3-1-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-1-1&quot;&gt;help&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-1-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;M-x apropos (find symbol)
&lt;/li&gt;
&lt;li&gt;C-h k(descripte key)
&lt;/li&gt;
&lt;li&gt;C-h f (function)
&lt;/li&gt;
&lt;li&gt;C-h v (variable)
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-1-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-1-2&quot;&gt;control flow&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;&lt;code&gt;if&lt;/code&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(if test
a
b)
;;test is the condition
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;when&lt;/code&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;when&lt;/span&gt; condition a b c)
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;equivalent&lt;/span&gt;
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; condition (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;progn&lt;/span&gt; a b c) nil)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unless&lt;/code&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;unless&lt;/span&gt; condition a b c)
&lt;span style=&quot;color: #75715E;&quot;&gt;;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;equvalent&lt;/span&gt;
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; condition nil (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;progn&lt;/span&gt; a b c))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cond&lt;/code&gt;
和scheme类似:
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt; ((numberp x) x)
      ((stringp x) x)
      ((bufferp x)
       (setq temporary-hack x) &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;multiple body-forms&lt;/span&gt;
       (buffer-name x))        &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;in one clause&lt;/span&gt;
      ((symbolp x) (symbol-value x)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;and&lt;/code&gt; or &lt;code&gt;not&lt;/code&gt;
logical expression:
the function &lt;code&gt;or&lt;/code&gt; works like the logical &quot;or&quot; in most languages:
if all the arguments are false, it return nil, otherwith it will
return the value of the last argument whose value is non-nil.
eg: (or nil nil 3 2 1) return 3 (not t)
so (if a a b) is identical to (or a b)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt;
        &lt;b&gt;Special Form&lt;/b&gt;: while condition forms…
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dolist&lt;/code&gt;
        &lt;b&gt;Macro&lt;/b&gt;: dolist (var list [result]) body…
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;reverse&lt;/span&gt; (list)
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; (value)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;dolist&lt;/span&gt; (elt list value)
      (setq value (cons elt value)))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotimes&lt;/code&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;dotimes&lt;/span&gt; (i 100)
            (insert &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;I will not obey absurd orders\n&quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-1-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-1-3&quot;&gt;let   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;let&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-1-3&quot;&gt;
&lt;p&gt;
&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;let*&lt;/code&gt;, &lt;code&gt;letrec&lt;/code&gt; 的作用语法与scheme类似
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ((val1 value1)
      (val2 value2))
  body)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-1-4&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-1-4&quot;&gt;function&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-1-4&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
(defun func-name (a b &amp;amp;optional c d &amp;amp;rest e) body)
&lt;/pre&gt;
&lt;p&gt;
optional代表参数可选, rest代表可变参数, 如果有那么会是一个列表
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;&lt;code&gt;apply&lt;/code&gt;: &lt;code&gt;apply function &amp;amp;rest arguments&lt;/code&gt;

&lt;p&gt;
调用函数, &lt;code&gt;function&lt;/code&gt; 的值是一个symbol(比如你要调用 &lt;code&gt;list&lt;/code&gt; 函数,那么你应
该传递 &#39;list )最后一个参数必须是列表, 这个列表参数会被apply自动拆开,然后
传递给function
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;funcall&lt;/code&gt;: 与 &lt;code&gt;apply&lt;/code&gt; 不同的是,它不会拆开列表参数, 而是直接将列表参数作为一个
参数传递给function
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(setq f &#39;list)
(apply f &#39;a &#39;b &#39;(1 2))                  &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;(a b 1 2)&lt;/span&gt;
(funcall f &#39;a &#39;b &#39;(1 2))                &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;(a b (1 2))&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-3-1-5&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-1-5&quot;&gt;lists&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-1-5&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;code&gt;null&lt;/code&gt;: 测试list是否为空
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;listp&lt;/code&gt;: 是否为list
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;car&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cdr&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cons&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt;: (list &#39;a &quot;b&quot; 1) ==&amp;gt; (a &quot;b&quot; 1)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt;: (append &#39;(a b) &#39;(c d)) ==&amp;gt; (a b c d)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse&lt;/code&gt;: (reverse &#39;(a b c d)) ==&amp;gt; (d c b a)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nthcdr&lt;/code&gt;: call cdr n times
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length&lt;/code&gt;: get the length of the list
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapcar&lt;/code&gt;:
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equal&lt;/code&gt;: only test the object&#39;s structure and content
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eq&lt;/code&gt;: test if the two arguments is the same object(like pointer in C)
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
&lt;b&gt;以上的函数都不会原地改变list, 它会返回一个新的list作为结果, 下面的函数会
 原地改变list&lt;/b&gt;
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;code&gt;setcar&lt;/code&gt;: change the car-element of the list
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setcdr&lt;/code&gt;: change the cdr-element of the list
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;push&lt;/code&gt;: 和cons类似,只是会原地改变list
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop&lt;/code&gt;: 和car类似,只是会原地改变list(删除list的第一个元素)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add-to-list&lt;/code&gt;: 和push类似
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-3-1-5-1&quot; class=&quot;outline-6&quot;&gt;
&lt;h6 id=&quot;sec-1-3-1-5-1&quot;&gt;Associate List&lt;/h6&gt;
&lt;div class=&quot;outline-text-6&quot; id=&quot;text-1-3-1-5-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
((key1 . value1 )
(key2 . value2 )
(keyn . valuenn ))
&lt;/pre&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;code&gt;assoc&lt;/code&gt;: 当list类似于关联数组时，用key来寻找value，用equal测试key
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assq&lt;/code&gt;: 与assoc相似，只是用eq测试key
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-1-5-2&quot; class=&quot;outline-6&quot;&gt;
&lt;h6 id=&quot;sec-1-3-1-5-2&quot;&gt;property list&lt;/h6&gt;
&lt;div class=&quot;outline-text-6&quot; id=&quot;text-1-3-1-5-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;(setq alist &#39;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;:publish-dir&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;~/Documents&quot;&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;:base-dir&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;~/Documents/note&quot;&lt;/span&gt;))
&lt;span class=&quot;linenr&quot;&gt;2: &lt;/span&gt;(plist-get alist &lt;span style=&quot;color: #A6E22E;&quot;&gt;:base-dir&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;常用的函数   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;function&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;command&quot;&gt;command&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-3-2-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-2-1&quot;&gt;lisp的基本语法&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-3-2-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-2-2&quot;&gt;光标   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;point&quot;&gt;point&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-2-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-elisp&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;point&lt;/span&gt;
(point)
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;一般返回buffer-end,但是如果指定了Narrowing,那么结果就不同&lt;/span&gt;
(point-max)
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;一般返回1,但是如果指定了Narrowing,那么结果就不同&lt;/span&gt;
(point-min)
(buffer-end)
(buffer-size)
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;可以用来保存当前的point,不管body中如何改变point,执行完成后都会回到执行save-excursion之前的point&lt;/span&gt;
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;save-excursion&lt;/span&gt; body)
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Narrowing(将emacs的文本操作限定在buffer的一个子区域中)&lt;/span&gt;
(narrow-to-region start end)
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;region&lt;/span&gt;
(region-beginning)
(region-end)
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;line&lt;/span&gt;
(beginning-of-line)
(end-of-line)
(buffer-substring start end)

(goto-char 293)
(forward-char n)
(backward-char n)
(skip-chars-forward &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;\n\t&quot;&lt;/span&gt;)
(skip-chars-backward &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;\n\t&quot;&lt;/span&gt;)

(forward-line n)
(backward-line n)

(looking-at regex)  &lt;span style=&quot;color: #75715E;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return t if text after the point match the REGEXP&lt;/span&gt;
(looking-back regex)

(search-forward my-str)
(search-backward my-str)
(re-search-forward my-regex)
(re-search-backward my-regex)
(replace-match)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-2-3&quot;&gt;文本编辑&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-2-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;code&gt;delete-char&lt;/code&gt;: (delete-char 9)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete-region&lt;/code&gt;: (delete-region start-pos end-pos)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert&lt;/code&gt;: (insert &quot;hello world&quot;)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buffer-substring&lt;/code&gt;: (buffer-substring start-pos end-pos) ;;从buffer中获得字符串
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2-4&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-2-4&quot;&gt;字符串操作   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;string&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-2-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;code&gt;length&lt;/code&gt;: (length &quot;abc&quot;)   ⟶ return 3
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;substring&lt;/code&gt;: (substring &quot;hello world&quot; 1 3) ⟶ return &quot;ell&quot;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace-regexp-in-string&lt;/code&gt;: (replace-regexp-in-string regex replace str)  ⟶ 正则替换
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string-match&lt;/code&gt;: (string-match regex str) ⟶ return the index first match the regex in str
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2-5&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-2-5&quot;&gt;buffer相关：   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;buffer&quot;&gt;buffer&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-2-5&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;code&gt;buffer-name&lt;/code&gt;: (buffer-name)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buffer-file-name&lt;/code&gt;: (buffer-file-name) ⟶ full name
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set-buffer&lt;/code&gt;: (set-buffer name)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;save-buffer&lt;/code&gt;: (save-buffer)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kill-buffer&lt;/code&gt;: (kill-buffer BufferName)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kill-this-buffer&lt;/code&gt;: (kill-this-buffer)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;with-current-buffer&lt;/code&gt;: (with-current-buffer)
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2-6&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-2-6&quot;&gt;file相关   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;file&quot;&gt;file&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-2-6&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;code&gt;find-file&lt;/code&gt;: (find-file path)  ;;open a file
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write-file&lt;/code&gt;: (write-file path) ;;save the file
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert-file-contents&lt;/code&gt;: (insert-file-contents path) ⟶将指定文件内容插入当前位置
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append-to-file&lt;/code&gt;: (append-to-file start-pos end-pos path)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rename-file&lt;/code&gt;: (rename-file old-name new-name)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy-file&lt;/code&gt;: (copy-file file-name new-name)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete-file&lt;/code&gt;: (delete-file file-name)
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file-name-directory&lt;/code&gt;: (file-name-directory full-path) ⟶路径（不包含文件名）
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file-name-nondirectory&lt;/code&gt;: (file-name-nondirectory full-path) ⟶文件名（不包含路径）
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file-name-extension&lt;/code&gt;: (file-name-extension file-name)  ⟶后缀,一般时扩展名
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file-name-sans-extension&lt;/code&gt;: (file-name-sans-extension &quot;/hello/abc.html&quot;) ⟶return &quot;/hello/abc&quot;,只去掉后缀
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2-7&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-2-7&quot;&gt;other useful function&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-2-7&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;code&gt;save-excursive&lt;/code&gt;: 保存并恢复当前point
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interactive&lt;/code&gt;:
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thing-at-point&lt;/code&gt;:
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(thing-at-point &#39;word)
(thing-at-point &#39;sexp)
(thing-at-point &#39;url)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bounds-of-thing-at-point&lt;/code&gt;: 和 &lt;code&gt;thing-at-point&lt;/code&gt; 类似,只是它会返回一个
pair ⟶ (start . end) , 这个pair 的car是左边界,cdr是右边界
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;current-time-string&lt;/code&gt;: (current-time-string) ⟶ 返回当前时间字符串
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format-time-string&lt;/code&gt;: (format-time-string &quot;%1.%M %p&quot; (current-time))
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;symbol-name&lt;/code&gt;: 将symbol转换为字符串, eg: (symbol-name &#39;sym) ⟶ &quot;sym&quot;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intern&lt;/code&gt;: 将字符串转换为symbol, eg: (intern &quot;sym&quot;) ⟶ &#39;sym
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2-8&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-2-8&quot;&gt;&lt;b&gt;useful variable&lt;/b&gt;&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-2-8&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;code&gt;mark-active&lt;/code&gt;: 现在一般用 &lt;code&gt;region-active-p&lt;/code&gt; 代替
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last-command&lt;/code&gt;: 最后一条命令
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2-9&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-2-9&quot;&gt;useful code snippet&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-2-9&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;test if a mode(major or minor) is on (flymake-mode as an example)
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (and (boundp &#39;flymake-mode) flymake-mode)
    (message &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;flymake-mode is on&quot;&lt;/span&gt;)
  (message &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;flymake-mode is off&quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;setting keybinding for specified mode
        &lt;b&gt;there are two way&lt;/b&gt;, the first is &lt;b&gt;eval-after-load&lt;/b&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;eval-after-load&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;org&quot;&lt;/span&gt;
  &#39;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;progn&lt;/span&gt;
     (define-key org-mode-map (kbd &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;&amp;lt;C-M-return&amp;gt;&quot;&lt;/span&gt;) &#39;org-insert-heading-respect-c&lt;span style=&quot;color: #F92672; background-color: #272822;&quot;&gt;ontent)&lt;/span&gt;
     (define-key org-mode-map (kbd &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;&amp;lt;M-right&amp;gt;&quot;&lt;/span&gt;) nil) &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;erasing a keybinding.&lt;/span&gt;
     (define-key org-mode-map (kbd &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;&amp;lt;M-left&amp;gt;&quot;&lt;/span&gt;) nil) &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;erasing a keybinding.&lt;/span&gt;
     ))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
the second way is &lt;b&gt;add-hook&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;my-org-settngs&lt;/span&gt; ()
    (flyspell-mode 1))
(add-hook &#39;org-mode-hook &#39;my-org-settngs)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
对以上二者的说明:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;eval-after-load只运行一次,所以比较适合那些一次性的设置,比如给某个特定的mode设置keymap,它没有当前
buffer的概念, 而add-hook这是对每一个打开了该mode的buffer都会运行一次.所以它适合来设置一些和buffer相
关的设置
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;local-set-key&lt;/b&gt; 实际上也是调用 &lt;b&gt;define-key&lt;/b&gt; , 其中 &lt;b&gt;map&lt;/b&gt; 参数是 &lt;b&gt;(current-local-map)&lt;/b&gt; 的值. 这个值
一般是由major mode设置的. 所以在给minor mode设置keymap时,使用 &lt;b&gt;define-key&lt;/b&gt; 比较好, 因为可以直接指定
minor mode 的map
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-3&quot;&gt;interactive   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;interactive&quot;&gt;interactive&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-3&quot;&gt;
&lt;p&gt;
emacs中交互式运行的命令都需要在函数体的最上方加上(interactive
arg-descriptor), arg-descriptor最后会解析成参数从递给该命令, arg-descriptor
有三种形式
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;&lt;code&gt;(interactive)&lt;/code&gt; : &lt;code&gt;arg-descriptor&lt;/code&gt; 为 &lt;code&gt;nil&lt;/code&gt;, 该命令没有参数
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(interactive &quot;p\ncZap to char: &quot;)&lt;/code&gt; : &lt;code&gt;arg-descriptor&lt;/code&gt; 以 &lt;code&gt;\n&lt;/code&gt; 分割后每一
部分都会产生一个参数,比如上面的例子,以\n分隔后就变成:
&lt;pre class=&quot;example&quot;&gt;
&quot;p&quot;
&quot;cZap&quot;
&lt;/pre&gt;
&lt;p&gt;
其中每一部分开头的那个字母有特殊的含义:
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;p: 接受C-u传入的参数,返回的是整数,默认是1,也就是numeric prefix
argument. 后面不能跟提示字符串,因为参数来自C-u而不是minibuffer
&lt;/li&gt;
&lt;li&gt;c: 从minibuffer中读入一个字符,它后面跟的Zap会作为提示显示在minibuffer
中
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
除了上面的p, c外还有很多这样的特殊字符,下面是一些常用的, 这是官方&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Codes.html#Interactive-Codes&quot;&gt;文档&lt;/a&gt; ,
这是一些单词的含义: &lt;b&gt;Prompt&lt;/b&gt; (后面可以跟显示在minibuffer中提示字符串),
&lt;b&gt;Existing&lt;/b&gt; (file, command… 必须已存在), &lt;b&gt;Completion&lt;/b&gt; (可以补全) :
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;P(uppercase): 和小写p的最大区别是它返回的是raw prefix argument, 默认是
nil, 后面不能跟提示字符串,因为参数来自C-u而不是minibuffer
&lt;/li&gt;
&lt;li&gt;b: 已存在的buffer name, 可以跟提示字符串, 默认是当前buffer, 可以补全
&lt;/li&gt;
&lt;li&gt;B: 不存在的buffer name, 可以跟提示字符串, 默认是最近使用的buffer
&lt;/li&gt;
&lt;li&gt;f: 已存在的文件名,  [Existing, Completion, Default, Prompt]
&lt;/li&gt;
&lt;li&gt;F: 不存在的文件名, [Completion, Default, Prompt]
&lt;/li&gt;
&lt;li&gt;C(uppercase): 命令名称, [prompt,  Existing, Completion]
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;(interactive (lisp-expression-return-list-argument)) : arg-descriptor是
一个elisp表达式,这个表达式应该产生传递给命令的参数,一般会调用read-string
这样的函数从minibuffer中读入字符串
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(interactive (list
              (read-string (format &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;word (%s): &quot;&lt;/span&gt; (thing-at-point &#39;word))
                           nil nil (thing-at-point &#39;word))))

(interactive
 (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ((string (read-string &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Foo: &quot;&lt;/span&gt; nil &#39;my-history)))
   (list (region-beginning) (region-end) string)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这是read-string的原型:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
read-string prompt &amp;amp;optional initial history default inherit-input-method
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-3-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-4&quot;&gt;autoload   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;autoload&quot;&gt;autoload&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-4&quot;&gt;
&lt;p&gt;
使用autoload可以使一个函数或者命令只在调用时才加载进来,这样可以加快emacs的
启动时间,使用autoload有两种方法:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;autoload function filename &amp;amp;optional docstring interactive type

&lt;p&gt;
该函数会将function标记为autoload:
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;function: 一个symbol,用来代表函数或者宏
&lt;/li&gt;
&lt;li&gt;filename: 一个 &lt;code&gt;string&lt;/code&gt;, 用来指定加载function的文件,不要带目录名与后缀
名
&lt;/li&gt;
&lt;li&gt;docstring: 文档字符串,指定后可以在没有加载function的情况下看它的文档
&lt;/li&gt;
&lt;li&gt;interactive: bool,如果为 &lt;code&gt;t&lt;/code&gt; 那么就是一个command,否则就是一个函数
&lt;/li&gt;
&lt;li&gt;type:
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;使用魔法注释
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;###&lt;/span&gt;&lt;span style=&quot;color: #968B26; font-weight: bold;&quot;&gt;autoload&lt;/span&gt;
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;doctor&lt;/span&gt; ()
       &lt;span style=&quot;color: #75715E;&quot;&gt;&quot;Switch to *doctor* buffer and start giving psychotherapy.&quot;&lt;/span&gt;
       (interactive)
       (switch-to-buffer &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;*doctor*&quot;&lt;/span&gt;)
       (doctor-mode))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
那么这个 &lt;code&gt;doctor&lt;/code&gt; 就是标记为autoload的.实际上上面的注释部分会被自动转换
为 &lt;code&gt;autoload&lt;/code&gt; 的形式
&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;package.el 中的 &lt;code&gt;autoload&lt;/code&gt;, 以yasnippet为例, package.el 会根据yasnippet
中魔法注释创建一个yasnippet-autoloads.el的文件,该文件就是调用 autoload函
数来自动加载yasnippet.el中指定要自动加载的函数,而
yasnippet-autoloads.el(所有的package.el管理的包的 -autoloads.el文件)都是是在
执行(package-initialize)时运行的.这样每一个包需要自动加载的函数就都加载
进来了
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;一些我遇到的emacs让人困惑的问题&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-4-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-1&quot;&gt;overwrite mode&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-1&quot;&gt;
&lt;p&gt;
该mode打开的话，会替换光标后面的字符，而不是插入，非常令人不爽
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-2&quot;&gt;whitespace-mode&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-2&quot;&gt;
&lt;p&gt;
该modek打开后,默认会在所有的空格位置显示一个 . ,并且在行尾显示一个$, 可以使
用这个mode来高亮一行中超过80的部分
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>history.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/history.html"/>
    <title>History</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;History&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;行政区划&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;行政区划&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;夏商周: 分封制(诸侯国)
&lt;/li&gt;
&lt;li&gt;秦: 郡县制, 郡的长官叫 &lt;b&gt;郡守&lt;/b&gt; x后叫 &lt;b&gt;太守&lt;/b&gt;, 县的长官叫 &lt;b&gt;县令&lt;/b&gt;.
&lt;/li&gt;
&lt;li&gt;西汉: 汉初是郡县制与分封制并存汉景帝采纳晁错的建议削藩后，至汉武帝时期，封国已
徒有虚名，实际上实行的是郡县制，即中央，郡，县三级管理．县属郡，郡属中央，全
国一百多个郡，一千多个县的长官叫县令，西汉元封五年，汉武帝将天下分为十三个州
部，即十二个州，一个部（司隶部），每个州派一名刺史，刺史的级别是六百石，职责
是巡视监察，没有固定治所，也不能常驻地方，而且不能干预地方行政．所以这时候
州还不能算是一级地方行政区域,因为它的长官只是高级监察官吏,不能管理地方
&lt;/li&gt;
&lt;li&gt;东汉: 州-郡-县制,东汉中前期其实和西汉一样,州并不是一级行政区划, 州刺史仍然只
是高级监察官吏, 只是到东汉后期, 汉灵帝为了镇压黄巾起义将部分州刺史升级为州
牧,而且刺史与州牧被授权统一掌管一州实际军政大权,权位在郡的太守之上,所以东汉
末年形成了 州-郡-县制, 那时候天下和西汉一样还是十三个州：司隶，豫州，冀州，
兖州，徐州，青州，荆州，杨州，益州，凉州，并州，幽州，交州.但是郡管县的两级
变成了州管郡，郡管县的三级管理．州的长官，有时叫 &lt;b&gt;刺史&lt;/b&gt; ，有时叫 &lt;b&gt;州牧&lt;/b&gt; ，有
时既有刺史又有州牧．相比较而言，刺史威轻，州牧权重．汉灵帝时，州牧已是任重，
位高，权大．汉献帝时的州牧，更多为天下枭雄，一方诸候．
&lt;/li&gt;
&lt;li&gt;隋朝: 前期是州县制, 后期是郡县制,实际都是二级行政区划
&lt;/li&gt;
&lt;li&gt;唐朝: 道-州-县制, 虚三级,道和西汉的州类似只是监察机构,没有长期设置的长官，实
际到唐朝后期被 &lt;b&gt;节度使&lt;/b&gt; 等掌控. 州的长官为 &lt;b&gt;刺史&lt;/b&gt;,刺史下有 &lt;b&gt;别驾&lt;/b&gt;, &lt;b&gt;长史&lt;/b&gt; 为辅官,一些重要
的州也命名为府,和府同级还有都护府与都督府,都督府权力太大设立后又被废除,县的
长官为县令,下有 &lt;b&gt;县丞&lt;/b&gt; 、主簿、县尉等辅官。, 天宝之乱后,节度使制度用于全国,节度
使一般授予州刺史,同时掌握本州甚至邻州的军政权力，而且其辖区也称为“道”，或称
“藩镇”，成为有实际权力的一级非正式行政区划,这是区划&lt;a href=&quot;http://upload.wikimedia.org/wikipedia/commons/a/af/%E5%94%90%E6%9C%9D%E7%96%86%E5%9F%9F%EF%BC%88%E7%AE%80%EF%BC%89.png&quot;&gt;全图&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;宋: 路-州-县, 实际也是虚三级, 路是监察机构, 州(府,军,监)为一级, 长官为知州,
县为一级,长官为知县 和唐朝的道类似,这是区划&lt;a href=&quot;http://upload.wikimedia.org/wikipedia/commons/d/d4/Northern_Song%28%E5%8C%97%E5%AE%8B%E5%88%86%E8%B7%AF%E5%85%A8%E5%9B%BE%29.jpg&quot;&gt;全图&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;元: 行中书省(行省)制:
&lt;/li&gt;
&lt;li&gt;明: 省-府-州-县四级制与省-州-县三级制并存. 省一级明朝是三司制度,即:布政使司
(政务),都指挥使司(军事), 提刑按察使司(司法、监察等)布政司使, 省一级是第一级
行政区划,下辖府,可是也可以下辖直辖州,长官为 &lt;b&gt;都指挥使&lt;/b&gt; 一名(军事, 正二品),
左右 &lt;b&gt;布政使&lt;/b&gt; 各一名(政务,从二品), &lt;b&gt;按察使&lt;/b&gt; 一名(掌管一省“刑名按劾”, 正三品),
府的长官为 &lt;b&gt;知府&lt;/b&gt;, 州的长官是 &lt;b&gt;知州&lt;/b&gt;,省的直属州地位相当于府, 县的长官为 &lt;b&gt;知县&lt;/b&gt;
&lt;/li&gt;
&lt;li&gt;清: 省-府-县三级制. 省的长官有以下一些: &lt;b&gt;总督&lt;/b&gt; 一般管两个省或两省以上的军政
事务(偏军事), &lt;b&gt;巡抚&lt;/b&gt;: 总管一省军事、行政、监察及教育在内的高级长官. &lt;b&gt;布政
使&lt;/b&gt; : 也是一省的长官,但是因为设立了督抚所以渐居次要, &lt;b&gt;按察使&lt;/b&gt;:正三品，比布政使地
位略低，掌司法监察，“澄清吏治”, 府的长官为 &lt;b&gt;知府&lt;/b&gt;,县的长官为 &lt;b&gt;知县&lt;/b&gt;.
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>linux-c-garbled-characters.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/linux-c-garbled-characters.html"/>
    <title>Linux平台C语言乱码</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;Linux平台C语言乱码&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;文件加载到显示的过程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;文件加载到显示的过程&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
只要是用过linux的人都应该遇到过乱码的问题，众所周知，乱码的产生的主要原因是编
码的问题，以B编码方式去读取以A编码方式编码的文件时就会产生乱码，文件读取到显示
的过程可以简单的用下图表表示：
&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;static/img/how-to-show-file.png&quot; alt=&quot;how-to-show-file.png&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;第一步是将文件读入内存，这一步可以看作是直接将文件的二进制形式的表示直接复制
进内存，就是将你用十六进制工具看到的那些东西复制进内存，
&lt;/li&gt;
&lt;li&gt;第二步是显示终端将内存中的数据以某种编码方式解码显示出来
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
在linux下这种显示终端的默认编码方式一般是utf8，windows则是gb2312，从这里可以看出，在linux下要不产生乱码，必须
让内存中的二进制数据是对原始信息通过utf8编码得到的，那么如何保证这一点呢，有
两种方式，一种是让文件本身是utf8编码的，这样读入内存后在以utf8解码后得到的信
息肯定一样，也就是不会有乱码，第二种是直接在内存中转换，假设我读一个以gb2312
编码的文件，在内存中得到一个缓冲区buf，如果你直接将buf传送给显示终端的话，那
么显示终端就会以utf8对buf的二进制数据解码，那么就会产生乱码，因为buf的二进制
数据是以gb2312对原始信息编码得到的，这就是为什么很多windows创建的文件在linux
读取时会乱码，那么我要正常显示，则必须将buf中的二进制数据转换为将原始信息以utf8
编码得到的二进制信息，这里分两种情况讨论:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;文本文件的编码格式是utf8，这种情况可以直接用c语言读取显示，不会产生乱码，
所以不过多赘述
&lt;/li&gt;
&lt;li&gt;文本文件的编码是gb2312，那么直接用C语言操作时就会产生乱码，这种情况的解决方
式主要有两种，第一种就是运行程序之前将要操作的文本文件转换为utf8，打开shell，
输入以下命令:
iconv -f gb2312 -t utf8 youfile -c -o newfile
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
其中youfile是要转换的文件，newfile就是得到的utf8编码的文件，其中c这个参数建议加上，
它可以忽略无效的字符，比如可以忽略utf8文件里的BOM，下面贴一段转换歌词编码的脚本给大
家参考:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;!/bin/&lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;bash&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;for&lt;/span&gt; i&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt; in&lt;/span&gt; *.lrc
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;    &lt;span style=&quot;color: #FD971F;&quot;&gt;is_utf8&lt;/span&gt;=$(file &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;$i&quot;&lt;/span&gt; | grep &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;UTF-8&#39;&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; [ -z &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;$is_utf8&quot;&lt;/span&gt; ]
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;        iconv -f gb2312 -t utf8 &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;$i&quot;&lt;/span&gt; -c -o tmp_lrc &amp;amp;&amp;amp; rm -f &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;$i&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;        mv tmp_lrc &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;$i&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;continue&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;done&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
功能就是将一个目录里扩展名为lrc的文件编码转换为utf8
&lt;/p&gt;

&lt;p&gt;
这种方式有个弊端就是文件必须提前转换编码，如果程序是给别人使用，我们不可能要求别
人先将文件的编码转换好在运行程序，那么有没有什么办法可以直接在C程序里进行转换呢？
下面就看看如何在程序中进行转换，先看代码:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-C&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;#include&lt;/span&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;#include&lt;/span&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;&amp;lt;iconv.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;#define&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;MAXLINE&lt;/span&gt; 1024
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;main&lt;/span&gt;()
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;    &lt;span style=&quot;color: #66D9EF;&quot;&gt;FILE&lt;/span&gt; *&lt;span style=&quot;color: #FD971F;&quot;&gt;fp&lt;/span&gt; = fopen(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;she.lrc&quot;&lt;/span&gt;,&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;r&quot;&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;    &lt;span style=&quot;color: #66D9EF;&quot;&gt;char&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;buf&lt;/span&gt;[MAXLINE];
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;    &lt;span style=&quot;color: #66D9EF;&quot;&gt;char&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;dest&lt;/span&gt;[MAXLINE];
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;    &lt;span style=&quot;color: #66D9EF;&quot;&gt;char&lt;/span&gt; *&lt;span style=&quot;color: #FD971F;&quot;&gt;in&lt;/span&gt; = buf;
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;    &lt;span style=&quot;color: #66D9EF;&quot;&gt;char&lt;/span&gt; *&lt;span style=&quot;color: #FD971F;&quot;&gt;out&lt;/span&gt; = dest;
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;    fgets(buf,MAXLINE,fp);
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;    &lt;span style=&quot;color: #66D9EF;&quot;&gt;iconv_t&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;cd&lt;/span&gt; = iconv_open(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;,&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;GBK&quot;&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt;16: &lt;/span&gt;    &lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;lenght&lt;/span&gt; = MAXLINE;
&lt;span class=&quot;linenr&quot;&gt;17: &lt;/span&gt;    iconv(cd,&amp;amp;in,&amp;amp;lenght,&amp;amp;out,&amp;amp;lenght)
&lt;span class=&quot;linenr&quot;&gt;18: &lt;/span&gt;    iconv_close(cd);
&lt;span class=&quot;linenr&quot;&gt;19: &lt;/span&gt;    fputs(dest,stdout);
&lt;span class=&quot;linenr&quot;&gt;20: &lt;/span&gt;    printf(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;\n&quot;&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt;21: &lt;/span&gt;    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; 0;
&lt;span class=&quot;linenr&quot;&gt;22: &lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面的程序只是为了测试，所以有些错误处理代码去掉了，其中she.lrc是一个以gb2312编码
的歌词文件，用到了3个函数，icon_open,iconv,icon_close,这三个函数是libiconv库的接
口，这三个函数的详细介绍清参考:
&lt;a href=&quot;http://www.gnu.org/savannah-checkouts/gnu/libiconv/documentation/libiconv-1.13/iconv_open.3.html&quot;&gt;ICONV_OPEN&lt;/a&gt;
&lt;a href=&quot;http://www.gnu.org/savannah-checkouts/gnu/libiconv/documentation/libiconv-1.13/iconv.3.html&quot;&gt;ICONV&lt;/a&gt;
&lt;a href=&quot;http://www.gnu.org/savannah-checkouts/gnu/libiconv/documentation/libiconv-1.13/iconv_close.3.html&quot;&gt;ICONV_CLOSE&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
这三个函数的帮助文档也可以直接man，很详细，使用的顺序也是先调
用iconv_open创建描述符，然后调用iconv转换，最后调用iconv_close
关闭描述符，函数原型为：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-C&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;&lt;span style=&quot;color: #66D9EF;&quot;&gt;iconv_t&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;iconv_open&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;char&lt;/span&gt; *&lt;span style=&quot;color: #FD971F;&quot;&gt;tocode&lt;/span&gt;, &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;char&lt;/span&gt; *&lt;span style=&quot;color: #FD971F;&quot;&gt;fromcode&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt;2: &lt;/span&gt;&lt;span style=&quot;color: #66D9EF;&quot;&gt;size_t&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;iconv&lt;/span&gt;(&lt;span style=&quot;color: #66D9EF;&quot;&gt;iconv_t&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;cd&lt;/span&gt;,
&lt;span class=&quot;linenr&quot;&gt;3: &lt;/span&gt;                    &lt;span style=&quot;color: #66D9EF;&quot;&gt;char&lt;/span&gt; **&lt;span style=&quot;color: #FD971F;&quot;&gt;inbuf&lt;/span&gt;, &lt;span style=&quot;color: #66D9EF;&quot;&gt;size_t&lt;/span&gt; *&lt;span style=&quot;color: #FD971F;&quot;&gt;inbytesleft&lt;/span&gt;,
&lt;span class=&quot;linenr&quot;&gt;4: &lt;/span&gt;                    &lt;span style=&quot;color: #66D9EF;&quot;&gt;char&lt;/span&gt; **&lt;span style=&quot;color: #FD971F;&quot;&gt;outbuf&lt;/span&gt;, &lt;span style=&quot;color: #66D9EF;&quot;&gt;size_t&lt;/span&gt; *&lt;span style=&quot;color: #FD971F;&quot;&gt;outbytesleft&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt;5: &lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;iconv_close&lt;/span&gt;(&lt;span style=&quot;color: #66D9EF;&quot;&gt;iconv_t&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;cd&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
其中fromcode和tocode是编码方式，shell下输入iconv –list会列出支持的编码方式。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>funny-video.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/funny-video.html"/>
    <title>My Favourite Videos</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;My Favourite Videos&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;搞笑视频&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;臣妾做不到&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;天文&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-2-1&quot;&gt;旅行到宇宙的边缘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;搞笑视频&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;臣妾做不到&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;!-- &lt;iframe height=498 width=510 src=&quot;http://player.youku.com/embed/XNTU2ODM4MTI0&quot; frameborder=0 allowfullscreen&gt;&lt;/iframe&gt; --&gt;
&lt;embed src=&quot;http://player.56.com/v_OTE2MTM0MDI.swf&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;480&quot; height=&quot;405&quot; allowfullscreen=&quot;true&quot; allownetworking=&quot;all&quot; allowscriptaccess=&quot;always&quot;&gt;&lt;/embed&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;天文&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;旅行到宇宙的边缘&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;embed src=&quot;http://player.56.com/v_OTEyNTM4NDg.swf&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;480&quot; height=&quot;405&quot; allowfullscreen=&quot;true&quot; allownetworking=&quot;all&quot; allowscriptaccess=&quot;always&quot;&gt;&lt;/embed&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>php.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/php.html"/>
    <title>PHP笔记</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;PHP笔记&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;php 笔记&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;变量&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;变量的命名与注意事项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;作用域&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;操作符与控制结构&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-2-1&quot;&gt;操作符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2&quot;&gt;控制结构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;php数组&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-3-1&quot;&gt;数组定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2&quot;&gt;循环访问&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-3&quot;&gt;数组排序（原地改变数组）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-4&quot;&gt;其它数组函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;字符串处理函数&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-4-1&quot;&gt;常规字符串处理函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4-2&quot;&gt;正则表达式函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5&quot;&gt;文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6&quot;&gt;function&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-6-1&quot;&gt;定义&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7&quot;&gt;OOP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-8&quot;&gt;php与数据库（mysql）&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-8-1&quot;&gt;示例代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9&quot;&gt;MySQL&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-9-1&quot;&gt;数据库设计的三大范式：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-2&quot;&gt;数据库的常用模式&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-9-2-1&quot;&gt;主扩展模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-2-2&quot;&gt;主从模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-2-3&quot;&gt;名值模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-2-4&quot;&gt;多对多模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-3&quot;&gt;常用的SQL代码&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-9-3-1&quot;&gt;登录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-3-2&quot;&gt;增加新用户&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-3-3&quot;&gt;Select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-3-4&quot;&gt;insert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-3-5&quot;&gt;update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-3-6&quot;&gt;delete（删除行）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-3-7&quot;&gt;create database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-3-8&quot;&gt;create  table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-3-9&quot;&gt;Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-3-10&quot;&gt;Drop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-3-11&quot;&gt;Alert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9-3-12&quot;&gt;从文件创建：mysql –u root &amp;lt;file.sql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10&quot;&gt;其它技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;php 笔记&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
php是一门流行的web开发语言,以上手简单著称
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;变量&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;变量的命名与注意事项&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;变量必须要$符号，和perl类似.
&lt;/li&gt;
&lt;li&gt;常量用define定义，常量使用时不需要$符号，eg: define(“const\&lt;sub&gt;var”&lt;/sub&gt;, 100),使用时直接用const\&lt;sub&gt;var不需要引号与&lt;/sub&gt;$。
&lt;/li&gt;
&lt;li&gt;大小写：php的变量与常量区分大小写，而函数名，类名，方法名不区分大小写。
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;作用域&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;超全局变量
&lt;/li&gt;
&lt;li&gt;常量：一旦声明在脚本内全局可用，函数内外可用
&lt;/li&gt;
&lt;li&gt;全局变量，脚本内全局可用，但是函数内不可用，可用global关键词
&lt;/li&gt;
&lt;li&gt;函数内静态变量，和C语言相似
&lt;/li&gt;
&lt;li&gt;函数局部变量和C语言相似
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;操作符与控制结构&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;操作符&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;p&gt;
php的运算符基本和c语言类似。有一个===与==这个和js类似，一个类型与值都比较，一个只比较值。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;控制结构&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;p&gt;
php的控制结构与C语言类似，if，switch，while，do…..while循环，for循环，多了一个foreach，foreach是专门用于数组的，break和continue的作用于C类似，还有一个exit可以直接结束php脚本的运行，执行错误检测时exit比较有用。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;php数组&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
php数组是一个强大的数据结构
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;数组定义&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;$arr = array（’a’, ‘b’, ‘c’）
&lt;/li&gt;
&lt;li&gt;$arr = array(‘first’=&amp;gt;’a‘，‘second’ =&amp;gt; ‘b’, ‘third’ =&amp;gt;’c’),
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
前一种的索引是0,1,2后者的索引是’first’,’second’,’third’，后一种方式和python的字典差不多。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;循环访问&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;foreach循环：foreach（$arr as $value）,
        foreach($arr as $key=&amp;gt;$value),
前一种方式只获得value，后一种获得key，value,foreach每次在运行之前都会将数组指针自动重置到数组开头，所以不需要使用reset函数。
&lt;/li&gt;
&lt;li&gt;while(list($key, $value) = each($arr))，
each：返回数组中当前的 键／值对并将数组指针向前移动一步，each返回的也是一个数组，list会将数组中索引为0,1,2…….对应的值依次赋给list的参数，注意索引只能是数字，不能是字符串，list的作用就是将数组的值赋给list指定的变量，注意：数组对应的key必须是0,1,2,3…………….,这种循环方式需要使用reset函数
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-3-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-3&quot;&gt;数组排序（原地改变数组）&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;sort（对普通数组排序 ，不要应用于字典数组，因为它返回的排序数组会抹掉原字典数组的key，而将它的key变为0,1,2……）
&lt;/li&gt;
&lt;li&gt;asort（对字典数组的value排序）
&lt;/li&gt;
&lt;li&gt;ksort（对字典数组的key排序），
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
对应的反向（降序）排序rsort，arsort，krsort。Shuffle（随机排序），array&lt;sub&gt;reverse（反向排列）&lt;/sub&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-3-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-4&quot;&gt;其它数组函数&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-4&quot;&gt;
&lt;p&gt;
current（当前数组内部指针指向的元素，pos是current的别名）
next（下一个元素的值）
prev（前一个元素的值）
end（内部指针重置到数组末尾，并返回末尾元素的值）
reset（内部指针重置到开头，并返回开头元素的值
array&lt;sub&gt;walk（对数组的每个元素应用一个自定义函数，如果要改变数组本身，则自定义函数，必须传引用）&lt;/sub&gt;
count，sizeof（都返回数组的元素个数）
array&lt;sub&gt;count&lt;/sub&gt;&lt;sub&gt;values（返回数组元素中各个值出现的频率）&lt;/sub&gt;
extract（创建一系列以数组的key为名称的变量，而且这些变量的值是对应的value）。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;字符串处理函数&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
不原地改变，而是返回一个新的结果字符串
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-4-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-1&quot;&gt;常规字符串处理函数&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;trim(ltrim,rtrim(别名chop)：删除字符串的首尾两端的空格。ltrim只删除开头的空格，rtrim只删除结尾的空格。
&lt;/li&gt;
&lt;li&gt;nl2br: 将字符串中的\n转换为,&amp;lt;br /&amp;gt;标签，这样可以在html中换行。
&lt;/li&gt;
&lt;li&gt;printf,sprintf:格式化输出。
&lt;/li&gt;
&lt;li&gt;strtolower（全部小写）,strtoupper（全部大写）,ucfirst（第一个字母大写）,ucwords（所有词的第一个字母大写）。
&lt;/li&gt;
&lt;li&gt;addslashes，stripslashes:将引号，反斜杠，NULL字符字符转义，以免在存入数据库时被当做控制字符，前者是添加，后者是删除，前者在存入数据库前调用，后者在从数据库取出数据后调用。
&lt;/li&gt;
&lt;li&gt;explode，implode（join）：前者分割字符串成数组，后者将数组合成字符串，都需要知道分隔符，join是implode的别名。
&lt;/li&gt;
&lt;li&gt;strtok：一次只会返回分割得到的一个字符串，而不是像explode那样返回数组
&lt;/li&gt;
&lt;li&gt;substr：指定开始与结尾来得到一个指定字符串的子字符串。
&lt;/li&gt;
&lt;li&gt;字符串的比较：strcmp，strcasecmp（前者区分大小写，后者不区分，是字典序比较，故‘2‘&amp;gt;’12’）,strnatcmp,strnatcasecmp(按自然序比较，故’12’&amp;gt;’2’).
&lt;/li&gt;
&lt;li&gt;strlen：字符串的长度。
&lt;/li&gt;
&lt;li&gt;查找子字符串：strstr（strchr 是strstr的别名，strstr区分大小写，stristr不区分大小写,都返回子字符串第一次出现的位置到结尾形成的字符串），strrchr(返回子字符串最后一次出现的位置到结尾形成的字符串)
&lt;/li&gt;
&lt;li&gt;查找子字符串的位置：strpos，strrpos
&lt;/li&gt;
&lt;li&gt;替换子字符串：str\&lt;sub&gt;replace，substr\&lt;/sub&gt;&lt;sub&gt;replace&lt;/sub&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-2&quot;&gt;正则表达式函数&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;ereg（eregi不区分大小写）：搜索一个匹配，可以使用子模式。
&lt;/li&gt;
&lt;li&gt;ereg\&lt;sub&gt;replace&lt;/sub&gt;,eregi\&lt;sub&gt;replace：替换&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;split：用指定的模式将字符串分割为一个数组

&lt;p&gt;
&lt;b&gt;以上的函数是POSIX正则表达式，而php5.3被废弃，全部采用perl兼容的正则表达式，主要函数如下：&lt;/b&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Preg\&lt;sub&gt;match&lt;/sub&gt;:搜索给定模式的一个匹配，可以将该匹配按子模式分割成数组返回，其中【0】是完整的匹配，【1】是第一个子模式的匹配，以此类推。
&lt;/li&gt;
&lt;li&gt;Preg\&lt;sub&gt;match\&lt;/sub&gt;&lt;sub&gt;all：搜索所有给定模式的匹配，返回一个多维数组，该多维数组会包含所有的完整匹配以及子模式匹配，数组的组织形式由flag参数指定。&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Preg\&lt;sub&gt;grep&lt;/sub&gt;:搜索一个给定的数组
&lt;/li&gt;
&lt;li&gt;Preg\&lt;sub&gt;replace&lt;/sub&gt;:替换。
&lt;/li&gt;
&lt;li&gt;Preg\&lt;sub&gt;split&lt;/sub&gt;:分割为数组。
Perl正则表达式和POSISX表达式的区别：perl正则表达式的模式需要分隔符，分隔符放在pattern的开头和结尾，可以使/,#,~等，没有专门为区分大小写编写对应的函数，而是使用模式修饰符，模式修饰符放在pattern的分隔符的后面，主要有i（不区分大小写）s（点号匹配换行符）U逆转贪婪模式，perl从第一个合法匹配后停止，而且是贪婪模式。
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;文件&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;Fopen：打开文件，为了移植性模式应该加上b。可以打开网络上的远程文件。
&lt;/li&gt;
&lt;li&gt;Fwrite（fputs是fwrite的别名）：写文件
&lt;/li&gt;
&lt;li&gt;File\&lt;sub&gt;put\&lt;/sub&gt;&lt;sub&gt;contents&lt;/sub&gt;:可以在不使用fopen的情况下写入文件
&lt;/li&gt;
&lt;li&gt;Fgets,fgetss,fgetcsv:读取文件的一行数据，fgetss会去掉读出的行中的php与html标签，fgetcsv可以将读出的行分割为数组返回。
&lt;/li&gt;
&lt;li&gt;Readfile，file，fpassthru：读取整个文件。Readfile是向标准输出显示，file是读入一个数组。
&lt;/li&gt;
&lt;li&gt;Fgetc：读入一个字符，会显示EOF结束符，所以需要检查。
&lt;/li&gt;
&lt;li&gt;Fread：读入任意字节的字符串。
&lt;/li&gt;
&lt;li&gt;File\&lt;sub&gt;get\&lt;/sub&gt;&lt;sub&gt;contents：在不使用fopen的情况下直接从文件读。&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;File\&lt;sub&gt;exists：文件是否存在。&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Filesize：文件的大小。
&lt;/li&gt;
&lt;li&gt;Unlink：删除文件。
&lt;/li&gt;
&lt;li&gt;Rewind，fseek，ftell：rewind复位到文件开头，fseek文件中定位，ftell目前文件指针的位置。
&lt;/li&gt;
&lt;li&gt;Flock：文件锁定。
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;function&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-6-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-1&quot;&gt;定义&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-1&quot;&gt;
&lt;p&gt;
function  func&lt;sub&gt;name&lt;/sub&gt;($a, $b….)
{ your code }
可以使用默认参数，方法是在形参后加=，eg：上例 $b = 1
函数使用return和C语言类似
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-7&quot;&gt;OOP&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-7&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-php&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; $&lt;span style=&quot;color: #FD971F;&quot;&gt;attribute1&lt;/span&gt;; &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;这个类实例的属性，不是类本身的属性，不要和python弄混了。默认公有&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;public&lt;/span&gt; $&lt;span style=&quot;color: #FD971F;&quot;&gt;attribute2&lt;/span&gt;;&lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;指定public，private后最好省掉var&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;private&lt;/span&gt; $&lt;span style=&quot;color: #FD971F;&quot;&gt;attribute3&lt;/span&gt; = &lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;2&lt;/span&gt;;&lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;可以直接赋值，不一定要在构造函数中&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;protected&lt;/span&gt; $&lt;span style=&quot;color: #FD971F;&quot;&gt;attribute4&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #968B26; font-weight: bold;&quot;&gt;my_static&lt;/span&gt; = &lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;5&lt;/span&gt;; &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;静态变量也是类变量，类外部访问&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;   &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;A::my_static; 类内部访问：parent::my_static,self::my_static&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__construct&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;param&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;   {&lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;构造函数&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;   $&lt;span style=&quot;color: #AE81FF;&quot;&gt;this&lt;/span&gt; -&lt;span style=&quot;color: #AE81FF;&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #968B26; font-weight: bold;&quot;&gt;attribute1&lt;/span&gt; = $&lt;span style=&quot;color: #FD971F;&quot;&gt;param&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt;16: &lt;/span&gt;   }
&lt;span class=&quot;linenr&quot;&gt;17: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__destruct&lt;/span&gt;()
&lt;span class=&quot;linenr&quot;&gt;18: &lt;/span&gt;   {&lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;析构函数&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;19: &lt;/span&gt;   }
&lt;span class=&quot;linenr&quot;&gt;20: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__get&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;name&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt;21: &lt;/span&gt;   {&lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;可以拦截$obj-&amp;gt;$name这种对类实例的属性直接访问的语句。&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;22: &lt;/span&gt;   &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;只有在$name属性没有定义时才会触发,这意味着当属性是&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;23: &lt;/span&gt;    &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;私有或者保护时也会触发&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;24: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; $&lt;span style=&quot;color: #AE81FF;&quot;&gt;this&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;name&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt;25: &lt;/span&gt;   }
&lt;span class=&quot;linenr&quot;&gt;26: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__set&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;name&lt;/span&gt;, $&lt;span style=&quot;color: #FD971F;&quot;&gt;value&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt;27: &lt;/span&gt;   {&lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;可以拦截$obj-&amp;gt;$name这种对类实例的属性的值直接赋值的语句。&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;28: &lt;/span&gt;   &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;只有在$name属性没有定义时才会触发,这意味着当属性是&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;29: &lt;/span&gt;    &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;私有或者保护时也会触发&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;30: &lt;/span&gt;   $&lt;span style=&quot;color: #AE81FF;&quot;&gt;this&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;name&lt;/span&gt; = $&lt;span style=&quot;color: #FD971F;&quot;&gt;value&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt;31: &lt;/span&gt;   }
&lt;span class=&quot;linenr&quot;&gt;32: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;operation1&lt;/span&gt;()
&lt;span class=&quot;linenr&quot;&gt;33: &lt;/span&gt;   {
&lt;span class=&quot;linenr&quot;&gt;34: &lt;/span&gt;   }
&lt;span class=&quot;linenr&quot;&gt;35: &lt;/span&gt;}
&lt;span class=&quot;linenr&quot;&gt;36: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;B&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;extends&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;37: &lt;/span&gt;{&lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;继承都是类似于C++的公有继承&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;38: &lt;/span&gt; &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;可以重载子类的属性与成员方法&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;39: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__construct&lt;/span&gt;()
&lt;span class=&quot;linenr&quot;&gt;40: &lt;/span&gt;   {
&lt;span class=&quot;linenr&quot;&gt;41: &lt;/span&gt;   &lt;span style=&quot;color: #AE81FF;&quot;&gt;parent&lt;/span&gt;::&lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;__construct&lt;/span&gt;();&lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;执行父类的构造函数&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;42: &lt;/span&gt;   }
&lt;span class=&quot;linenr&quot;&gt;43: &lt;/span&gt;}
&lt;span class=&quot;linenr&quot;&gt;44: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;45: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;Interface&lt;/span&gt; (&lt;span style=&quot;color: #968B26; font-weight: bold;&quot;&gt;接口&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt;46: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;interface&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;iTemplate&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;47: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt;48: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;setVariable&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;name&lt;/span&gt;, $&lt;span style=&quot;color: #FD971F;&quot;&gt;var&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt;49: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;getHtml&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;template&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt;50: &lt;/span&gt;}
&lt;span class=&quot;linenr&quot;&gt;51: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;52: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Template&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;implements&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;iTemplate&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;53: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt;54: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;private&lt;/span&gt; $&lt;span style=&quot;color: #FD971F;&quot;&gt;vars&lt;/span&gt; = &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;array&lt;/span&gt;();
&lt;span class=&quot;linenr&quot;&gt;55: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;56: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;setVariable&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;name&lt;/span&gt;, $&lt;span style=&quot;color: #FD971F;&quot;&gt;var&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt;57: &lt;/span&gt;   {
&lt;span class=&quot;linenr&quot;&gt;58: &lt;/span&gt;       $&lt;span style=&quot;color: #AE81FF;&quot;&gt;this&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;vars&lt;/span&gt;[$&lt;span style=&quot;color: #FD971F;&quot;&gt;name&lt;/span&gt;] = $&lt;span style=&quot;color: #FD971F;&quot;&gt;var&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt;59: &lt;/span&gt;   }
&lt;span class=&quot;linenr&quot;&gt;60: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;61: &lt;/span&gt;   &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;getHtml&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;template&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt;62: &lt;/span&gt;   {
&lt;span class=&quot;linenr&quot;&gt;63: &lt;/span&gt;       &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;foreach&lt;/span&gt;($&lt;span style=&quot;color: #AE81FF;&quot;&gt;this&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;vars&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;as&lt;/span&gt; $&lt;span style=&quot;color: #FD971F;&quot;&gt;name&lt;/span&gt; =&amp;gt; $&lt;span style=&quot;color: #FD971F;&quot;&gt;value&lt;/span&gt;) {
&lt;span class=&quot;linenr&quot;&gt;64: &lt;/span&gt;           $&lt;span style=&quot;color: #FD971F;&quot;&gt;template&lt;/span&gt; = &lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;str_replace&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;{&#39;&lt;/span&gt; . $&lt;span style=&quot;color: #FD971F;&quot;&gt;name&lt;/span&gt; . &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;}&#39;&lt;/span&gt;, $&lt;span style=&quot;color: #FD971F;&quot;&gt;value&lt;/span&gt;, $&lt;span style=&quot;color: #FD971F;&quot;&gt;template&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt;65: &lt;/span&gt;       }
&lt;span class=&quot;linenr&quot;&gt;66: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;67: &lt;/span&gt;       &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; $&lt;span style=&quot;color: #FD971F;&quot;&gt;template&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt;68: &lt;/span&gt;   }
&lt;span class=&quot;linenr&quot;&gt;69: &lt;/span&gt;}
&lt;span class=&quot;linenr&quot;&gt;70: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;71: &lt;/span&gt;$&lt;span style=&quot;color: #FD971F;&quot;&gt;object&lt;/span&gt; = &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;A&lt;/span&gt;() &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;实例化类&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;72: &lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-8&quot;&gt;php与数据库（mysql）&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-8&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-8-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-8-1&quot;&gt;示例代码&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-8-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-php&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;面向过程的代码&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;$&lt;span style=&quot;color: #FD971F;&quot;&gt;db&lt;/span&gt; = &lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;mysqli_connect&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;example.com&quot;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;user&quot;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;password&quot;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;database&quot;&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;mysqli_connect_errno&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;db&lt;/span&gt;)) {
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Failed to connect to MySQL: &quot;&lt;/span&gt; . &lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;mysqli_connect_error&lt;/span&gt;();
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;}
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;$&lt;span style=&quot;color: #FD971F;&quot;&gt;res&lt;/span&gt; = &lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;mysqli_query&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;db&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;SELECT &#39;A world full of &#39; AS _msg FROM DUAL&quot;&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;$&lt;span style=&quot;color: #FD971F;&quot;&gt;row&lt;/span&gt; = &lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;mysqli_fetch_assoc&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;res&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;echo&lt;/span&gt; $&lt;span style=&quot;color: #FD971F;&quot;&gt;row&lt;/span&gt;[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;_msg&#39;&lt;/span&gt;];
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;面向对象的代码&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;$&lt;span style=&quot;color: #FD971F;&quot;&gt;db&lt;/span&gt; = &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;mysqli&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;example.com&quot;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;user&quot;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;password&quot;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;database&quot;&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt;16: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; ($&lt;span style=&quot;color: #FD971F;&quot;&gt;db&lt;/span&gt;-&lt;span style=&quot;color: #AE81FF;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;connect_errno&lt;/span&gt;) {
&lt;span class=&quot;linenr&quot;&gt;17: &lt;/span&gt;    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;echo&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Failed to connect to MySQL: &quot;&lt;/span&gt; . $&lt;span style=&quot;color: #FD971F;&quot;&gt;db&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;connect_error&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt;18: &lt;/span&gt;}
&lt;span class=&quot;linenr&quot;&gt;19: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;20: &lt;/span&gt;$&lt;span style=&quot;color: #FD971F;&quot;&gt;res&lt;/span&gt; = $&lt;span style=&quot;color: #FD971F;&quot;&gt;db&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;query&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;SELECT &#39;choices to please everybody,&#39; AS _msg FROM DUAL&quot;&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt;21: &lt;/span&gt;$&lt;span style=&quot;color: #FD971F;&quot;&gt;num_results&lt;/span&gt; = $&lt;span style=&quot;color: #FD971F;&quot;&gt;res&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;num_rows&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt;22: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;for&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt; = &lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;0&lt;/span&gt;;$&lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt; &amp;lt; $&lt;span style=&quot;color: #FD971F;&quot;&gt;num_result&lt;/span&gt;; $&lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt;++)
&lt;span class=&quot;linenr&quot;&gt;23: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt;24: &lt;/span&gt;$&lt;span style=&quot;color: #FD971F;&quot;&gt;row&lt;/span&gt; = $&lt;span style=&quot;color: #FD971F;&quot;&gt;res&lt;/span&gt;-&lt;span style=&quot;color: #AE81FF;&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;fetch_assoc&lt;/span&gt;();
&lt;span class=&quot;linenr&quot;&gt;25: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;echo&lt;/span&gt; $&lt;span style=&quot;color: #FD971F;&quot;&gt;row&lt;/span&gt;[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;_msg&#39;&lt;/span&gt;];
&lt;span class=&quot;linenr&quot;&gt;26: &lt;/span&gt;}
&lt;span class=&quot;linenr&quot;&gt;27: &lt;/span&gt;$&lt;span style=&quot;color: #FD971F;&quot;&gt;res&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;free&lt;/span&gt;();
&lt;span class=&quot;linenr&quot;&gt;28: &lt;/span&gt;$&lt;span style=&quot;color: #FD971F;&quot;&gt;db&lt;/span&gt;-&amp;gt;&lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;close&lt;/span&gt;();
&lt;span class=&quot;linenr&quot;&gt;29: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;30: &lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
为了防止SQL注入攻击，应该对用户的输入使用mysqli\&lt;sub&gt;real\&lt;/sub&gt;&lt;sub&gt;escape\&lt;/sub&gt;&lt;sub&gt;string函数，他会将输入的引号等特殊字符转义，不建议使用addslashes&lt;/sub&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-9&quot;&gt;MySQL&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-9&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-9-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-9-1&quot;&gt;数据库设计的三大范式：&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-9-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;第一范式：字段不可分，
&lt;/li&gt;
&lt;li&gt;第二范式：有主键，非主键字段要依赖主键字段
只要数据列里面的内容出现重复，就意味着应该将表拆分，拆分形成的表必须用外键关联起来。
&lt;/li&gt;
&lt;li&gt;第三范式：非主键字段不能相互依赖，也就是说表中的每一列必须与主键直接相关而不能间接相关。
与主键没有直接关系的数据列必须清除（创建一个表来存放他们）。
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-9-2&quot;&gt;数据库的常用模式&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-9-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-9-2-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-2-1&quot;&gt;主扩展模式&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-9-2-1&quot;&gt;
&lt;p&gt;
比如说公司有不同类型的员工，如设计师，程序员，PM等，那么可以先建一个员
工表，这个表存放所有类型的员工都有的属性，如姓名，性别，入职时间等等等，
然后在设计师一个表，程序员一个表，PM一个表，但是这些表都与员工表关联
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9-2-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-2-2&quot;&gt;主从模式&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-9-2-2&quot;&gt;
&lt;p&gt;
一张表的一条记录对应另一张表的多条记录。也就是一对多
eg：论坛的板块表与帖子表就是这种关系，而帖子表与回复表也是这种关系
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9-2-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-2-3&quot;&gt;名值模式&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-9-2-4&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-2-4&quot;&gt;多对多模式&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-9-2-4&quot;&gt;
&lt;p&gt;
一本书可以有多个作者，一个作者也可以写多本书，所以书目信息表与作者信息
表就是多对多关系，那么设计时通常是在加入一个关联表，也就是通过3个表来
表示这种关系
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-9-3&quot;&gt;常用的SQL代码&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-9-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-9-3-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-3-1&quot;&gt;登录&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-9-3-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;mysql –h hostname –u username –p password.
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9-3-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-3-2&quot;&gt;增加新用户&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-9-3-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;grant 权限 on 数据库.* to 用户名称@登陆主机  identified 密码
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sql&quot;&gt;grant select, insert, update, delete
on books.*
to user identified by &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;1234&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-9-3-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-3-3&quot;&gt;Select&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-9-3-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;select  列1,列2  from  表名
&lt;/li&gt;
&lt;li&gt;Select  表1.列1，表2. 列2  from  表1， 表2（多张表中选取）
&lt;/li&gt;
&lt;li&gt;select  *  from  表名
&lt;/li&gt;
&lt;li&gt;select  distinct  列2   from  表名
&lt;/li&gt;
&lt;li&gt;select  列1,列2  from  表名  order by  列 （后可加ASC，DESC（逆序））
&lt;/li&gt;
&lt;li&gt;select  列  from 表名称  limit  数值  （限制返回的结果集的行数）
&lt;/li&gt;
&lt;li&gt;select  列  from  表名称  where  列  in （value1，value2…….）
&lt;/li&gt;
&lt;li&gt;select  列   into   表1   from   表名  where子句（从一个表选取插入另一个表，可用于备份）
&lt;/li&gt;
&lt;li&gt;select  *   into   表1   from   表名  where子句
&lt;/li&gt;

&lt;li&gt;select  列名称  from 表名 where 列名 运算符 值 （可以加and与
（运算符：&amp;gt;,&amp;gt;=,&amp;lt;,&amp;lt;=,=,&amp;lt;&amp;gt;,between
    （类似between value1 and value2）,like.其中like支持通配符，通配符如下：
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9-3-4&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-3-4&quot;&gt;insert&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-9-3-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;insert  表名  values（值1，值2，值3………….）
&lt;/li&gt;
&lt;li&gt;insert  表名 (列1，列2……….)  values （值1，值2………….）
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9-3-5&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-3-5&quot;&gt;update&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-9-3-5&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;update 表名称set 列名称=新值  where 列名称=某值
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9-3-6&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-3-6&quot;&gt;delete（删除行）&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-9-3-6&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;delete  from 表名称 where  列名称=值
&lt;/li&gt;
&lt;li&gt;delete from  表名称    (删除所有行，但是保留表)
&lt;/li&gt;
&lt;li&gt;delete * from 表名称   (删除所有行，但是保留表)
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9-3-7&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-3-7&quot;&gt;create database&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-9-3-7&quot;&gt;
&lt;p&gt;
create database 数据库名;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9-3-8&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-3-8&quot;&gt;create  table&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-9-3-8&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
create  table  表名&lt;br /&gt;
(&lt;br /&gt;
列名称1   数据类型，&lt;br /&gt;
列名称2   数据类型，&lt;br /&gt;
…………&lt;br /&gt;
)&lt;br /&gt;
约束：NOT  NULL&lt;br /&gt;
     Primary key：主键，不用在指定unique。&lt;br /&gt;
     Unique：字段必须唯一。&lt;br /&gt;
     Foreign key:外键&lt;br /&gt;
     Check：值范围，eg：check（Id&amp;gt;0）.&lt;br /&gt;
     Default: 默认值，default ‘yangyu’。&lt;br /&gt;
     Auto&lt;sub&gt;increment：通常对主键。&lt;/sub&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-9-3-9&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-3-9&quot;&gt;Index&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-9-3-9&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;Create  index：create  index  索引名 on  表名 （列名）
&lt;/li&gt;
&lt;li&gt;Drop   index ： drop index  索引名  on 表名
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9-3-10&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-3-10&quot;&gt;Drop&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-9-3-10&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;Drop  table  ： drop table 表名
&lt;/li&gt;
&lt;li&gt;Drop  database ：drop database 数据库名
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9-3-11&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-3-11&quot;&gt;Alert&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-9-3-11&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;Alert  table ：alert  table  表名  add  列名  数据类型
&lt;/li&gt;
&lt;li&gt;alert  table 表名  drop  column 列名
&lt;/li&gt;
&lt;li&gt;alert  table  表名  alert  column 列名 数据类型
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9-3-12&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-9-3-12&quot;&gt;从文件创建：mysql –u root &amp;lt;file.sql&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1-10&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-10&quot;&gt;其它技巧&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-10&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;对字符串可以使用单，双引号的场合尽量使用单引号，因为使用双引号效率不高。
&lt;/li&gt;
&lt;li&gt;对于一个没有设置的变量直接用if会有错误，因此应该使用isset或者empty检查，推荐empty。
&lt;/li&gt;
&lt;li&gt;Show&lt;sub&gt;source函数可以高亮显示程序代码。&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;密码加密推荐使用crypt函数的blowfish算法，不推荐使用sha1,或者md5.
&lt;/li&gt;
&lt;li&gt;生成一个唯一的字符串：uniqid函数。
&lt;/li&gt;
&lt;li&gt;对于表单，在点击提交按钮之前$&lt;sub&gt;POST中的索引是不存在的，所以这样调用&lt;/sub&gt;$&lt;sub&gt;POST[‘name’]试图获得name输入框的值会报错，因为‘name’索引不存在。这时调用isset和empty返回false与true，如果点击了提交按钮，但是用户没有在输入框中输入任何数据，那么&lt;/sub&gt;$&lt;sub&gt;POST[‘name’]的值是空字符串，这时调用isset会返回true，所以最好调用empty函数。&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;尽量使用字符串处理函数，而不要使用正则表达式，因为前者更快。
&lt;/li&gt;
&lt;li&gt;_&lt;sub&gt;autoload&lt;/sub&gt;($classname)需要自动加载的时候，定义这个函数。
&lt;/li&gt;
&lt;li&gt;每一个成功的POST页面都应该重定向，因为如果不重定向，那么刷新该页面会造成POST数据重复提交。。
&lt;/li&gt;
&lt;li&gt;函数返回引用时必须在定义与调用的时候都加上&amp;amp;，但是return语句不用
加&amp;amp;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-php&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;add_some_extra&lt;/span&gt;(&amp;amp;$&lt;span style=&quot;color: #FD971F;&quot;&gt;string&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;    $&lt;span style=&quot;color: #FD971F;&quot;&gt;string&lt;/span&gt; .= &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;and something extra.&#39;&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;}
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;$&lt;span style=&quot;color: #FD971F;&quot;&gt;str&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;This is a string,&#39;&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;&lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;add_some_extra&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;str&lt;/span&gt;);
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;echo&lt;/span&gt; $&lt;span style=&quot;color: #FD971F;&quot;&gt;str&lt;/span&gt;;    &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;outputs &#39;This is a string, and something extra.&#39;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt; &amp;amp;&lt;span style=&quot;color: #A6E22E;&quot;&gt;returns_reference&lt;/span&gt;()
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;{
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; $&lt;span style=&quot;color: #FD971F;&quot;&gt;someref&lt;/span&gt;;
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;}
&lt;span class=&quot;linenr&quot;&gt;16: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;17: &lt;/span&gt;$&lt;span style=&quot;color: #FD971F;&quot;&gt;newref&lt;/span&gt; =&amp;amp; &lt;span style=&quot;color: #F8F8F2; background-color: #272822;&quot;&gt;returns_reference&lt;/span&gt;();
&lt;span class=&quot;linenr&quot;&gt;18: &lt;/span&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>set-theory.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/set-theory.html"/>
    <title>SET THEORY(30%)</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;SET THEORY(30%)&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;Set Theory&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;总体把握&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;朴素集合论（直觉上）：康托儿创立&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;罗素悖论（理发师悖论）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;公理化集合论&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-3-1&quot;&gt;外延公理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3-2&quot;&gt;空集公理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3-3&quot;&gt;子集公理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3-4&quot;&gt;偶集公理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3-5&quot;&gt;并集公理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3-6&quot;&gt;幂集公理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Set Theory&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;总体把握&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
朴素集合论（康托儿）-—&amp;gt;罗素悖论–—&amp;gt;公理化集合论
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;朴素集合论（直觉上）：康托儿创立&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;p&gt;
几个基本概念：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;基数（势）：可以理解为大小
&lt;/li&gt;
&lt;li&gt;一一对应：比较两个集合的大小时，如果两个集合能一一对应，那么这两
个集合基数相同或等势，均势
&lt;/li&gt;
&lt;li&gt;可数无穷大（可列无穷大）：如果一个集合和自然数集一一对应，那么这
个集合就是可数，或者可列的，因为可以像数数（1 2 3 …)
一样列出来,所以所有的非负偶数集都是可数的，而实数集是不
可数的（対角线法证明）
&lt;/li&gt;
&lt;li&gt;対角线法：对于（0，1）之间的实数，先假设所有的实数都列出来了，那
么构造一个实数使它与上面的每一个数都不同就能推出矛盾，
够造的方法是使対角线上的数位不同。
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
朴素集合论的问题：
按照朴素集合论的观点，只要能够给出一个确切的条件P(x)，那么就能定义
             一个集合(any collection definable is a set),但是事实上
             这是不成立的，罗素悖论就是一个例子，公理化集合论的好处
             通过一系列的公理可以推出哪些集合存在，哪些集合不存在，
             这样就可以避开那些悖论
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;罗素悖论（理发师悖论）&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
一个理发师声称给城里不刮胡子的人刮胡子，而且也只给这些不刮胡子的人刮，
那么理发师该不该给自己刮胡子。
any collection definable is a set
数学表述：
    P表示所有不包含自身的集合的集合（也就是所有不自吞的集合所组成的集
    合），那么P是否属于自己呢（也就是P是否自吞呢）。这是一个悖论，因为
    如果P属于P，那么P是自吞的，而根据P的性质，P只包含不自吞的集合，所
    以最后 P==&amp;gt;非P，非P==&amp;gt;P.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;公理化集合论&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;p&gt;
不定义什么是集合，而是通过一些公理来描述集合的性质，通过这些公理来推导，
这些公理都是小心设计，所以避开了罗素悖论。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-3-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-3-1&quot;&gt;外延公理&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-3-1&quot;&gt;
&lt;p&gt;
判断2个集合是否相等
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-3-2&quot;&gt;空集公理&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-3-2&quot;&gt;
&lt;p&gt;
存在一个唯一的空集
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-3-3&quot;&gt;子集公理&lt;/h5&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3-4&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-3-4&quot;&gt;偶集公理&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-3-5&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-3-5&quot;&gt;并集公理&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-3-6&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-3-6&quot;&gt;幂集公理&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-3-6&quot;&gt;
&lt;p&gt;
对于集合A，存在一个集合B，恰好以A的一切子集为元素
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>css.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/css.html"/>
    <title>css笔记</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;css笔记&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;CSS&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;基本语法&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;三种引用css的方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;优先级&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;css selector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-4&quot;&gt;css box&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-4-1&quot;&gt;margin的负值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-4-2&quot;&gt;margin相关的一些trick&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-5&quot;&gt;css定位&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;css的常用属性&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-2-1&quot;&gt;foreground color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2&quot;&gt;background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-3&quot;&gt;列表相关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-4&quot;&gt;字体相关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-5&quot;&gt;段落样式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-6&quot;&gt;链接样式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;css编写的一些规则&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-3-1&quot;&gt;id的使用场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2&quot;&gt;class的使用场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-3&quot;&gt;命名&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;html5与css3&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-2-1&quot;&gt;css3的主要属性&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-2-1-1&quot;&gt;css3边框&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-2-1-1-1&quot;&gt;border-radius ===&amp;gt; 圆角&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1-1-2&quot;&gt;box-shadow  ===&amp;gt; 添加阴影&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1-1-3&quot;&gt;border-image ===&amp;gt; 边框图片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1-2&quot;&gt;css3背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1-3&quot;&gt;css3文本效果&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-2-1-3-1&quot;&gt;text-shadow ===&amp;gt; 文本阴影&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1-3-2&quot;&gt;word-wrap ===&amp;gt; 可以对太长的单词进行换行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1-4&quot;&gt;transform ===&amp;gt; 2D，3D转换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-1-5&quot;&gt;transition (IE9及以下版本无效)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;sass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;CSS&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
css:层叠样式表,是指定网页元素显示方式的一种方法
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;基本语法&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;三种引用css的方法&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;外部样式表 &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;--&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;link&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;rel&lt;/span&gt;=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;href&lt;/span&gt;=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;/static/css/your.css&quot;&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;media&lt;/span&gt;=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;screen&quot;&lt;/span&gt; /&amp;gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;内部样式表 &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;--&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;style&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;media&lt;/span&gt;=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;screen&quot;&lt;/span&gt;&amp;gt;
  p {
  color:&lt;span style=&quot;color: #ffffff; background-color: #FF0000;&quot;&gt;red&lt;/span&gt;;
  font-size:12px;
  }
&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;style&lt;/span&gt;&amp;gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;行内样式表 &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;--&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;style&lt;/span&gt;=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;color: &lt;/span&gt;&lt;span style=&quot;color: #ffffff; background-color: #FF0000;&quot;&gt;red&lt;/span&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;; font-size: 12px;&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;p&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;优先级&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;行内样式表优先于内部样式表,优先于外部样式表
&lt;/li&gt;
&lt;li&gt;id选择符优先与class选择符优先于标签选择符
&lt;/li&gt;
&lt;li&gt;!important: 是样式不被覆盖
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;css selector&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;p &lt;/span&gt;{&lt;span style=&quot;color: #FD971F;&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;color: #ffffff; background-color: #FF0000;&quot;&gt;red&lt;/span&gt;;}                 &lt;span style=&quot;color: #75715E;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;tag selector&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;body, ul, ol &lt;/span&gt;{}                 &lt;span style=&quot;color: #75715E;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;body,ul,ol标签, 有逗号就意味着平等&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;

&lt;span style=&quot;color: #A6E22E;&quot;&gt;#nav &lt;/span&gt;{&lt;span style=&quot;color: #FD971F;&quot;&gt;font-size&lt;/span&gt;: 12px;}         &lt;span style=&quot;color: #75715E;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;id selector&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;.sidebar &lt;/span&gt;{&lt;span style=&quot;color: #FD971F;&quot;&gt;font-family&lt;/span&gt;:Times}    &lt;span style=&quot;color: #75715E;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;class selector&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;

&lt;span style=&quot;color: #A6E22E;&quot;&gt;h1#content &lt;/span&gt;{}                       &lt;span style=&quot;color: #75715E;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;id为content的h1标签&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;h1.&lt;/span&gt;&lt;span style=&quot;color: #ffffff; background-color: #0000FF;&quot;&gt;blue&lt;/span&gt;{}                           &lt;span style=&quot;color: #75715E;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;class为&lt;/span&gt;&lt;span style=&quot;color: #ffffff; background-color: #0000FF;&quot;&gt;blue&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;的h1标签&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;

&lt;span style=&quot;color: #A6E22E;&quot;&gt;li a &lt;/span&gt;{&lt;span style=&quot;color: #FD971F;&quot;&gt;text-decoration&lt;/span&gt;: none;}   &lt;span style=&quot;color: #75715E;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;descendant selector&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;li &amp;gt; a&lt;/span&gt;{&lt;span style=&quot;color: #FD971F;&quot;&gt;text-decoration&lt;/span&gt;: none;}  &lt;span style=&quot;color: #75715E;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;和li a 的区别是这个只选择直接子节点&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;li #content&lt;/span&gt;{}                   &lt;span style=&quot;color: #75715E;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;li下所有id为content的标签&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;li .&lt;/span&gt;&lt;span style=&quot;color: #ffffff; background-color: #0000FF;&quot;&gt;blue&lt;/span&gt;{}

&lt;span style=&quot;color: #FD971F;&quot;&gt;a&lt;/span&gt;:link {&lt;span style=&quot;color: #FD971F;&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;color: #ffffff; background-color: #FF0000;&quot;&gt;red&lt;/span&gt;}             &lt;span style=&quot;color: #75715E;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;pseudo-class selector&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;a[title] &lt;/span&gt;{&lt;span style=&quot;color: #FD971F;&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;color: #ffffff; background-color: #FF0000;&quot;&gt;red&lt;/span&gt;}           &lt;span style=&quot;color: #75715E;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;attribute selector 所有有title属性的a节点,不支持ie6及以下浏览器&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;a[href=&lt;/span&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;www.baidu.com&quot;&lt;/span&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;] &lt;/span&gt;{&lt;span style=&quot;color: #FD971F;&quot;&gt;color&lt;/span&gt;:&lt;span style=&quot;color: #ffffff; background-color: #FF0000;&quot;&gt;red&lt;/span&gt;} &lt;span style=&quot;color: #75715E;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;所有href属性等于www.baidu.com的a节点&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-4&quot;&gt;css box&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-4&quot;&gt;
&lt;p&gt;
css的盒子模型：
&lt;img src=&quot;static/img/css-box.png&quot; alt=&quot;css-box.png&quot; /&gt;&lt;b&gt;注意当用width与height来设置块级元素的宽与高时,实际只是设置的content区域的宽与高, margin,border,padding都是
不考虑在内,所以这个宽与高不是元素实际占用的宽与高&lt;/b&gt;
这也就是margin，border，padding三个属性的含义了,这三个属性都有4个值，比如如下代码
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;margin&lt;/span&gt;:25px 50px 75px 100px;

&lt;span style=&quot;color: #FD971F;&quot;&gt;margin-top&lt;/span&gt;: 25px;
&lt;span style=&quot;color: #FD971F;&quot;&gt;margin-right&lt;/span&gt;: 50px;
&lt;span style=&quot;color: #FD971F;&quot;&gt;margin-bottom&lt;/span&gt;: 75px;
&lt;span style=&quot;color: #FD971F;&quot;&gt;margin-left&lt;/span&gt;: 100px;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上述两段代码等价，指定四个值则依次为：上： 25px，右：50px，下：75px，左：100px。(T-R-B-L)
如果指定两个值，那么第一个是上下，第二个为左右，比如
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;margin&lt;/span&gt;: 0px auto;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
那么上下是0px，左右会相等，也就是居中效果
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-4-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-4-1&quot;&gt;margin的负值&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-4-1&quot;&gt;
&lt;p&gt;
这三个属性只有margin可以为负值，padding与border都不可以为负值，几个概念：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;box的物理大小：包括border， padding，content，不考虑margin
&lt;/li&gt;
&lt;li&gt;box的实际大小：考虑margin
&lt;/li&gt;
&lt;li&gt;基准线：margin移动的基准线，
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;top与left是以外元素(也就是紧邻的元素或者是父元素)为基准线，这两个值是用来确定本元素相对于外元素的位
置的，以top为例，大体可以认为 &lt;b&gt;margin-top=本元素border-top的位置 - 外元素的下边界&lt;/b&gt; ，比如margin-top=10px，那么本
元素的border-top的外置就会与外元素相隔10px，如果margin-top=-10px，那么本元素的border-top的位置就会
和外元素相距-10px，也就是说本元素的boerder-top在外元素边界的上方，那么就意味着本元素和外元素发生了
重叠
&lt;/li&gt;
&lt;li&gt;right与bottom是以本元素作为基准线的，这两个值不会改变本元素的位置，但它会改变紧邻的右边或者是下边的
元素的位置，以right为例，可以认为 &lt;b&gt;margin-right = 右边紧邻元素的左边界 - 本元素的border-right的位置&lt;/b&gt; ，因
此如果magin-right=10px，那么右边元素就与本元素的border-right的位置相距10px，视觉上就是右边的紧邻元素
与本元素相距10px（不考虑右边元素的margin），如果margin-right = -10px，那么右边元素的边界就在本元素的
border-right的位置的左边，也就是说，右边元素与本元素发生了重叠
&lt;/li&gt;
&lt;li&gt;box 的实际大小 = box 的物理大小 + 正的 margin， 也就是说负的margin值是不改变box的大小的，因为负的
margin会让本元素与紧邻的元素发生重叠
&lt;/li&gt;
&lt;li&gt;用更通俗的话来解释margin：如果margin为正值的时候，那么行为就和看到的图片中的一样，这里只讨论为负值
的情况：
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;margin-top为负值，那么把本元素向上移动
&lt;/li&gt;
&lt;li&gt;margin-left为负值，那么把本元素向左移动，比如在实现选项卡时，使用margin-left：-1px，可以避免显示
两条边界
&lt;/li&gt;
&lt;li&gt;margin-right为负值，那么将紧邻的右边元素向左移动
&lt;/li&gt;
&lt;li&gt;margin-bottom为负值，那么把紧邻的下边元素向上移动
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-4-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-4-2&quot;&gt;margin相关的一些trick&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-4-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;&lt;b&gt;上下margin叠加问题&lt;/b&gt; ：当两个对象是上下关系，如果都设置了margin，那么两个对象上下间距是两个对象中
margin数值较大的一个，而不是二者的和，这是为了兼顾排版时第一个段落而做的设计，因为如果是和的话，那么第
一个段落的上边距和下面的段落会不一致,注意如果其中任何一个元素使用了浮动,那么上下margin不会叠加
&lt;/li&gt;
&lt;li&gt;IE6 的左右margin加倍
当盒对象为浮动时,IE6的左右margin会自动加倍,可以使用display:inline 来消除这个影响
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-5&quot;&gt;css定位&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-5&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;浮动定位
&lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;verse&quot;&gt;
html文档有一个标准文档流，每一个块级元素（如div）都要单独占一行&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;&lt;img src=&quot;static/img/div-per-line.png&quot; alt=&quot;div-per-line.png&quot; /&gt;&lt;br /&gt;
如果给一个元素添加浮动，那么他就会脱离标准文档流，而悬浮于标准文档流之上:&lt;br /&gt;&lt;img src=&quot;static/img/div-float-23.png&quot; alt=&quot;div-float-23.png&quot; /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;
这是给div2,div3添加左浮动后的效果，因为div2,div3添加了浮动，所以二者脱离标准文档流，
那么div4就会上移，因为div1没有浮动，所以div2在div1的下方（不是div1的右方），div3浮动
所以跟在div2的后面。
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;绝对定位与相对定位(position属性)
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;static: 默认的值
&lt;/li&gt;
&lt;li&gt;absolute:相对于父元素(top, left, right, bottom),绝对定位的元素离开文档流，而飘在文档流的上方，注意绝
对定位的父元素是这样确定的：在该元素的所有父元素中查找，如果找到了设置position(只要不是static, 可以
为absolute，relative，fixed)的元素，那么这个元素就是绝对定位的父元素，如果没有找到那么就是html的body
元素是绝对定位的父元素, absolute与float混用时,float会无效,也就是float对绝对定位的元素无效果
&lt;/li&gt;
&lt;li&gt;fixed: 相对于浏览器窗口
&lt;/li&gt;
&lt;li&gt;relative: 相对于元素的原始位置而言,其原始占位信息依然存在，比如下面的代码：
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;#div-1 &lt;/span&gt;{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;position&lt;/span&gt;:relative;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;top&lt;/span&gt;:20px;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;left&lt;/span&gt;:-40px;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
那么div-1就会相对于原位置向下偏移20px，向左偏移40px(注意负值), 相对定位,如果添加float,那么元素先浮动,然
后根据浮动得到的位置进行相对定位
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;top, right, left, bottom: 这四个属性是用来确定元素的位置， &lt;b&gt;注意top right left bottom属性只对设置了
position(absolute, relative)的对象有效&lt;/b&gt; 这四个属性都可以设置负值，比如top = -10px ，那么元素就是向上
移动10px，如果为正值就向下移动，其它的3个选项依次类推
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;css的常用属性&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;foreground color&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;p &lt;/span&gt;{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;color&lt;/span&gt;:&lt;span style=&quot;color: #ffffff; background-color: #FF0000;&quot;&gt;red&lt;/span&gt;;
}
&lt;span style=&quot;color: #A6E22E;&quot;&gt;body &lt;/span&gt;{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;color&lt;/span&gt;:&lt;span style=&quot;color: #000000; background-color: #32FF00;&quot;&gt;rgb(50, 255, 0)&lt;/span&gt;;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;background&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;p&gt;
依次有以下几个属性:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;background-color: 背景颜色,使用十六进制或者rgb是最好的,不要使用颜色名
&lt;/li&gt;
&lt;li&gt;background-image: 背景图片
&lt;/li&gt;
&lt;li&gt;background-repeat: 图片的平铺方式[repeat, no-repeat, repeat-x, repeat-y],默认是repeat,也就是完全平铺
&lt;/li&gt;
&lt;li&gt;background-attachment: 背景图片的滚动方式[fixed, scroll], scroll是默认值，也就是说默认如果背景图片在
窗口的左上角，那么如何向下滚动页面，那么该背景图片就会跟着左上角的内容消失，如果是fixed，那么背景图片
无论你如何滚动，都会在窗口的左上角,该属性较多的用于body的背景设置，其它元素基本不用
&lt;/li&gt;
&lt;li&gt;background-position: 图片定位方式,分别为x与y坐标,可以是left， right， center，bottom,可以是百分比，也
可是像素值，像素值可以为负值, 当你指定两个像素值(x, y)时，意思就是说，把背景图片的左上角移到(x,y)(注意
浏览器文档左上角的坐标为0,0)，利用负值可以把多个背景图片集合成一张图片,节省http请求次数,也使代码更容易
管理(也就是所谓的css Sprites):
&lt;/li&gt;
&lt;/ol&gt;&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;#content &lt;/span&gt;{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;background-color&lt;/span&gt;:&lt;span style=&quot;color: #000000; background-color: #DCDCDC;&quot;&gt;rgb(220, 220, 220)&lt;/span&gt;;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;background-image&lt;/span&gt;: url(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;sample.png&#39;&lt;/span&gt;);
    &lt;span style=&quot;color: #FD971F;&quot;&gt;background-repeat&lt;/span&gt;:no-repeat;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;background-position&lt;/span&gt;: 20% 20px;
}

&lt;span style=&quot;color: #A6E22E;&quot;&gt;#content &lt;/span&gt;{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;background&lt;/span&gt;: &lt;span style=&quot;color: #000000; background-color: #DCDCDC;&quot;&gt;rgb(220, 220, 220)&lt;/span&gt; url(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;sample.png&#39;&lt;/span&gt;) no-repeat 20% 20px;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
可以用background 来简写,简写时属性依次为:
background: [color] [image] [repeat] [attachment] [position]
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-3&quot;&gt;列表相关&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;list-style: 简写
&lt;/li&gt;
&lt;li&gt;list-style-image：设置图片作为项目符号
&lt;/li&gt;
&lt;li&gt;list-style-position：项目符号的放置位置[inside, outside]
&lt;/li&gt;
&lt;li&gt;list-style-type：设置项目符号的默认样式[none, disc, circle…]
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-4&quot;&gt;字体相关&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;font： 缩写，style|variant|weight|size|line-height|font-family
&lt;/li&gt;
&lt;li&gt;color: 字体颜色(前景色)
&lt;/li&gt;
&lt;li&gt;font-family:
&lt;/li&gt;
&lt;li&gt;font-size: 字体大小，注意em是个相对单位，1.5em是相对于本行的其他文字大小的1.5倍，比使用px有优势，因为如
果你修改了本行其它文字的大小，那么1.5em也会相应的变大
&lt;/li&gt;
&lt;li&gt;font-style:
&lt;/li&gt;
&lt;li&gt;font-weight: [bold, normal], 加粗与不加粗
&lt;/li&gt;
&lt;li&gt;text-decoration: [none, overline(上划线),underline(下划线), line-through(删除线)]
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-5&quot;&gt;段落样式&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-5&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;line-height： 行高 [normal, length]
&lt;/li&gt;
&lt;li&gt;text-indent: 首行文字的缩进[normal, length]
&lt;/li&gt;
&lt;li&gt;text-overflow：当对象中的文字超过对象宽度时可以设置省略号[clip, ellipsis]
&lt;/li&gt;
&lt;li&gt;text-align: 对象中的文本对齐方式[left, right, center, justify]
&lt;/li&gt;
&lt;li&gt;word-break: 当一个单词非常长以至于超过了对象的宽度时如何处理[normal, keep-all, break-all]
&lt;/li&gt;
&lt;li&gt;word-warp: 内容超过元素的宽度时，break-word会换行
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-6&quot;&gt;链接样式&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-6&quot;&gt;
&lt;p&gt;
几个有用的伪类
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;a:link     链接未访问时
&lt;/li&gt;
&lt;li&gt;a:visited  链接访问过时
&lt;/li&gt;
&lt;li&gt;a:hover   鼠标移到链接上时
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;css编写的一些规则&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;id的使用场景&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;样式只使用一次，比如logo
&lt;/li&gt;
&lt;li&gt;对网页中特定区域进行布局，比如header，sidebar等等
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;class的使用场景&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;同一页面多次使用
&lt;/li&gt;
&lt;li&gt;通用且经常使用的元素
&lt;/li&gt;
&lt;li&gt;多个class属性
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-3&quot;&gt;命名&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;css大小写敏感，建议小写
&lt;/li&gt;
&lt;li&gt;命名时建议用 - 来分割多个单词
&lt;/li&gt;
&lt;li&gt;对于class可以使用适当的前缀，比如字体 f-， 按钮 btn-
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;html5与css3&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;css3的主要属性   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;css3&quot;&gt;css3&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-2-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-1-1&quot;&gt;css3边框&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-2-1-1-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-2-1-1-1&quot;&gt;border-radius ===&amp;gt; 圆角&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-2-1-1-1&quot;&gt;
&lt;p&gt;
border-radius是四个属性的简写(T-R-B-L),border-top-radius，right，bottom，left与之类似
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;div&lt;/span&gt;
{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;border&lt;/span&gt;:2px solid;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;border-radius&lt;/span&gt;:25px;
    &lt;span style=&quot;color: #FD971F; font-style: italic;&quot;&gt;-moz-border-radius&lt;/span&gt;:25px; &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Old Firefox &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
添加圆角
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1-1-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-2-1-1-2&quot;&gt;box-shadow  ===&amp;gt; 添加阴影&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-2-1-1-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;box-shadow&lt;/span&gt;: 10px 10px 5px &lt;span style=&quot;color: #000000; background-color: #888888;&quot;&gt;#888888&lt;/span&gt;;
&lt;span style=&quot;color: #FD971F; font-style: italic;&quot;&gt;-moz-box-shadow&lt;/span&gt;: 10px 10px 5px &lt;span style=&quot;color: #000000; background-color: #888888;&quot;&gt;#888888&lt;/span&gt;; &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;老的 Firefox &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
第一个10px是水平阴影，第二个10px是垂直阴影，第三个5px是模糊距离，第四个是阴影颜色.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1-1-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-2-1-1-3&quot;&gt;border-image ===&amp;gt; 边框图片&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-2-1-1-3&quot;&gt;
&lt;p&gt;
border-image 是border-image-* 的简写
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;div&lt;/span&gt;
{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;border-image&lt;/span&gt;:url(border.png) 30 30 round;
    &lt;span style=&quot;color: #FD971F; font-style: italic;&quot;&gt;-moz-border-image&lt;/span&gt;:url(border.png) 30 30 round; &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;老的 Firefox &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F; font-style: italic;&quot;&gt;-webkit-border-image&lt;/span&gt;:url(border.png) 30 30 round; &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Safari 和 Chrome &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F; font-style: italic;&quot;&gt;-o-border-image&lt;/span&gt;:url(border.png) 30 30 round; &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Opera &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-1-2&quot;&gt;css3背景&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-1-3&quot;&gt;css3文本效果&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-2-1-3-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-2-1-3-1&quot;&gt;text-shadow ===&amp;gt; 文本阴影&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-2-1-3-1&quot;&gt;
&lt;p&gt;
和box-shadow类似
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;h1&lt;/span&gt;
{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;text-shadow&lt;/span&gt;: 5px 5px 5px &lt;span style=&quot;color: #ffffff; background-color: #FF0000;&quot;&gt;#FF0000&lt;/span&gt;;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1-3-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-2-1-3-2&quot;&gt;word-wrap ===&amp;gt; 可以对太长的单词进行换行&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-1-4&quot;&gt;transform ===&amp;gt; 2D，3D转换&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;2d转换
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;&lt;colgroup&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;matrix(a,b,c,d,tx,ty)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 2D 转换，使用六个值的矩阵。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;translate(x, y)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 2D 转换，沿着 X 和 Y 轴移动元素。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;translateX(n)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 2D 转换，沿着 X 轴移动元素。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;translateY(n)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 2D 转换，沿着 Y 轴移动元素。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;scale(x, y)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 2D 缩放转换，改变元素的宽度和高度。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;scaleX(n)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 2D 缩放转换，改变元素的宽度。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;scaleY(n)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 2D 缩放转换，改变元素的高度。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;rotate(angle)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 2D 旋转，在参数中规定角度。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;skew(x-angle,y-angle)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 2D 倾斜转换，沿着 X 和 Y 轴。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;skewX(angle)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 2D 倾斜转换，沿着 X 轴。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;skewY(angle)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 2D 倾斜转换，沿着 Y 轴。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;
几个示例代码：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;matrix: 这个是所有2d变换的基础，其他的基本都可以用这个属性来实现，所以其它的比如skew，translation都
可以看作是matrix的简写，下面来讨论matrix的原理：
transform的变换实际就是一次坐标变换，也就是待变换的元素中的每一个点(x,y)都通过一个变换得到一个新的坐
标(x1, y1),然后该点就在(x1,y1)处显示出来，所以关键就是(x, y) =====&amp;gt; (x1, x2)的变换过程:
&lt;pre class=&quot;example&quot;&gt;
--        --     --  --     --   --
| a, b, tx |     | x  |     |  x2 |
| c, d, ty |  ×  | y  |  =  |  y2 |
| 0, 0, 1  |     | 1  |     |  1  |
--        --     --  --     --   --
&lt;/pre&gt;
\begin{equation}
  \left( \begin{array}{ccc}
    a &amp;amp; b &amp;amp; tx \\
    c &amp;amp; d &amp;amp; ty \\
    0 &amp;amp; 0 &amp;amp; 1
  \end{array} \right)
\quad
  \left( \begin{array}{c}
    x \\
    y \\
    1
  \end{array} \right)
  =
  \left( \begin{array}{c}
    x2 \\
    y2 \\
    1
  \end{array} \right)
\end{equation}

&lt;p&gt;
一个3×3的矩阵 乘以 3×1的矩阵结果是一个3×1的矩阵，所以:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
x2 = ax + by + tx
y2 = cx + dy + ty
1 = 1
&lt;/pre&gt;
&lt;p&gt;
这就是(x, y) =====&amp;gt; (x1, y1)的变换规则,如果a=d=1, b=c=0， 那么就变成了translate(tx, ty)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;translate：根据坐标从当前位置移动
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;div&lt;/span&gt;{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;transform&lt;/span&gt;: translate(50px,100px);
    &lt;span style=&quot;color: #FD971F; font-style: italic;&quot;&gt;-ms-transform&lt;/span&gt;: translate(50px,100px);       &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;IE 9 &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F; font-style: italic;&quot;&gt;-webkit-transform&lt;/span&gt;: translate(50px,100px);   &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Safari and Chrome &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F; font-style: italic;&quot;&gt;-o-transform&lt;/span&gt;: translate(50px,100px);        &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Opera &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F; font-style: italic;&quot;&gt;-moz-transform&lt;/span&gt;: translate(50px,100px);      &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Firefox &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;3d转换
&lt;/li&gt;
&lt;/ol&gt;&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;&lt;colgroup&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;matrix3d(n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 3D 转换，使用 16 个值的 4x4 矩阵。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;translate3d(x,y,z)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 3D 转化。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;translateX(x)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 3D 转化，仅使用用于 X 轴的值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;translateY(y)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 3D 转化，仅使用用于 Y 轴的值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;translateZ(z)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 3D 转化，仅使用用于 Z 轴的值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;scale3d(x,y,z)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 3D 缩放转换。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;scaleX(x)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 3D 缩放转换，通过给定一个 X 轴的值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;scaleY(y)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 3D 缩放转换，通过给定一个 Y 轴的值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;scaleZ(z)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 3D 缩放转换，通过给定一个 Z 轴的值。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;rotate3d(x,y,z,angle)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 3D 旋转。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;rotateX(angle)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义沿 X 轴的 3D 旋转。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;rotateY(angle)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义沿 Y 轴的 3D 旋转。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;rotateZ(angle)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义沿 Z 轴的 3D 旋转。&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;perspective(n)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;定义 3D 转换元素的透视视图。&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;matrix3d的规则也类似于matrix，只是这里是一个4×4的矩阵乘以一个4×1的矩阵结果是一个4×1的矩阵
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-1-5&quot;&gt;transition (IE9及以下版本无效)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1-5&quot;&gt;
&lt;p&gt;
不使用js的情况下，或者从一种样式变为另一种样式的动画效果
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;div&lt;/span&gt;{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;transition&lt;/span&gt;: width 2s;
    &lt;span style=&quot;color: #FD971F; font-style: italic;&quot;&gt;-moz-transition&lt;/span&gt;: width 2s;  &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Firefox 4 &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F; font-style: italic;&quot;&gt;-webkit-transition&lt;/span&gt;: width 2s;   &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Safari 和 Chrome &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F; font-style: italic;&quot;&gt;-o-transition&lt;/span&gt;: width 2s;    &lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Opera &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
当宽度属性变化时就会有一个2s的动画
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;sass&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;sass中可以嵌套的定义规则
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;style.scss &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;#navbar &lt;/span&gt;{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;width&lt;/span&gt;: 80%;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;height&lt;/span&gt;: 23px;

&lt;span style=&quot;color: #A6E22E;&quot;&gt;    ul &lt;/span&gt;{
        &lt;span style=&quot;color: #FD971F;&quot;&gt;list-style-type&lt;/span&gt;: none;
    }
&lt;span style=&quot;color: #A6E22E;&quot;&gt;    li &lt;/span&gt;{
        &lt;span style=&quot;color: #FD971F;&quot;&gt;float&lt;/span&gt;: left;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;        a &lt;/span&gt;{ &lt;span style=&quot;color: #FD971F;&quot;&gt;font-weight&lt;/span&gt;: bold; }
    }
}

&lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;style.css &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;#navbar &lt;/span&gt;{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;width&lt;/span&gt;: 80%;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;height&lt;/span&gt;: 23px;
}
&lt;span style=&quot;color: #A6E22E;&quot;&gt;#navbar ul &lt;/span&gt;{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;list-style-type&lt;/span&gt;: none;
}
&lt;span style=&quot;color: #A6E22E;&quot;&gt;#navbar li &lt;/span&gt;{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;float&lt;/span&gt;: left;
}
&lt;span style=&quot;color: #A6E22E;&quot;&gt;#navbar li a &lt;/span&gt;{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;font-weight&lt;/span&gt;: bold;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;父引用: 用 &amp;amp; 代替父选择子
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;style.scss &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;a &lt;/span&gt;{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;color: #ffffff; background-color: #ce4dd6;&quot;&gt;#ce4dd6&lt;/span&gt;;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;    &amp;amp;:hover &lt;/span&gt;{ &lt;span style=&quot;color: #FD971F;&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;color: #000000; background-color: #ffb3ff;&quot;&gt;#ffb3ff&lt;/span&gt;; }
&lt;span style=&quot;color: #A6E22E;&quot;&gt;    &amp;amp;:visited &lt;/span&gt;{ &lt;span style=&quot;color: #FD971F;&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;color: #ffffff; background-color: #c458cb;&quot;&gt;#c458cb&lt;/span&gt;; }
}

&lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;style.css &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;a &lt;/span&gt;{
    &lt;span style=&quot;color: #FD971F;&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;color: #ffffff; background-color: #ce4dd6;&quot;&gt;#ce4dd6&lt;/span&gt;;
}
&lt;span style=&quot;color: #FD971F;&quot;&gt;a&lt;/span&gt;:hover {
    &lt;span style=&quot;color: #FD971F;&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;color: #000000; background-color: #ffb3ff;&quot;&gt;#ffb3ff&lt;/span&gt;;
}
&lt;span style=&quot;color: #FD971F;&quot;&gt;a&lt;/span&gt;:visited {
    &lt;span style=&quot;color: #FD971F;&quot;&gt;color&lt;/span&gt;: &lt;span style=&quot;color: #ffffff; background-color: #c458cb;&quot;&gt;#c458cb&lt;/span&gt;;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;变量：$main-color: #ce4dd6; 该语句就定义了一个名为main_color的变量，引用时使用$main_color
&lt;/li&gt;
&lt;li&gt;插值：使用#($var)
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;style.scss &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
$side: top;
$radius: 10px;

&lt;span style=&quot;color: #A6E22E;&quot;&gt;.rounded- &lt;/span&gt;{
&lt;span style=&quot;color: #A6E22E;&quot;&gt;  border-#&lt;/span&gt;{$side}-radius: $radius;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;  -moz-border-radius-#&lt;/span&gt;{$side}: $radius;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;  -webkit-border-#&lt;/span&gt;{$side}-radius: $radius;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;mixin: 可以看作是自定义函数，通过@include并且在函数名后跟上实参来进行调用
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;style.scss &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #75715E;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;$radius 指定了默认值10px &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;@mixin&lt;/span&gt; rounded($side, $radius: 10px) {
&lt;span style=&quot;color: #A6E22E;&quot;&gt;  border-#&lt;/span&gt;{$side}-radius: $radius;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;  -moz-border-radius-#&lt;/span&gt;{$side}: $radius;
&lt;span style=&quot;color: #A6E22E;&quot;&gt;  -webkit-border-#&lt;/span&gt;{$side}-radius: $radius;
}

&lt;span style=&quot;color: #A6E22E;&quot;&gt;#navbar li &lt;/span&gt;{ &lt;span style=&quot;color: #A6E22E;&quot;&gt;@include&lt;/span&gt; rounded(top); }
&lt;span style=&quot;color: #A6E22E;&quot;&gt;#footer &lt;/span&gt;{ &lt;span style=&quot;color: #A6E22E;&quot;&gt;@include&lt;/span&gt; rounded(top, 5px); }
&lt;span style=&quot;color: #A6E22E;&quot;&gt;#sidebar &lt;/span&gt;{ &lt;span style=&quot;color: #A6E22E;&quot;&gt;@include&lt;/span&gt; rounded(left, 8px); }
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;@import:导入文件，注意被导入的文件应该命名为 partial_filename.sass, 这样导入的时候就用 @import &quot;filename&quot;
为了支持sass与scss，在@import后不要指定后缀名
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;p class=&quot;footpara&quot;&gt;
&lt;a href=&quot;http://blog.jobbole.com/37112/&quot;&gt;http://blog.jobbole.com/37112/&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt; </content>
  </entry>
  
  <entry>
    <id>gevent.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/gevent.html"/>
    <title>gevent源码分析</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;gevent源码分析&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;gevent 笔记&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;continuation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;coroutine&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-2-1&quot;&gt;gevent源码分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;gevent 笔记&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;continuation&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
continuation是一个程序设计语言理论上的概念，不怕英文的童鞋可以看这一篇&lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation&quot;&gt;wiki&lt;/a&gt;, 你可以将continuation看成是一个数据结构，这个数据结构可以保存程序的执行流的状态，而且
可以在程序中访问这个数据结构来恢复程序的执行流，这就赋予了程序一种能力，也就是说我可以先获得一个continuation，接着挂起一个程序正在执行的部分，然后跳到该程序的其
他部分执行，以后又可以通过调用continuation来恢复被挂起的执行流。这种能力为异常，触发器以及协程的实现提供非常了便利的条件。某种程度上而言，continuation是这些实现
这些程序语言设施的基础
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;the-continuation&lt;/span&gt; #f)
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; (&lt;span style=&quot;color: #A6E22E;&quot;&gt;test&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ((i 0))
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;                                        &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;call/cc calls its first function argument, passing&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;                                        &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;a continuation variable representing this point in&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;                                        &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;the program as the argument to that function.&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;                                        &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;                                        &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;In this case, the function argument assigns that&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;                                        &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;continuation to the variable the-continuation.&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;                                        &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;call/cc&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (k) (set! the-continuation k)))
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;                                        &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;                                        &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;The next time the-continuation is called, we start here.&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;    (set! i (+ i 1))
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;    i))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上述是一段scheme代码，摘自wikipedia。不是本人装逼，实在是用scheme很方便，我大体的解释下这段代码，一开始定义了一个变量the-continuation，接着定义一个函数test，在
函数体中let定义一个局部变量i，接着调用call/cc，该函数的作用可以看注释，call/cc的第一个参数是一个函数，call/cc的作用是将代表当前continuation的一个变量作为参数传
递给它的第一个参数，对本例而言就是将代表当前continuation的变量传递给那个lambda匿名函数，而这个匿名函数会将the-continuation设置为当前的continuation，所以运行
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(test)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;coroutine&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
Coroutine 也就是 corporate routine，中文名就是协程，从它的英文可以看出是协同的例程的意思
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;gevent源码分析&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;p&gt;
在Greenlet类的join函数中有如下代码：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;switch&lt;/span&gt; = getcurrent().switch
&lt;span class=&quot;linenr&quot;&gt;2: &lt;/span&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.rawlink(switch)
&lt;span class=&quot;linenr&quot;&gt;3: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;4: &lt;/span&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;result&lt;/span&gt; = &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.parent.switch()
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
rawlink的作用是注册一个函数，这个函数会在这个greenlet运行完成后调用
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>git.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/git.html"/>
    <title>git/github学习笔记</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;git/github学习笔记&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;git学习笔记&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;基本使用&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;git的基本命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;git一般的工作过程是：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;git的原理&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-2-1&quot;&gt;工作区(work tree)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2&quot;&gt;git的暂存区(index)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-3&quot;&gt;版本库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-4&quot;&gt;git diff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-5&quot;&gt;HEAD, master&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-6&quot;&gt;git reset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-7&quot;&gt;git checkout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-8&quot;&gt;git分支&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-2-8-1&quot;&gt;创建分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-8-2&quot;&gt;切换分支&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-8-3&quot;&gt;合并分支&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;git github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;gitignore syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;git学习笔记&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
git是一个分布式版本管理系统
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;基本使用&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;git的基本命令&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;安装：sudo apt-get install git git-uid
&lt;/li&gt;
&lt;li&gt;init：  git init（工作目录运行，会生成一个.git目录，里面会存放索引数据）
&lt;/li&gt;
&lt;li&gt;add:    git add(添加文件)
git add . （添加所有）
（只有添加了新文件时才需要git add，如果只是修改了或删除了文件，可以只执行git commit -a）
&lt;/li&gt;
&lt;li&gt;commit: git commit(提交，一般调用add后只是在临时区，只有调用commit才会
提交到git)
git commit -m &quot;comment&quot;
git commit -a           commit all
&lt;/li&gt;
&lt;li&gt;clone:  git clone 只要有.git目录，那么就可以调用该命令来得到git管理的
所有文件
eg: git clone test.git dest\_dir/    git-—&amp;gt;dest\_dir
    git clone 账户@IP:工作树路径 你的目录     远程github
&lt;/li&gt;
&lt;li&gt;pull:  git pull（将远程分支拉到本地，然后和本地分支合并）
&lt;/li&gt;
&lt;li&gt;push： git push（将本地分支推送远程仓库）
&lt;/li&gt;
&lt;li&gt;branch： 创建分支或者查看有哪些分支
git branch             查看有哪些分支
git branch TmpBranch  创建分支
git branch -d TmpBranch 删除分支
&lt;/li&gt;
&lt;li&gt;checkout：改变分支（git checkout TmpBranch)
&lt;/li&gt;
&lt;li&gt;merge：将制定分支与当前分支合并(git merge TmpBranch 将TmpBranch与当前分支合并）
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;git一般的工作过程是：&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;git pull(将远程分支与本地分支合并)
&lt;/li&gt;
&lt;li&gt;git log（查看其他成员的更改）
&lt;/li&gt;
&lt;li&gt;git branch (建一个本地分支）
&lt;/li&gt;
&lt;li&gt;git checkout（进入本地分支）
&lt;/li&gt;
&lt;li&gt;在该本地分支上进行修改
&lt;/li&gt;
&lt;li&gt;git checkout（回到主分支）
&lt;/li&gt;
&lt;li&gt;git merge （将分支上所做的工作合并到主分支）
&lt;/li&gt;
&lt;li&gt;git branch -d （删除今天创建的分支）
&lt;/li&gt;
&lt;li&gt;git pull（将远程仓库合并到本地仓库,很重要，因为今天可能别人修改了远程仓库）
&lt;/li&gt;
&lt;li&gt;git push （将本地仓库合并到远程仓库）
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;git的原理&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;工作区(work tree)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;p&gt;
就是你本地的工作目录树
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;git add :将工作区的文件提交到暂存区,暂存区的目录树会更新
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;git的暂存区(index)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;p&gt;
暂存区可以看作一个目录树，暂存区的目录树和版本库的目录树是不同的，.git目录有一个index文件，这个文件包含了
git所管理的目录中所有文件的大小以及修改时间，每一次你调用git status或者git diff这类命令时，git都会比较工作
区的文件与该index文件中记录的文件的差异，如果发现文件的大小已经改变，那么工作区的文件肯定已经改变，如果发
现文件的修改时间已改变，那么git会读取工作区中的文件与暂存区的文件的内容进行比较，如果内容相同，那么git会修
改index文件的相应条目的文件时间(因为虽然时间改变了，但文件内容没有改变)，这就是基本的工作流程了
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;git commit: 将暂存区的文件提交到版本库
&lt;/li&gt;
&lt;li&gt;git reset HEAD : 暂存区的目录树会被当前分支的版本库目录树替换,所以任何未提交的更新都会丢弃,但工作区不受
影响
&lt;/li&gt;
&lt;li&gt;git checkout 或者 git checkout – &amp;lt;file&amp;gt; :用暂存区的全部或者部分文件来替换工作区的文件,所以这个操作会清
除没有添加到暂存区的工作区改动, &lt;b&gt;危险操作&lt;/b&gt;
&lt;/li&gt;
&lt;li&gt;git checkout HEAD 或者 git checkout HEAD &amp;lt;file&amp;gt; : 用HEAD指向的版本库分支的全部或者部分文件来替换暂存区与
工作区的文件,所以这个操作会清除所有未提交的暂存区与工作区改动. &lt;b&gt;危险操作&lt;/b&gt;
&lt;/li&gt;
&lt;li&gt;git rm –cached &amp;lt;file&amp;gt; : 直接删除暂存区中的文件,工作区不受影响
&lt;/li&gt;
&lt;li&gt;git rm &amp;lt;file&amp;gt; : 会删除工作区与暂存区的指定文件
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-3&quot;&gt;版本库&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-3&quot;&gt;
&lt;p&gt;
由git管理的分支代码的目录树，比如master分支，以及其它你自己创建的分支,当然操作时一般都只是当前分支的目录树
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-4&quot;&gt;git diff&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;git diff : 工作区与暂存区比较
&lt;/li&gt;
&lt;li&gt;git diff HEAD : 工作区与HEAD比较
&lt;/li&gt;
&lt;li&gt;git diff –cached : 暂存区与HEAD比较
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-5&quot;&gt;HEAD, master&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-5&quot;&gt;
&lt;p&gt;
HEAD(.git/HEAD)实际是一个指针,指向的是.git/refs/heads/branch-name文件, branch-name可以是master或者你自己创
建的分支名,该文件实际指向的是该分支的最新的一次commit, 如果当前是master分支,那么这几个文件的内容应该是这
样:
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;.git/HEAD : &quot;.git/refs/heads/master&quot; 如果用git checkout改变分支,那么master会变成相应的分支名,所以HEAD可
以认为一直指向当前分支
&lt;/li&gt;
&lt;li&gt;.git/refs/heads/master:  235fd887b9f85d44ce94e8d733b8814509c1d4e8 (master分支最新一次提交的id),通过
git reset –[hard|soft|mixed]可以重置该文件到指定的commit id,那么在你指定的commit id之后的提交就都会丢失.
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-6&quot;&gt;git reset&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-6&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;git reset [commit-id] &amp;lt;path&amp;gt; : 不影响工作区与版本库,只会用commit-id对应的版本库工作树替换暂存区的工作树,实
际上相当于撤销先前的git add, 举几个例子:
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;git reset HEAD: 就是版本库中当前分支的最新一次提交的工作树替换暂存区的工作树
&lt;/li&gt;
&lt;li&gt;git reset : 等价于 git reset HEAD
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;git reset –hard [commit-id] : 会将版本库的引用重定向到commit-id,同时将暂存区与工作区的工作树都重置为
commit-id对应的目录树, 所以commit-id之后所有的工作区,暂存区改动以及版本库提交都会删除, &lt;b&gt;该命令非常危险&lt;/b&gt;
举几个例子:
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;git reset –hard HEAD^  : 重置HEAD到父提交, 当前提交的内容都会删除 &lt;b&gt;危险&lt;/b&gt;
&lt;/li&gt;
&lt;li&gt;git reset –hard commit-id : 重置到commit-id指定的提交, commit-id之后的提交都会删除, &lt;b&gt;危险&lt;/b&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;git reset –soft [commit-id] : 只重置版本库的引用,但是不影响暂存区与工作区,用法和2类似
&lt;/li&gt;
&lt;li&gt;git reset –mixed [commit-id] : 重置版本库和暂存区,不改变工作区
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-7&quot;&gt;git checkout&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-7&quot;&gt;
&lt;p&gt;
该命令会影响工作区
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-8&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-8&quot;&gt;git分支&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-8&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-8-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-8-1&quot;&gt;创建分支&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-8-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;git branch : 显示所有分支,当前分支前会加*
&lt;/li&gt;
&lt;li&gt;git branch new-branch : 创建新分支
&lt;/li&gt;
&lt;li&gt;git branch new-br start-point: 创建新分支,并以start-point为起点初始化
&lt;/li&gt;
&lt;li&gt;git branch -d br-name: 删除分支,如果分支上有没有合并到其他分支的提交,那么拒绝删除
&lt;/li&gt;
&lt;li&gt;git branch -D br-name: 和上一个类似,但是会强制删除
&lt;/li&gt;
&lt;li&gt;git branch -m old-name new-name : 将名为old-name的分支重命名为new-name,如果已存在名为new-name的分支,那
么重命名失败
&lt;/li&gt;
&lt;li&gt;git branch -M old-name new-name: 强制重命名
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-8-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-8-2&quot;&gt;切换分支&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-8-2&quot;&gt;
&lt;p&gt;
git checkout new-br
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-8-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-8-3&quot;&gt;合并分支&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-8-3&quot;&gt;
&lt;p&gt;
git merge br-name: 将名为br-name的分支与但前分支合并
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;git github&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;git remote add remoteName remoteUrl
eg: git remote add origin git@github.com:youName/github-example.git
只第一次新建了仓库时才需要运行，实际上是将本地的仓库与远程的仓库关联起来
如果出错可以使用命令 git remote rm origin
&lt;/li&gt;
&lt;li&gt;git push origin master(将本地的仓库推送到远端）
如果报错那么极有可能是远端仓库被别人提交过了，所以要先pull，与本地合并然后在提交
git pull origin master
&lt;/li&gt;
&lt;li&gt;git pull -u origin master
origin是远程分支的名字，master是本地分支的名字
&lt;/li&gt;
&lt;li&gt;子模块
git submodule add 子模快url 本地的路径
eg: git submodule add &lt;a href=&quot;https://github.com/libevent/libevent.git&quot;&gt;https://github.com/libevent/libevent.git&lt;/a&gt; .dep/libevent
当clone了一份包含子模快的仓库时，调用git submodule update –init可以拉取那些子模快
&lt;/li&gt;
&lt;li&gt;fork后合并原仓库的改变
情景如下：我在github fork一个仓库（&lt;a href=&quot;https://github.com/purcell/emacs.d.git&quot;&gt;https://github.com/purcell/emacs.d.git&lt;/a&gt; ）到我的的账户
         （&lt;a href=&quot;https://github.com/yuyang0/emacs.d.git&quot;&gt;https://github.com/yuyang0/emacs.d.git&lt;/a&gt; ）然后我将这个fork仓库clone到本地，现在
         我要合并原仓库的改变。。
first: git remote add purcell &lt;a href=&quot;https://github.com/purcell/emacs.d.git&quot;&gt;https://github.com/purcell/emacs.d.git&lt;/a&gt;
next: git pull purcell master (git fetch purcell, git merge purcell/master)
next: git push origin master
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;gitignore syntax&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&quot;#&quot; ： 注释
&lt;/li&gt;
&lt;li&gt;！   : 取反，即匹配模式的文件不忽略
&lt;/li&gt;
&lt;li&gt;/   ： /结尾被当作目录，该目录的所有文件忽略
&lt;/li&gt;
&lt;li&gt;/   ： /开头则只忽略工作树根目录开始匹配eg：core/TODO与/core/TODO不
同，前者只要文件路径包含core/TODO（如doc/core/TODO）即匹配，
而后者则只匹配工作树根目录下的core文件夹的TODO文件
&lt;/li&gt;
&lt;li&gt;glob模式：glob模式不同于正则表达式，等同于shell模式下的方式
&lt;p class=&quot;verse&quot;&gt;
*：匹配任意字符&lt;br /&gt;
?: 匹配任意单个字符&lt;br /&gt;
[abcd]: 匹配a b c d中的一个&lt;br /&gt;
[a-z]: 匹配a-z之间的一个字符&lt;br /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>javascript.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/javascript.html"/>
    <title>javascript笔记</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;javascript笔记&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;给c程序员的javascript指南&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;变量类型&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;type的基本常识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;数字：&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-2-1&quot;&gt;日期&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;字符串：&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-3-1&quot;&gt;常见字符串处理函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3-2&quot;&gt;正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-4&quot;&gt;bool：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-5&quot;&gt;undefined与null:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-6&quot;&gt;object：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;数组与对象&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-2-1&quot;&gt;Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2&quot;&gt;objects(对象，有点类似于关联数组)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;control flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;client-side javascript&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-2-1&quot;&gt;js运行方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2&quot;&gt;global window object&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-2-2-1&quot;&gt;timers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2-2&quot;&gt;window.location&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2-3&quot;&gt;window.history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2-4&quot;&gt;window.navigator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2-2-5&quot;&gt;window.document&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;jquery&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-3-1&quot;&gt;一些惯例以及基本常识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-2&quot;&gt;jquery selector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3&quot;&gt;DOM操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-4&quot;&gt;jquery事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-5&quot;&gt;jquery动画&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-6&quot;&gt;ajax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-7&quot;&gt;jquery常用插件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;给c程序员的javascript指南&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
几份不错的文档：&lt;a href=&quot;http://bonsaiden.github.io/JavaScript-Garden/&quot;&gt;JavaScript Garden&lt;/a&gt; ,火狐开发者社区的js &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide?redirectlocale%3Den-US&amp;amp;redirectslug%3DJavaScript%252FGuide&quot;&gt;tutorial&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;变量类型&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;type的基本常识&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;数字，字符串。boolean是js的基本类型，它们不是object，但是这三种类型有对应的包装对象（wrapper object），
当你访问字符串的方法时，实际上会自动的创建一个临时的字符串包装对象，就像调用了new String(s),当调用完成
后这个临时对象会被丢弃，对于数字（Number），bool（Boolean）都是同样的原理
&lt;/li&gt;
&lt;li&gt;数字，字符串，bool都是不可变对象，而object是可变对象
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;数字：&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
不区分整数与浮点数
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-js&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;x&lt;/span&gt; = 2;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;x&lt;/span&gt; = 2.22;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
有一些数学函数，用来处理数字：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-js&quot;&gt;Math.pow(2,53)         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; 9007199254740992: 2 to the power 53&lt;/span&gt;
Math.round(.6)         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; 1.0: round to the nearest integer&lt;/span&gt;
Math.ceil(.6)         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; 1.0: round up to an integer&lt;/span&gt;
Math.floor(.6)         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; 0.0: round down to an integer&lt;/span&gt;
Math.abs(-5)         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; 5: absolute value&lt;/span&gt;
Math.max(x,y,z)         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Return the largest argument&lt;/span&gt;
Math.min(x,y,z)         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Return the smallest argument&lt;/span&gt;
Math.random()         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Pseudo-random number x where 0 &amp;lt;= x &amp;lt; 1.0&lt;/span&gt;
Math.PI         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;π: circumference of a circle / diameter&lt;/span&gt;
Math.E         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;e: The base of the natural logarithm&lt;/span&gt;
Math.sqrt(3)         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;The square root of 3&lt;/span&gt;
Math.pow(3, 1/3)         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;The cube root of 3&lt;/span&gt;
Math.sin(0)         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Trigonometry: also Math.cos, Math.atan, etc.&lt;/span&gt;
Math.log(10)         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Natural logarithm of 10&lt;/span&gt;
Math.log(100)/Math.LN10         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Base 10 logarithm of 100&lt;/span&gt;
Math.log(512)/Math.LN2         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Base 2 logarithm of 512&lt;/span&gt;
Math.exp(3)         &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Math.E cubed&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-2-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-2-1&quot;&gt;日期&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-2-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-js&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;then&lt;/span&gt; = &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Date&lt;/span&gt;(2010, 0, 1); &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;The 1st day of the 1st month of 2010&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;later&lt;/span&gt; = &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Date&lt;/span&gt;(2010, 0, 1, &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Same day, at 5:10:30pm, local time&lt;/span&gt;
                     17, 10, 30);
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;now&lt;/span&gt; = &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Date&lt;/span&gt;();   &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;The current date and time&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;elapsed&lt;/span&gt; = now - then;  &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Date subtraction: interval in milliseconds&lt;/span&gt;

later.getFullYear() &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; 2010&lt;/span&gt;
later.getMonth() &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; 0: zero-based months&lt;/span&gt;
later.getDate() &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; 1: one-based days&lt;/span&gt;
later.getDay() &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; 5: day of week. 0 is Sunday 5 is Friday.&lt;/span&gt;
later.getHours() &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; 17: 5pm, local time&lt;/span&gt;
later.getUTCHours() &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; hours in UTC time; depends on timezone&lt;/span&gt;

later.toString()   &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; &quot;Fri Jan 01 2010 17:10:30 GMT-0800 (PST)&quot;&lt;/span&gt;
later.toUTCString()   &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; &quot;Sat, 02 Jan 2010 01:10:30 GMT&quot;&lt;/span&gt;
later.toLocaleDateString()   &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; &quot;01/01/2010&quot;&lt;/span&gt;
later.toLocaleTimeString()   &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; &quot;05:10:30 PM&quot;&lt;/span&gt;
later.toISOString()   &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; &quot;2010-01-02T01:10:30.000Z&quot;; ES5 only&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;字符串：&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-js&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;x&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;hello world&#39;&lt;/span&gt;; &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;字符串单双引号等价&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;x&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;hello world&quot;&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
js的字符串实际上就是一串16位(2个字节)的值，因为js使用UTF-16来encoding unicode字符，所以如果一个uncode
point使用utf-16编码后有3个字节，那么使用length时该字符就是2个长度,js的字符串操作基本都是以16位的值为基础，
而不是以逻辑上的字符为基础的
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-3-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-3-1&quot;&gt;常见字符串处理函数&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-3-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-js&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;s&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;hello, world&quot;&lt;/span&gt;     &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; 3: position of first &quot;l&quot; at or after 3&lt;/span&gt;
s.length             &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;12, the length of string(this is property, not method)&lt;/span&gt;

s.charAt(0)    &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; &quot;h&quot;: the first character.&lt;/span&gt;
s.charAt(s.length-1)    &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; &quot;d&quot;: the last character.&lt;/span&gt;
s.substring(1,4)    &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; &quot;ell&quot;: the 2nd, 3rd and 4th characters.&lt;/span&gt;
s.slice(1,4)    &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; &quot;ell&quot;: same thing&lt;/span&gt;
s.slice(-3)    &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; &quot;rld&quot;: last 3 characters&lt;/span&gt;
s.indexOf(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;l&quot;&lt;/span&gt;)    &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; 2: position of first letter 1.&lt;/span&gt;
s.lastIndexOf(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;l&quot;&lt;/span&gt;)    &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; 10: position of last letter 1.&lt;/span&gt;
s.indexOf(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;l&quot;&lt;/span&gt;, 3)    &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;=&amp;gt; 3: position of first &quot;l&quot; at or after 3&lt;/span&gt;

s.split(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;, &quot;&lt;/span&gt;)         &lt;span style=&quot;color: #75715E;&quot;&gt;//  &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;[&#39;hello&#39;, &#39;world&#39;]  an Array&lt;/span&gt;
s.replace(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;h&quot;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;H&quot;&lt;/span&gt;)   &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Hello world, replace all instances&lt;/span&gt;
s.toUpperCase()       &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;HELLO WORLD&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-1-3-2&quot;&gt;正则表达式   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;regrx&quot;&gt;regrx&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-4&quot;&gt;bool：&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-4&quot;&gt;
&lt;p&gt;
只能为true或者false,以下的值会自动转换为false：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;null
&lt;/li&gt;
&lt;li&gt;undefined
&lt;/li&gt;
&lt;li&gt;&quot;&quot; (empty string)
&lt;/li&gt;
&lt;li&gt;NAN (not a number)
&lt;/li&gt;
&lt;li&gt;0, -0
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
除以上的值之外的所有的值，包括所有的对象都会自动转换为true
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-5&quot;&gt;undefined与null:&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-5&quot;&gt;
&lt;p&gt;
前者表示没有定义，后者表示变量的值为空，eg：var x;(x为undefined)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-6&quot;&gt;object：&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-6&quot;&gt;
&lt;p&gt;
数组，函数都是特殊的object，普通的object实际就是一些无序的属性的集合，通常这样定义
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-js&quot;&gt;obj = {
  name1: &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;val1&quot;&lt;/span&gt;,
  name2: &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;val2&quot;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;数组与对象&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;类型转换： 2 + &#39;2a&#39; = &#39;22a&#39;(操作符是+，则自动将数字转换为字符串，如果是其它操作符则尝试将字符串转为整
数，&#39;22&#39;转换为22, 但&#39;2a&#39;无法转换，这一点和parseInt不同)
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;Array&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;定义:
定义数组可以使用两种方法，Array与[],但是推荐[],因为像 new Array(3)这样的代码，它会返回一个空数组，可是
却将这个数组的length设置为3,这是一个令人困惑的特性
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-js&quot;&gt;[1, 2, 3]; &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;结果: [1, 2, 3]&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Array&lt;/span&gt;(1, 2, 3); &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;结果: [1, 2, 3]&lt;/span&gt;

[3]; &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;结果: [3]&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Array&lt;/span&gt;(3); &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;结果: []&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Array&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;3&#39;&lt;/span&gt;) &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;结果: [&#39;3&#39;]&lt;/span&gt;

&lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;译者注：因此下面的代码将会使人很迷惑&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Array&lt;/span&gt;(3, 4, 5); &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;结果: [3, 4, 5]&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Array&lt;/span&gt;(3) &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;结果: []，此数组长度为 3&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;遍历数组时不要使用for…in, 而要使用如下代码:

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-js&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;list&lt;/span&gt; = [1, 2, 3, 4, 5, ...... 100000000];
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt; = 0, &lt;span style=&quot;color: #FD971F;&quot;&gt;l&lt;/span&gt; = list.length; i &amp;lt; l; i++) {
    console.log(list[i]);
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
原因是for … in会遍历整个原型链，效率不高
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;objects(对象，有点类似于关联数组)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;p&gt;
基本上js中除了数字，字符串，bool，null，undefined之外都是对象，数组，函数等等都是
对象，对象有属性名，与属性值，数组的属性名是一些整数，这也是适合用数组的场景，其它
的地方都应该用对象，对象对属性名的搜索有一定的规则，一般情况下通过字面值构建的对象
都会与object.prototype链接，所以如果一个属性在对象中没有找到，那么她会自动到
object.prototype中找，这样我们就可以给对象进行扩充，比如给object.prototype中添加一
个方法，那么每一个对象都可以调用
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-js&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;foo&lt;/span&gt; = {name: &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Kitten&#39;&lt;/span&gt;}
foo.name; &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;kitten&lt;/span&gt;
foo[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;name&#39;&lt;/span&gt;]; &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;kitten&lt;/span&gt;

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;get&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;name&#39;&lt;/span&gt;;
foo[get]; &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;kitten&lt;/span&gt;

foo.1234; &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;SyntaxError&lt;/span&gt;
foo[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;1234&#39;&lt;/span&gt;]; &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;works&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
两种访问方法foo.name与foo[&#39;name&#39;]， 推荐前者(前提是name必须是合法的js标识符)，和
python的dict不同，{}中的name不要加引号，因为这里严格的说是object的属性，而不是key
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;control flow&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
基本和C语言类似，while，for，do…while，if…else if…else,switch…case, break, continue都和C语言差不多，
break,continue和C语言有个区别就是后面可以跟一个label，break后面跟label那么它就不是终止最内层循环，而是终止
label指定的循环，eg：
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-js&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;x&lt;/span&gt; = 0;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;z&lt;/span&gt; = 0
labelCancelLoops: &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;while&lt;/span&gt; (&lt;span style=&quot;color: #AE81FF;&quot;&gt;true&lt;/span&gt;) {
    console.log(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Outer loops: &quot;&lt;/span&gt; + x);
    x += 1;
    z = 1;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;while&lt;/span&gt; (&lt;span style=&quot;color: #AE81FF;&quot;&gt;true&lt;/span&gt;) {
        console.log(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Inner loops: &quot;&lt;/span&gt; + z);
        z += 1;
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (z === 10 &amp;amp;&amp;amp; x === 10) {
            &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;break&lt;/span&gt; labelCancelLoops;
        } &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (z === 10) {
            &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;break&lt;/span&gt;;
        }
    }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
break labelCancelLoops会终止最外层那个循环，continue后面跟label也和这类似，continue如果有label，那么它会终
止当前循环，而开始新一轮的label指定的循环
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;for (key in obj) : 对于C语言类似的数组，它会获得index，而对于关联数组则会获得key,
所以取值需要obj[key]，但是这种循环不建议使用，因为它实际是遍历原型链，所以你无法
保证顺序，也会做很多无用功
&lt;/li&gt;
&lt;li&gt;for each (var item in obj): item会赋值为值，而不是key
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;function&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;definition
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-js&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;square&lt;/span&gt;(&lt;span style=&quot;color: #FD971F;&quot;&gt;number&lt;/span&gt;) {
  &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; number * number;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;基本特性
js的函数是first class object，所以它可以作为参数传递，也可以作为返回值返回，支持闭包与匿名函数，它的很多
地方借鉴了lisp的特性，下面是一些示例代码：
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-js&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;define a function if num==0&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;myFunc&lt;/span&gt;;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (num == 0){
  myFunc = &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #FD971F;&quot;&gt;theObject&lt;/span&gt;) {
    theObject.make = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Toyota&quot;&lt;/span&gt;
  }
}

&lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;closure&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;pet&lt;/span&gt; = &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #FD971F;&quot;&gt;name&lt;/span&gt;) {          &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;The outer function defines a variable called &quot;name&quot;&lt;/span&gt;
      &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;getName&lt;/span&gt; = &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt;() {
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; name;                &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;The inner function has access to the &quot;name&quot; variable of the outer function&lt;/span&gt;
      }

      &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; getName;               &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Return the inner function, thereby exposing it to outer scopes&lt;/span&gt;
    },
    myPet = pet(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Vivie&quot;&lt;/span&gt;);

myPet();                            &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Returns &quot;Vivie&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;内置的函数
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;eval:运行js代码
&lt;/li&gt;
&lt;li&gt;isFinite: test a number if it is a finite number
&lt;/li&gt;
&lt;li&gt;isNaN: is not a number
&lt;/li&gt;
&lt;li&gt;parseInt,parseFloat: 将字符串转换为整数或者浮点数
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;client-side javascript&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;js运行方式&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;&amp;lt;script&amp;gt;…..&amp;lt;/script&amp;gt;内嵌
&lt;/li&gt;
&lt;li&gt;&amp;lt;script src=&quot;path-to-js-file&quot;&amp;gt; &amp;lt;/script&amp;gt; 外部js文件
&lt;/li&gt;
&lt;li&gt;事件处理，比如button的 onclick, onmouseover等等
&lt;/li&gt;
&lt;li&gt;javascript urls
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;任何能使用url的地方，比如 a 标签的href，form的action使用如下代码：
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt;&amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;a&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;href&lt;/span&gt;=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;javascript: alert(&#39;hello world&#39;);&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;a&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这相当于单行代码，以javascript：开头，告诉浏览器下面的是js代码，当这行js有返回值时，firefox会替换掉当
前的页面为js的执行结果，所以如果要阻止这种行为，那么可以统一在js代码的前面加上void ，比如
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt;&amp;lt;&lt;span style=&quot;color: #A6E22E;&quot;&gt;a&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;href&lt;/span&gt;=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;javascript:void new Date().toLocaleTimeString();&quot;&lt;/span&gt;&amp;gt;Check the time without overwriting the document&amp;lt;/&lt;span style=&quot;color: #A6E22E;&quot;&gt;a&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Bookmarklets
加入书签，那么这段代码就相当于直接插入了当前页面，比如订阅到鲜果的书签：
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-js&quot;&gt;javascript:window.open(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;http://xianguo.com/subscribe?url=&#39;&lt;/span&gt;+encodeURIComponent(location.href),&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;xianguo&#39;&lt;/span&gt;);&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;void&lt;/span&gt;(0)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;global window object&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-2-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-2-1&quot;&gt;timers&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;setTimeout(callback, timeout) : 只运行一次callback，返回值可以传递给clearTimeout来清除定时器
&lt;/li&gt;
&lt;li&gt;clearTimeout()
&lt;/li&gt;
&lt;li&gt;setInterval(callback, interval) : 每隔interval就运行一次callback,返回值可以传递给clearInterval来清除定
时器
&lt;/li&gt;
&lt;li&gt;clearInterval()
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-2-2&quot;&gt;window.location&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2-2&quot;&gt;
&lt;p&gt;
window.location指向一个Location object,这个object有一系列的属性,以
&lt;a href=&quot;http://www.oreilly.com:1234/catalog/search.html?q=JavaScript&amp;amp;m=10#results&quot;&gt;http://www.oreilly.com:1234/catalog/search.html?q=JavaScript&amp;amp;m=10#results&lt;/a&gt; 为例
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;href:         整个url,如果对该属性赋值,则可以重定向到新url
&lt;/li&gt;
&lt;li&gt;protocal:     &#39;http:&#39;
&lt;/li&gt;
&lt;li&gt;host:         &#39;http://www.oreilly.com:1234&#39;
&lt;/li&gt;
&lt;li&gt;hostname:     &#39;http://www.oreilly.com&#39;
&lt;/li&gt;
&lt;li&gt;port:         &#39;1234&#39; 是一个字符串,不是数字
&lt;/li&gt;
&lt;li&gt;pathname:     &#39;/catalog/search.html&#39;
&lt;/li&gt;
&lt;li&gt;search:       &#39;?q=JavaScript&amp;amp;m=10&#39;
&lt;/li&gt;
&lt;li&gt;hash:         &#39;#results&#39;   anchor part of url
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-2-3&quot;&gt;window.history&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;history.forward(): 前进
&lt;/li&gt;
&lt;li&gt;history.back(): 后退
&lt;/li&gt;
&lt;li&gt;history.go(2), history.go(-2) : 前进2个页面,后退两个页面
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-2-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-2-4&quot;&gt;window.navigator&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;appName:
&lt;/li&gt;
&lt;li&gt;appVersion:
&lt;/li&gt;
&lt;li&gt;userAgent:
&lt;/li&gt;
&lt;li&gt;paltForm
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-2-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-2-2-5&quot;&gt;window.document&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;jquery&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;一些惯例以及基本常识&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;在jquery中 $ 就是jQuery的简写,故$.trim 就是jQuery.trim的等价表示
&lt;/li&gt;
&lt;li&gt;$(function(…){…})是$(document).ready(function(…){…})的简写
&lt;/li&gt;
&lt;li&gt;给超链接添加click事件时,应该返回false,因为这样浏览器会认为用户没有点击超链接,从而阻止浏览器跳转
&lt;/li&gt;
&lt;li&gt;DOM元素与jquery元素(this是DOM对象, $(this)是jquery对象)
前者是html文档的DOM树中的一个节点,可以使用getElementById得到,DOM对象可以使用\javascript的方法,比如
innerHTML, 后者是jquery包装DOM元素后产生的对象, 只能使用jquery的方法比如.html(), .text()

&lt;p&gt;
二者之间的相互转换:
DOM ===&amp;gt; jquery : $jqueryObj = $(DOMObj) 直接用$包裹DOM对象即可转换为jquery对象
jquery===&amp;gt; DOM  : DOMObj = $jqueryObj&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; jquery对象是一个数组对象,一个jquery对象可以包含多个DOM对象,所
以可以通过index或者get(idx)来获得DOM对象
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot;&gt;jquery selector&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;p&gt;
jQuery的基本语法是：$(selector).action(), 常用的选择器有：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;tag:   $(&quot;p&quot;)
&lt;/li&gt;
&lt;li&gt;#id
&lt;/li&gt;
&lt;li&gt;.class
&lt;/li&gt;
&lt;li&gt;$(tag.class) : 选取tag且class属性为class元素
&lt;/li&gt;
&lt;li&gt;$(tag#id, tag.class): 有逗号就意味着平等,所以等价于 $(tag#id) + $(tag.class)
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
&lt;b&gt;层次选择器(获取后代元素,子元素,兄弟元素,相邻元素等)&lt;/b&gt;
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;$(&#39;body div&#39;) : body中的所有div元素
&lt;/li&gt;
&lt;li&gt;$(&#39;body &amp;gt; div&#39;) : body的div子元素(注意只包括直接子元素,这是和前者的区别, 并不递归的包含,也就是子元素内
div元素并不被该模式识别)
&lt;/li&gt;
&lt;li&gt;$(&#39;.one + div&#39;) : class为one的元素的下一个div兄弟元素,可以用  $(&#39;.one&#39;).next(&#39;div&#39;)代替
&lt;/li&gt;
&lt;li&gt;$(&#39;.one ~ div&#39;) : class为one的元素后的所有div兄弟元素, 可以用 $(&#39;.one&#39;).nextAll(&#39;div&#39;)代替
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
&lt;b&gt;过滤选择器&lt;/b&gt;
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;基本过滤选择器
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;:first, :last  :第一个,最后一个
&lt;/li&gt;
&lt;li&gt;:not(selector): 所有不是指定selector的元素,eg: $(ul li:gt(5):not(:last))会选定ul下li索引大于5且不包含最
后一个li元素的li元素集合
&lt;/li&gt;
&lt;li&gt;:even, :odd, :gt(idx), :lt(idx), :eq(idx)  :
&lt;/li&gt;
&lt;li&gt;:header: 所有标题元素(h1~h6)
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;可见性
&lt;p&gt;
:hidden  :隐藏的元素
&lt;/p&gt;
&lt;p&gt;
:visible  :可见的元素
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;属性过滤选择器
[attribute]        : 含有attribute属性的元素
[attribute=value]  : attribute属性的值等于value的元素
[attribute^=value] : attribute属性的值以value开头的元素
[attribute$=value] : attribute属性的值以value结尾的元素
[attribute!=value] : attribute属性的值不等于value的元素
[attribute*=value] : attribute属性的值含有value的元素
[selector1][selector2] : 复合选择器
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-3&quot;&gt;DOM操作&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;插入节点 $(A).xxx(B) 其中xxx代替下面的函数，注意当A是元素集合时，那么B插入A时会将B插入每个A元素，反之
亦然
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;append, appendTo : 前者是B作为最后一个子元素插入A中,后者相反,是A作为最后一个子元素插入B中
&lt;/li&gt;
&lt;li&gt;prepend, prependTo : 前者是B作为第一个子元素插入A中,后者相反,是A作为第一个子元素插入B中
&lt;/li&gt;
&lt;li&gt;after, insertAfter : 前者是B作为一个兄弟元素插入A之后,后者相反,是A作为一个兄弟元素插入B之后
&lt;/li&gt;
&lt;li&gt;before, insertBefore : 前者是B作为一个兄弟元素插入A之前,后者相反,是A作为一个兄弟元素插入B之前
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;删除节点
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;.remove : 删除节点
&lt;/li&gt;
&lt;li&gt;.empty  ：清空节点内容
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;复制节点
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;.clone : 复制节点，如果.clone(true)会复制绑定的事件
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;替换节点
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;.replaceWith:
&lt;/li&gt;
&lt;li&gt;.replaceAll : 二者作用相同，可是方向相反
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;包裹节点
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;wrap
&lt;/li&gt;
&lt;li&gt;wrapAll
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;属性操作
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;.attr ：一个参数是获取，两个参数是设置
&lt;/li&gt;
&lt;li&gt;.removeAttr: 删除参数指定的属性
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;样式操作： 样式实际就是class属性，所以可以通过.attr(&#39;class&#39;)来获得并进行操作，注意和css区别，css指定某
一项css样式比如background-color，而这里指的是样式表中定义的类样式（css文件中以.开头样式规则）可是为了方
便jquery提供了专门的api
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;.addClass: 在class属性中添加一个样式
&lt;/li&gt;
&lt;li&gt;removeClass：
&lt;/li&gt;
&lt;li&gt;toggleClass： 在属性来回的切回，如果存在那就删除，如果不存在那就添加
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;获得html，文本，值 （无参数是获取，一个参数是设置）
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;html: 注意是innerHTML
&lt;/li&gt;
&lt;li&gt;text: 会去掉html标签
&lt;/li&gt;
&lt;li&gt;val: 表单元素的值
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;遍历节点
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;children：所有的子节点
&lt;/li&gt;
&lt;li&gt;next ： 紧挨着的下一个同辈节点
&lt;/li&gt;
&lt;li&gt;prev : 紧挨着的上一个同辈节点
&lt;/li&gt;
&lt;li&gt;siblings： 所有的兄弟节点
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;css-DOM
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;offset: 离窗口的距离(left,top)
&lt;/li&gt;
&lt;li&gt;position
&lt;/li&gt;
&lt;li&gt;offsetTop offsetLeft : 元素的滚动条相对于顶部的距离
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-4&quot;&gt;jquery事件&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;.bind : 可以通过该方法将特定函数绑定到特定的事件上eg:
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-javascript&quot;&gt;$(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;div.li&#39;&lt;/span&gt;).bind(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt;(){
  alert(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;clicked&#39;&lt;/span&gt;);
})
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
同理可以绑定mouseover,mouseout,focus,blur等等,但因为有些事件很常用,所以jquery提供了简写方法
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;.click
&lt;/li&gt;
&lt;li&gt;.mouseover, .mouseout
&lt;/li&gt;
&lt;li&gt;合成事件: .hover 与.toggle是jquery的两个自定义事件
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;hover(enter, leave) : 鼠标进入时调用enter,鼠标离开时调用leave
&lt;/li&gt;
&lt;li&gt;toggle(f1, f2, … fN) : 模拟鼠标单击,第一次单击调用f1, 第N次单击调用fN,第N+1次调用f1
&lt;/li&gt;
&lt;li&gt;toggle()  :无参数调用时不是绑定click事件,而是使元素在显示与隐藏状态切换,也就是该元素已显示,那么调用
toggle()就会隐藏该元素,如果该元素已隐藏,那么调用toggle()就会显示该元素,这和toggleClass类似
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;时间冒泡
当元素嵌套，而且父元素也绑定了同一事件，那么会同时触发父元素的事件处理函数，为了阻止这种行为可以用一下
代码：
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-javascript&quot;&gt;$(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt;(){
  $(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;#sub&quot;&lt;/span&gt;).bind(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;click&quot;&lt;/span&gt;,&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #FD971F;&quot;&gt;event&lt;/span&gt;){
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;username&lt;/span&gt; = $(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;#username&quot;&lt;/span&gt;).val();  &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;获取元素的值&lt;/span&gt;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt;(username==&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;&quot;&lt;/span&gt;){     &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;判断值是否为空&lt;/span&gt;
      $(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;#msg&quot;&lt;/span&gt;).html(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;&amp;lt;p&amp;gt;文本框的值不能为空.&amp;lt;/p&amp;gt;&quot;&lt;/span&gt;);  &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;提示信息&lt;/span&gt;

      event.stopPropagation();  &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;阻止事件冒泡&lt;/span&gt;
      event.preventDefault();  &lt;span style=&quot;color: #75715E;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;阻止默认行为 ( 表单提交，链接(a)跳转等 )&lt;/span&gt;
      &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;如果既要阻止事件冒泡又要阻止默认行为，那么可以直接通过&lt;/span&gt;
      &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return false; 来实现&lt;/span&gt;
    }
  })
})
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
给回调函数添加一个event参数，并且调用event.stopPropagation()方法，这样就可以阻止事件冒泡，也就是对sub的
click不会触发sub的父元素的click事件，
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;模拟事件(不是用户触发，而是通过js模拟触发)
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;.trigger: $(&#39;#btn&#39;).trigger(&#39;click) 触发click事件， 也可以直接$(&#39;#btn&#39;).click()
&lt;/li&gt;
&lt;li&gt;传递数据： .trigger(type, [.data])
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-5&quot;&gt;jquery动画&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-5&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;.hide([speed]), .show([speed]), .taggle([speed]) : 显示，隐藏，如果指定speed，那么会渐变的改变元素的高
度
&lt;/li&gt;
&lt;li&gt;.fadeIn([speed]), fadeOut([speed]), .fadeToggle([speed])  :显示，隐藏，如果指定speed，那么会渐变的改变
元素的透明度，直到元素消失或者显示，也就是动画过程中元素的高度是不变的
&lt;/li&gt;
&lt;li&gt;slideUp， slideDown，slideToggle：滑动效果
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-6&quot;&gt;ajax&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-6&quot;&gt;
&lt;p&gt;
jquery ajax的回调函数的原型：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;.load: function callback(responseText, statusText, XMLHttpRequest)
&lt;/li&gt;
&lt;li&gt;$.get, $.post, $.ajax: function callback(data, statusText)
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
其中textStatus可以是&#39;success&#39;, &#39;error&#39;, &#39;notmodified&#39;, &#39;timeout&#39;
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;.load(url [, data] [, callback]) :将返回的html插入DOM元素中, callback无论请求成功与否都会调用
&lt;/li&gt;
&lt;li&gt;$.get(url [, data] [[, callback] [, type]) : type可以是&quot;html&quot;，&quot;xml&quot;，&quot;json&quot;, callback只有在请求成功
(http 200)时才调用
&lt;/li&gt;
&lt;li&gt;$.post : 和$.get类似，只是通过post传送数据
&lt;/li&gt;
&lt;li&gt;$.getScript, $.getJSON :前者可以用来加载js文件，后者用来获取json用来给回调函数操作
&lt;/li&gt;
&lt;li&gt;$.ajax(options) :
&lt;/li&gt;
&lt;li&gt;.serialize() :在form提交时可以直接序列化form内的数据填入data域，返回字符串
&lt;/li&gt;
&lt;li&gt;.serializeArray() : 和serialize方法类似，不过不返回字符串，而是返回json数据
&lt;/li&gt;
&lt;li&gt;$.param() : $.param({a:1, b:2, c:3}) ====&amp;gt; a=1&amp;amp;b=2&amp;amp;c=3, 该方法是.serialize方法的核心
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-7&quot;&gt;jquery常用插件&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-7&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;jquery.form
可以很方便的将你的form变成ajax版
&lt;/li&gt;
&lt;li&gt;jquery blockUI
代替alert
&lt;/li&gt;
&lt;li&gt;jquery fancybox
对于图片，可以弹出显示，效果很不错，而且还可以支持鼠标滚轮
&lt;/li&gt;
&lt;li&gt;jVectorMap
可以用来显示地图,并且在地图上标注地点
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;p&gt;DEFINITION NOT FOUND.&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt; </content>
  </entry>
  
  <entry>
    <id>logion-apothegm.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/logion-apothegm.html"/>
    <title>logion and apothegm</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;logion and apothegm&lt;/h1&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;hope is a good thing, maybe the best of things
&lt;/li&gt;
&lt;li&gt;get busy living or get busy dying
&lt;/li&gt;
&lt;li&gt;为天地立心,为生民立命,为往圣继绝学,为万世开太平
&lt;/li&gt;
&lt;li&gt;人我之际要看得平：平则不忮，功名之际要看得淡：淡则不求，生死之际要看得破：
破则不惧。人能不忮不求不惧，则无往而非乐境而生气盎然矣  –—戴安澜
&lt;/li&gt;
&lt;li&gt;如果额头终将刻上皱纹,那么你只能做到不让皱纹刻在心里   –—中国合伙人
&lt;/li&gt;
&lt;li&gt;很多人的努力程度之低，根本谈不上比天赋
&lt;/li&gt;
&lt;li&gt;我们曾如此渴望命运的波澜，到最后才发现：人生最曼妙的风景，竟是内心的淡定与从容……我们曾如此期盼外界的认可，
到最后才知道：世界是自己的，与他人毫无关系。
&lt;/li&gt;
&lt;li&gt;你的优秀与我的人生无关,请带着你趾高气扬滚蛋
&lt;/li&gt;
&lt;/ol&gt; </content>
  </entry>
  
  <entry>
    <id>index.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/index.html"/>
    <title>Home Page</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 

    
&lt;h1 class=&quot;title&quot;&gt;post list&lt;/h1&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Emacs&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;a href=&quot;emacs.html&quot;&gt;emacs/elisp笔记&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;programming language&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;a href=&quot;scheme.html&quot;&gt;scheme笔记&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;php.html&quot;&gt;php笔记&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;python-note.html&quot;&gt;python笔记&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;javascript.html&quot;&gt;javascript笔记&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;linux-c-garbled-characters.html&quot;&gt;Linux C语言乱码处理&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;web&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;a href=&quot;css.html&quot;&gt;css笔记&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;django.html&quot;&gt;django笔记&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;wsgi.html&quot;&gt;wsgi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;gevent.html&quot;&gt;gevent笔记与源码分析&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;tools&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;a href=&quot;git.html&quot;&gt;git/github笔记&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;code-snippet.html&quot;&gt;有用的代码片段&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;math&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;a href=&quot;set-theory.html&quot;&gt;SET THEORY(30%)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;reading-notes/Probability.html&quot;&gt;概率论与数理统计&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;reading notes&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;a href=&quot;reading-notes/sicp.html&quot;&gt;SICP&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;reading-notes/python-source-code.html&quot;&gt;python源代码剖析&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;reading-notes/second-treatise-civil-government.html&quot;&gt;政府论&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;reading-notes/%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97.html&quot;&gt;乌合之众&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;reading-notes/EOPL.html&quot;&gt;Essentials of Programming Languages(Daniel P. Friedman)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;others&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;a href=&quot;reading-notes/how-to-study.html&quot;&gt;如何快速学习&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;investment.html&quot;&gt;Investment&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;funny-video.html&quot;&gt;我喜欢的视频&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;org-mode-dropbox-blog.html&quot;&gt;用org-mode与dropbox搭建静态博客&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;logion-apothegm.html&quot;&gt;格言&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;


  </content>
  </entry>
  
  <entry>
    <id>python-descriptor.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/python-descriptor.html"/>
    <title>python Descriptor</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;python Descriptor&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;Abstract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;Definition and Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;Descriptor Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-4&quot;&gt;Invoking Descriptors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-5&quot;&gt;Descriptor Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-6&quot;&gt;Properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-7&quot;&gt;Functions and Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-8&quot;&gt;Static Methods and Class Methods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;
Location: &lt;a href=&quot;http://users.rcn.com/python/download/Descriptor.htm&quot;&gt;http://users.rcn.com/python/download/Descriptor.htm&lt;/a&gt; How-To Guide for Descriptors
&lt;/p&gt;

&lt;p&gt;
Author: Raymond Hettinger Contact: &amp;lt;python at rcn dot com&amp;gt; Copyright: Copyright (c) 2003, 2004 Python Software
Foundation. All rights reserved.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Abstract&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
Defines descriptors, summarizes the protocol, and shows how descriptors are called. Examines a custom
descriptor and several built-in python descriptors including functions, properties, static methods, and
class methods. Shows how each works by giving a pure Python equivalent and a sample application.
&lt;/p&gt;

&lt;p&gt;
Learning about descriptors not only provides access to a larger toolset, it creates a deeper understanding
of how Python works and an appreciation for the elegance of its design.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Definition and Introduction&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
In general, a descriptor is an object attribute with &quot;binding behavior&quot;, one whose attribute access has
been overridden by methods in the descriptor protocol. Those methods are &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;get&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;set&lt;/span&gt;&lt;/span&gt;, and
&lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;delete&lt;/span&gt;&lt;/span&gt;. If any of those methods are defined for an object, it is said to be a descriptor.
&lt;/p&gt;

&lt;p&gt;
The default behavior for attribute access is to get, set, or delete the attribute from an object&#39;s
dictionary. For instance, a.x has a lookup chain starting with a._&lt;sub&gt;dict&lt;/sub&gt;_&lt;sub&gt;[&#39;x&#39;]&lt;/sub&gt;, then type(a)._&lt;sub&gt;dict&lt;/sub&gt;_&lt;sub&gt;[&#39;x&#39;]&lt;/sub&gt;,
and continuing through the base classes of type(a) excluding metaclasses. If the looked-up value is an
object defining one of the descriptor methods, then Python may override the default behavior and invoke the
descriptor method instead. Where this occurs in the precedence chain depends on which descriptor methods
were defined. Note that descriptors are only invoked for new style objects or classes (a class is new style
if it inherits from object or type).
&lt;/p&gt;

&lt;p&gt;
Descriptors are a powerful, general purpose protocol. They are the mechanism behind properties, methods,
static methods, class methods, and super(). They are used used throughout Python itself to implement the
new style classes introduced in version 2.2. Descriptors simplify the underlying C-code and offer a
flexible set of new tools for everyday Python programs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Descriptor Protocol&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;descr._&lt;sub&gt;get&lt;/sub&gt;_&lt;sub&gt;(self, obj, type=None)&lt;/sub&gt; –&amp;gt; value
&lt;/li&gt;

&lt;li&gt;descr._&lt;sub&gt;set&lt;/sub&gt;_&lt;sub&gt;(self, obj, value)&lt;/sub&gt; –&amp;gt; None
&lt;/li&gt;

&lt;li&gt;descr._&lt;sub&gt;delete&lt;/sub&gt;_&lt;sub&gt;(self, obj)&lt;/sub&gt; –&amp;gt; None
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
That is all there is to it. Define any of these methods and an object is considered a descriptor and can
override default behavior upon being looked up as an attribute.
&lt;/p&gt;

&lt;p&gt;
If an object defines both &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;get&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;set&lt;/span&gt;&lt;/span&gt;, it is considered a data descriptor. Descriptors that only
define &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;get&lt;/span&gt;&lt;/span&gt; are called non-data descriptors (they are typically used for methods but other uses are
possible).
&lt;/p&gt;

&lt;p&gt;
Data and non-data descriptors differ in how overrides are calculated with respect to entries in an
instance&#39;s dictionary. If an instance&#39;s dictionary has an entry with the same name as a data descriptor,
the data descriptor takes precedence. If an instance&#39;s dictionary has an entry with the same name as a
non-data descriptor, the dictionary entry takes precedence.
&lt;/p&gt;

&lt;p&gt;
To make a read-only data descriptor, define both &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;get&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;set&lt;/span&gt;&lt;/span&gt; with the &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;set&lt;/span&gt;&lt;/span&gt; raising an
AttributeError when called. Defining the &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;set&lt;/span&gt;&lt;/span&gt; method with an exception raising placeholder is enough to
make it a data descriptor.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Invoking Descriptors&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
A descriptor can be called directly by its method name. For example, d._&lt;sub&gt;get&lt;/sub&gt;_&lt;sub&gt;(obj)&lt;/sub&gt;.
&lt;/p&gt;

&lt;p&gt;
Alternatively, it is more common for a descriptor to be invoked automatically upon attribute access. For
example, obj.d looks up d in the dictionary of obj.  If d defines the method &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;get&lt;/span&gt;&lt;/span&gt;, then d._&lt;sub&gt;get&lt;/sub&gt;_&lt;sub&gt;(obj)&lt;/sub&gt;
is invoked according to the precedence rules listed below.
&lt;/p&gt;

&lt;p&gt;
The details of invocation depend on whether obj is an object or a class. Either way, descriptors only work
for new style objects and classes. A class is new style if it is a subclass of object.
&lt;/p&gt;

&lt;p&gt;
For objects, the machinery is in object._&lt;sub&gt;getattribute&lt;/sub&gt;__ which transforms b.x into
type(b)._&lt;sub&gt;dict&lt;/sub&gt;_&lt;sub&gt;[&#39;x&#39;]&lt;/sub&gt;._&lt;sub&gt;get&lt;/sub&gt;_&lt;sub&gt;(b, type(b))&lt;/sub&gt;. The implementation works through a precedence chain that gives
data descriptors priority over instance variables, instance variables priority over non-data descriptors,
and assigns lowest priority to &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;getattr&lt;/span&gt;&lt;/span&gt; if provided. The full C implementation can be found in
PyObject&lt;sub&gt;GenericGetAttr&lt;/sub&gt;() in Objects/object.c.
&lt;/p&gt;

&lt;p&gt;
For classes, the machinery is in type._&lt;sub&gt;getattribute&lt;/sub&gt;__ which transforms B.x into
B._&lt;sub&gt;dict&lt;/sub&gt;_&lt;sub&gt;[&#39;x&#39;]&lt;/sub&gt;._&lt;sub&gt;get&lt;/sub&gt;_&lt;sub&gt;(None, B)&lt;/sub&gt;. In pure Python, it looks like:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__getattribute__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, key):
    &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Emulate type_getattro() in Objects/typeobject.c&quot;&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;v&lt;/span&gt; = &lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;.__getattribute__(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, key)
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;hasattr&lt;/span&gt;(v, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;__get__&#39;&lt;/span&gt;):
       &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; v.__get__(&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;, &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;)
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; v
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The important points to remember are:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;descriptors are invoked by the &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;getattribute&lt;/span&gt;&lt;/span&gt; method
&lt;/li&gt;
&lt;li&gt;overriding &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;getattribute&lt;/span&gt;&lt;/span&gt; prevents automatic descriptor calls
&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;getattribute&lt;/span&gt;&lt;/span&gt; is only available with new style classes and objects
&lt;/li&gt;
&lt;li&gt;object._&lt;sub&gt;getattribute&lt;/sub&gt;__ and type._&lt;sub&gt;getattribute&lt;/sub&gt;__ make different calls to &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;get&lt;/span&gt;&lt;/span&gt;.
&lt;/li&gt;
&lt;li&gt;data descriptors always override instance dictionaries.
&lt;/li&gt;
&lt;li&gt;non-data descriptors may be overridden by instance dictionaries.
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
The object returned by super() also has a custom &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;getattribute&lt;/span&gt;&lt;/span&gt; method for inv ng descriptors. The call
super(B, obj).m() sea ches obj._&lt;sub&gt;class&lt;/sub&gt;__._&lt;sub&gt;mro&lt;/sub&gt;__ for the base class A immed ely following B and then returns
A._&lt;sub&gt;dict&lt;/sub&gt;_&lt;sub&gt;[&#39;m&#39;]&lt;/sub&gt;._&lt;sub&gt;get&lt;/sub&gt;_&lt;sub&gt;(obj, A)&lt;/sub&gt;. If not a descriptor, m is return unchanged. If not in the dictionary, m
reverts to a search using object._&lt;sub&gt;getattribute&lt;/sub&gt;__.
&lt;/p&gt;

&lt;p&gt;
Note, in Python 2.2, super(B, obj).m() would only invoke &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;get&lt;/span&gt;&lt;/span&gt; if m was a data scriptor. In Python 2.3,
non-data descriptors also get invoked unless an old-style class is involved. The plementation details are in
super&lt;sub&gt;getattro&lt;/sub&gt;() in Objects/typeobject.c and a pure Python equivalent can be found in &lt;a href=&quot;http://www.python.org/2.2.3/descrintro.  tml#cooperation&quot;&gt;Guido&#39;s&lt;/a&gt; &lt;a href=&quot;http://www.python.org/2.2.3/descrintro.html#cooperation&quot;&gt;Tutorial&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
The details above show that the mechanism for descriptors is embedded in the _&lt;sub&gt;g&lt;/sub&gt; ttribute_&lt;sub&gt;()&lt;/sub&gt; methods for
object, type, and uper. Classes inherit this machinery when they derive fr object or if they have a
meta-class providing similar functionality. Likewise, classes can turn-o descriptor invocation by overriding
_&lt;sub&gt;getattribute&lt;/sub&gt;_&lt;sub&gt;()&lt;/sub&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;Descriptor Example&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;p&gt;
The following code creates a class whose objects are data descriptors which prin message for each get or
set. Overriding &lt;span class=&quot;underline&quot;&gt;_ etattribute_&lt;/span&gt; is alternate approach that could do this fo ery attribute. However, this
descriptor is useful for monitoring just a few chosen attributes:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;RevealAccess&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;&quot;&quot;A data descriptor that sets and returns values&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;       normally and prints a message logging their access.&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__init__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, initval=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;, name=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;var&#39;&lt;/span&gt;):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.val = initval
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.name = name

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__get__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, obj, objtype):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Retrieving&#39;&lt;/span&gt;, &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.name
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.val

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__set__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, obj, val):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Updating&#39;&lt;/span&gt; , &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.name
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.val = val

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;MyClass&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    &lt;span style=&quot;color: #FD971F;&quot;&gt;x&lt;/span&gt; = RevealAccess(10, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;var &quot;x&quot;&#39;&lt;/span&gt;)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;y&lt;/span&gt; = 5

&amp;gt;&amp;gt;&amp;gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;m&lt;/span&gt; = MyClass()
&amp;gt;&amp;gt;&amp;gt; m.x
Retrieving var &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;x&quot;&lt;/span&gt;
10
&amp;gt;&amp;gt;&amp;gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;m.x&lt;/span&gt; = 20
Updating var &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;x&quot;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; m.x
Retrieving var &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;x&quot;&lt;/span&gt;
20
&amp;gt;&amp;gt;&amp;gt; m.y
5
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The protocol is simple and offers exciting possibilities. Several use cases a o common that they have been
packaged into ndividual function calls.  Properties, bound and unbound m ds, static methods, and class
methods are all based on the descriptor protocol.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;Properties&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;p&gt;
Calling property() is a succinct way of building a data descriptor that triggers ction calls upon access to
an attribute. Its signature is:
&lt;/p&gt;

&lt;p&gt;
property(fget=None, fset=None, fdel=None, doc=None) -&amp;gt; property attribute
&lt;/p&gt;

&lt;p&gt;
The documentation shows a typical use to define a managed attribute x:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;C&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;getx&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;): &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.__x
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;setx&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, value): &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.__x = value
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;delx&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;): &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;del&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.__x
    &lt;span style=&quot;color: #FD971F;&quot;&gt;x&lt;/span&gt; = &lt;span style=&quot;color: #A6E22E;&quot;&gt;property&lt;/span&gt;(getx, setx, delx, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;I&#39;m the &#39;x&#39; property.&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
To see how property() is implemented in terms of the descriptor protocol, here is a pure Python equivalent:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Property&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Emulate PyProperty_Type() in Objects/descrobject.c&quot;&lt;/span&gt;

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__init__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, fget=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;, fset=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;, fdel=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;, doc=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.fget = fget
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.fset = fset
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.fdel = fdel
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.&lt;span style=&quot;color: #A6E22E;&quot;&gt;__doc__&lt;/span&gt; = doc

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__get__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, obj, objtype=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; obj &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;is&lt;/span&gt; &lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;:
            &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.fget &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;is&lt;/span&gt; &lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;:
            &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;raise&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;AttributeError&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;unreadable attribute&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.fget(obj)

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__set__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, obj, value):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.fset &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;is&lt;/span&gt; &lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;:
            &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;raise&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;AttributeError&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;can&#39;t set attribute&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.fset(obj, value)

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__delete__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, obj):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.fdel &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;is&lt;/span&gt; &lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;:
            &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;raise&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;AttributeError&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;can&#39;t delete attribute&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.fdel(obj)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
The property() builtin helps whenever a user interface has granted attribute ess and then subsequent
changes require the intervention of a method.
&lt;/p&gt;

&lt;p&gt;
For instance, a spreadsheet class may grant access to a cell value through Ce b10&#39;).value. Subsequent
improvements to the pro ram require the cell to be recalculated on every acce however, the programmer does
not want to affect existing client code accessing the attribute direct The solution is to wrap access to
the value attribute in a property() data descriptor:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Cell&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    . . .
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;getvalue&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, obj):
        &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Recalculate cell before returning value&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.recalc()
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; obj._value
    &lt;span style=&quot;color: #FD971F;&quot;&gt;value&lt;/span&gt; = &lt;span style=&quot;color: #A6E22E;&quot;&gt;property&lt;/span&gt;(getvalue)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;Functions and Methods&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;p&gt;
Python&#39;s object oriented features are built upon a function based environment.  g non-data descriptors, the
two are merged seamlessly.
&lt;/p&gt;

&lt;p&gt;
Class dictionaries store methods as functions. In a class definition, method e written using def and
lambda, the usual tools or creating functions. The only difference from re r functions is that the first
argument is reserved for the object instance. By Python convention the i nce reference is called self but
may be called this or any other variable name.
&lt;/p&gt;

&lt;p&gt;
To support method calls, functions include the &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;get&lt;/span&gt;&lt;/span&gt; method for bindi ethods during attribute
access. This means that all functions are non-data descriptors which retu ound or unbound methods depending
whether they are invoked from an object or a class. In pure python, it works like this:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Function&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    . . .
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__get__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, obj, objtype=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;):
        &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Simulate func_descr_get() in Objects/funcobject.c&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; types.MethodType(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, obj, objtype)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Running the interpreter shows how the function descriptor works in practice:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; class D(object):
  def f(self, x):
       return x

&amp;gt;&amp;gt;&amp;gt; d = D()
&amp;gt;&amp;gt;&amp;gt; D.__dict__[&#39;f&#39;] # Stored internally as a function
&amp;lt;function f at 0x00C45070&amp;gt;
&amp;gt;&amp;gt;&amp;gt; D.f             # Get from a class becomes an unbound method
&amp;lt;unbound method D.f&amp;gt;
&amp;gt;&amp;gt;&amp;gt; d.f             # Get from an instance becomes a bound method
&amp;lt;bound method D.f of &amp;lt;__main__.D object at 0x00B18C90&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
The output suggests that bound and unbound methods are two different types. le they could have been
implemented that way, t e actual C implemention of PyMethod&lt;sub&gt;Type&lt;/sub&gt; in Object assobject.c is a single object
with two different representations depending on whether the im&lt;sub&gt;self&lt;/sub&gt; fie s set or is NULL (the C equivalent
of None).
&lt;/p&gt;

&lt;p&gt;
Likewise, the effects of calling a method object depend on the im&lt;sub&gt;self&lt;/sub&gt; field.  et (meaning bound), the
original function (stor d in the im&lt;sub&gt;func&lt;/sub&gt; field) is called as expected with th rst argument set to the
instance. If unbound, all of the arguments are passed unchanged to the orig function. The actual C
implementation of instancemethod&lt;sub&gt;call&lt;/sub&gt;() is only slightly more complex in t it includes some type checking.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-8&quot;&gt;Static Methods and Class Methods&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;p&gt;
Non-data descriptors provide a simple mechanism for variations on the usual pa ns of binding functions into
methods.
&lt;/p&gt;

&lt;p&gt;
To recap, functions have a &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;get&lt;/span&gt;&lt;/span&gt; method so that they can be converted t method when accessed as
attributes. The non-data de criptor transforms a obj.f (*args) call f(obj, *args). Calling klass.f(*args)
becomes f(*args).
&lt;/p&gt;

&lt;p&gt;
This chart summarizes the binding and its two most useful va riants:
&lt;/p&gt;

&lt;p&gt;
Transforma tion Called from an Object Ca lled from a Cl ass func ion f(obj, gs) f(&lt;b&gt;args) Descripto r sta
icmethod f(&lt;/b&gt; args) f(*args) class method f(type(obj), *args) f(klass, *args)
&lt;/p&gt;

&lt;p&gt;
Static methods return the underlying function without changes. Calling either c r C.f is the equivalent of
a direct lookup i to object._&lt;sub&gt;getattribute&lt;/sub&gt;__ (c, &quot;f&quot;) or object._&lt;sub&gt;getattrib&lt;/sub&gt; _(C, &quot;f&quot;). As a result, the
function becomes identically accessible from either an object or a class.
&lt;/p&gt;

&lt;p&gt;
Good candidates for static methods are methods that do not reference the self variable.
&lt;/p&gt;

&lt;p&gt;
For instance, a statistics package may include a container class for experiment ata. The class provides
normal methods for c mputing the average, mean, median, and other descriptive st tics that depend on the
data. However, there may be useful functions which are conceptually r lat ut do not depend on the data. For
instance, erf(x) is handy conversion routine that comes up in st tical work but does not directly depend on
a articular data set. It can be called either from an obje r the class: s.erf(1.5) –&amp;gt; .9332 or
Sample.erf(1.5) –&amp;gt; .9332.
&lt;/p&gt;

&lt;p&gt;
Since staticmethods return the underlying function with no changes, the example calls are unexciting:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; class E(object):
     def f(x):
          print x
     f = staticmethod(f)

&amp;gt;&amp;gt;&amp;gt; print E.f(3)
3
&amp;gt;&amp;gt;&amp;gt; print E().f(3)
3
&lt;/pre&gt;
&lt;p&gt;
Using the non-data descriptor protocol, a pure Python version of staticmethod() would look like this:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;StaticMethod&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
 &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Emulate PyStaticMethod_Type() in Objects/funcobject.c&quot;&lt;/span&gt;

 &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__init__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, f):
      &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.f = f

 &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__get__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, obj, objtype=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;):
      &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.f
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Unlike static methods, class methods prepend the class reference to the argum list before calling the
function. This format s the same for whether the caller is an object or a class:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; class E(object):
     def f(klass, x):
          return klass.__name__, x
     f = classmethod(f)

&amp;gt;&amp;gt;&amp;gt; print E.f(3)
(&#39;E&#39;, 3)
&amp;gt;&amp;gt;&amp;gt; print E().f(3)
(&#39;E&#39;, 3)
&lt;/pre&gt;
&lt;p&gt;
This behavior is useful whenever the function only needs to have a class refere and does not care about any
underlying data.  ne use for classmethods is to create alternate class const ors. In Python 2.3, the
classmethod dict.fromkeys() creates a new dictionary from a li t of keys. The pure Python equivalent is:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Dict&lt;/span&gt;:
    . . .
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;fromkeys&lt;/span&gt;(klass, iterable, value=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;):
        &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Emulate dict_fromkeys() in Objects/dictobject.c&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #FD971F;&quot;&gt;d&lt;/span&gt; = klass()
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;for&lt;/span&gt; key &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;in&lt;/span&gt; iterable:
            &lt;span style=&quot;color: #FD971F;&quot;&gt;d&lt;/span&gt;[key] = value
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; d
    &lt;span style=&quot;color: #FD971F;&quot;&gt;fromkeys&lt;/span&gt; = &lt;span style=&quot;color: #A6E22E;&quot;&gt;classmethod&lt;/span&gt;(fromkeys)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
Now a new dictionary of unique keys can be constructed like this:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
 &amp;gt;&amp;gt;&amp;gt; Dict.fromkeys(&#39;abracadabra&#39;)
{&#39;a&#39;: None, &#39;r&#39;: None, &#39;b&#39;: None, &#39;c&#39;: None, &#39;d&#39;: None}
&lt;/pre&gt;
&lt;p&gt;
Using the non-data descriptor protocol, a pure Python version of classmethod() would look like this:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;ClassMethod&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
     &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Emulate PyClassMethod_Type() in Objects/funcobject.c&quot;&lt;/span&gt;

     &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__init__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, f):
          &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.f = f

     &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__get__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, obj, klass=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;):
          &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; klass &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;is&lt;/span&gt; &lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;:
               &lt;span style=&quot;color: #FD971F;&quot;&gt;klass&lt;/span&gt; = &lt;span style=&quot;color: #A6E22E;&quot;&gt;type&lt;/span&gt;(obj)
          &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;newfunc&lt;/span&gt;(*args):
               &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.f(klass, *args)
          &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; newfunc
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>python-note.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/python-note.html"/>
    <title>python笔记</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;python笔记&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;python&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;python的编码规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;python 文件处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;杂七杂八&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-3-1&quot;&gt;除法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2&quot;&gt;一些内置函数的解释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-3&quot;&gt;dir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-4&quot;&gt;globals  And lolcals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-5&quot;&gt;getattr   &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;getattr&lt;/span&gt;&lt;/span&gt;  VS  &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;getattribute&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-6&quot;&gt;&lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;import&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;装饰器&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-4-1&quot;&gt;装饰器的基本形式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4-2&quot;&gt;使用类作为装饰器(推荐的做法)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4-3&quot;&gt;使用类作为装饰器装饰类方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4-4&quot;&gt;给装饰器添加参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4-5&quot;&gt;functools模块&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5&quot;&gt;迭代器&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-5-1&quot;&gt;迭代器的基本知识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5-2&quot;&gt;生成器generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5-3&quot;&gt;for循环的迭代过程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6&quot;&gt;模块&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-6-1&quot;&gt;relative import&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7&quot;&gt;OOP&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-7-1&quot;&gt;基本OOP代码示例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7-2&quot;&gt;属性搜索树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7-3&quot;&gt;类的设计&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-7-3-1&quot;&gt;is a&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7-3-2&quot;&gt;has a&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7-4&quot;&gt;常见的运算符重载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7-5&quot;&gt;Descriptor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-8&quot;&gt;python异常&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-8-1&quot;&gt;try … except语句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-8-2&quot;&gt;raise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-8-3&quot;&gt;异常&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9&quot;&gt;python中文处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10&quot;&gt;一些标准库的使用说明&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-10-1&quot;&gt;python 正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10-2&quot;&gt;多线程&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-10-2-1&quot;&gt;Thread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10-2-2&quot;&gt;threading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10-3&quot;&gt;collections&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-10-3-1&quot;&gt;Counter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10-3-2&quot;&gt;deque 双端队列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10-3-3&quot;&gt;defaultdict&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10-3-4&quot;&gt;namedtuple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10-3-5&quot;&gt;OrderedDict&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10-4&quot;&gt;pickle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10-5&quot;&gt;json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10-6&quot;&gt;HTMLParser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-11&quot;&gt;一些第三方库的使用方法&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-11-1&quot;&gt;requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-11-2&quot;&gt;pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-11-3&quot;&gt;pyquery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-11-4&quot;&gt;watchdog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-11-5&quot;&gt;rauth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-12&quot;&gt;常用工具的使用方法&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-12-1&quot;&gt;virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-12-2&quot;&gt;ipython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;python&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;python的编码规范&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;用4个空格缩进
&lt;/li&gt;
&lt;li&gt;每一行不超过80个字符,当一行超过80个字符时,可以用\来连接下一行,当对一个二元操作符断行时,应该将操作符留在
上一行, 对于函数定义以及调用,那么根据括号来对齐.
&lt;/li&gt;
&lt;li&gt;模块内容的顺序：模块说明和docstring —-&amp;gt; import —-&amp;gt; __all__(optional) –&amp;gt; globals and constants —-&amp;gt; 其他定义
&lt;/li&gt;
&lt;li&gt;一行只导入一个模块(不推荐 import sys, os)
&lt;/li&gt;
&lt;li&gt;模块导入顺序: 标准库, 第三方库, 自己编写的库. 三者之间用空行分割, 而且三者应该紧挨着模块字符串的后面
&lt;/li&gt;
&lt;li&gt;模块级别的函数定义, 类定义用2个空行分割, 类方法用一个空行分割
&lt;/li&gt;
&lt;li&gt;空格的添加:
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;二元操作的两边各放一个空格, 但是对于有多个操作符的情况,可以只在低优先级的操作符两边放空格
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt; = i + 1
&lt;span style=&quot;color: #FD971F;&quot;&gt;submitted&lt;/span&gt; += 1
&lt;span style=&quot;color: #FD971F;&quot;&gt;x&lt;/span&gt; = x*2 - 1
&lt;span style=&quot;color: #FD971F;&quot;&gt;hypot2&lt;/span&gt; = x*x + y*y
&lt;span style=&quot;color: #FD971F;&quot;&gt;c&lt;/span&gt; = (a+b) * (a-b)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;标点符号的后面放空格,前面不要放空格,在(, {, [之后以及), }, ]之前不要放空格,函数调用时函数名与左括号之间
不要放空格
&lt;pre class=&quot;example&quot;&gt;
Yes: spam(ham[1], {eggs: 2})
No:  spam( ham[ 1 ], { eggs: 2 } )
No:  spam (ham[1], {eggs:2})

Yes: if x == 4: print x, y; x, y = y, x
No:  if x == 4 : print x , y ; x , y = y , x

Yes: spam(1)
No:  spam (1)

Yes: dict[&#39;key&#39;] = list[index]
No:  dict [&#39;key&#39;] = list [index]
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;不要在用于指定关键字参数 (keyword argument) 或默认参数值的 &#39;=&#39; 号周围使用空格。
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;命名
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;模块名与包名: 全部用小写字母, 模块名可以添加下划线来增加可读性, 包名不建议添加下划线,名字尽量短一点,因
为有些文件系统对文件长度有要求
&lt;/li&gt;
&lt;li&gt;类名: 使用驼峰命名法,如果是内部类,则在前面加一个下划线
&lt;/li&gt;
&lt;li&gt;异常名: 异常是类, 所以使用驼峰命名法,但是必须有Error后缀
&lt;/li&gt;
&lt;li&gt;函数名: 必须是小写字母, 用下划线去增加可读性
&lt;/li&gt;
&lt;li&gt;类方法: 和函数名相同, 对于non-public函数, 可以在前面加一个下划线, 前面加两个下划线主要是避免与子类命名
冲突(一般用户命名变量不推荐使用)
&lt;/li&gt;
&lt;li&gt;常量名: 全部大写, 用下划线分割增加可读性
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;python 文件处理&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
open打开文件时的选项：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;w, w+: 如果文件已存在，那么二者都会将文件内容清除
&lt;/li&gt;
&lt;li&gt;r+: 如果写文件，那么会从当前位置覆盖写，而不是插入，当用该模式打开文件，读入文件内容，然后用覆盖该文件时应使
用如下代码
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;open&lt;/span&gt;(filename, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;r+&#39;&lt;/span&gt;) &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;as&lt;/span&gt;  f:
    &lt;span style=&quot;color: #FD971F;&quot;&gt;content&lt;/span&gt; = f.read()
    &lt;span style=&quot;color: #FD971F;&quot;&gt;new_content&lt;/span&gt; = do_something()
    f.seek(0)
    f.write(new_content)
    f.truncate()                &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;删除当前读写位置到文件末尾的内容&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;b: 在python2中，linux指定与不指定问题不大，但是建议对于二进制文件比如图片还是指定该选项比较好，避免移植到
windows出现问题，在python3中，对于文本文件，如果不指定该选项，那么会返回unicode string， 而如果指定该选
项则返回byte string
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;杂七杂八&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;除法&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;X/Y: python2中的行为和C语言类似，3/2=1, 3/2.0=1.5; 在python3中，这是真除法，也就是会一直保留小数位,3/2 = 1.5
&lt;/li&gt;
&lt;li&gt;X//Y: 在python2以及3中都是floor除法，也就是取整数区间的左边边界，5//2 = 2, 5//-2 = -3
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;一些内置函数的解释&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-3-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-3&quot;&gt;dir&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-3&quot;&gt;
&lt;p&gt;
获得对象的所有属性,也就是顶层的那些names
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-4&quot;&gt;globals  And lolcals&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;globals(): 返回一个字典,字典包括当前模块(也就是调用globals()的模块)的所有模块级属性, 同时还包
括&#39;&lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;builtins&lt;/span&gt;&lt;/span&gt;&#39;属性, 还包括几个特殊变量__file__, &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;package&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;doc&lt;/span&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;locals(): 这个只返回局部空间(比如函数的局部变量)的变量与值的字典,注意这个字典不能修改,如果强行修改会引发
严重后果,比如解释器崩溃
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-5&quot;&gt;getattr   &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;getattr&lt;/span&gt;&lt;/span&gt;  VS  &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;getattribute&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-5&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;__getattr__只有在属性不存在时才调用,该方法用的多
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;ClassName&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__getattr__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, name):
        dosomething()
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;super&lt;/span&gt;(ClassName, &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;).__getattr__(name)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;__getattribute__是每一次obj.attr时都会调用,所以它可以拦截所有的属性查询, 用的很少
&lt;/li&gt;
&lt;li&gt;getattr: 原型getattr(object, name[, default]), getattr(x, &#39;foobar&#39;)等价于x.foobar优势就在于getattr可以
使用字符串,注意如果是获得类实例的方法,那么self参数就可以忽略了,只需要传入除self之外的其它参数就好
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-6&quot;&gt;&lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;import&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-6&quot;&gt;
&lt;p&gt;
原型：  __import__(name[, globals[, locals[, fromlist[, level]]]])
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;fromlist： 指定需要从name中导入的属性名，一般而言也就是from module1 import attr1, attr2…中的
attr1,attr2… &lt;b&gt;这个参数一般需要指定&lt;/b&gt;
&lt;/li&gt;
&lt;li&gt;level: 指定使用绝对导入还是相对导入，-1是默认会同时尝试二者，0是绝对导入，正数是相当于加几个. ,比如如果
为1,那就是加一个.也就是当前目录，如果是2,那就是加两个点，在当前模块的父目录中导入，和import中的相
对导入语法类似
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;snippet 1&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; spam.ham &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; eggs, sausage &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;as&lt;/span&gt; saus

&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;snippet 2&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;_temp&lt;/span&gt; = &lt;span style=&quot;color: #A6E22E;&quot;&gt;__import__&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;spam.ham&#39;&lt;/span&gt;, &lt;span style=&quot;color: #A6E22E;&quot;&gt;globals&lt;/span&gt;(), &lt;span style=&quot;color: #A6E22E;&quot;&gt;locals&lt;/span&gt;(), [&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;eggs&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;sausage&#39;&lt;/span&gt;], -1)
&lt;span style=&quot;color: #FD971F;&quot;&gt;eggs&lt;/span&gt; = _temp.eggs
&lt;span style=&quot;color: #FD971F;&quot;&gt;saus&lt;/span&gt; = _temp.sausage
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
两段代码等价, __import__接的是字符串
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;装饰器&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-4-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-1&quot;&gt;装饰器的基本形式&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;deco&lt;/span&gt;(func):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;_deco&lt;/span&gt;():
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;before myfunc() called.&quot;&lt;/span&gt;)
        func()
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;  after myfunc() called.&quot;&lt;/span&gt;)

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; _deco

&lt;span style=&quot;color: #66D9EF;&quot;&gt;@deco&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;myfunc&lt;/span&gt;():
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; myfunc() called.&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面的@deco 等价于 myfunc = deco(myfunc), 这就是装饰器的本质所在, 注意_deco必须与myfunc有相同的参数,因为
装饰后调用myfunc实际是调用_deco, 当然_deco可以使用*args, **kargs这样的可变参数
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-4-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-2&quot;&gt;使用类作为装饰器(推荐的做法)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;deco&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__init__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, func):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.func = func

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__call__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, *args, **kwargs):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;before myfunc() called.&quot;&lt;/span&gt;)
        func()
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;  after myfunc() called.&quot;&lt;/span&gt;)

&lt;span style=&quot;color: #66D9EF;&quot;&gt;@deco&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;myfunc&lt;/span&gt;():
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; myfunc() called.&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
myfunc = deco(myfunc) 所以myfunc就是一个deco类的实例，然后myfunc(*args, **kwargs),实际就是调用类实例
的__call__方法
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-3&quot;&gt;使用类作为装饰器装饰类方法&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-3&quot;&gt;
&lt;p&gt;
下面的代码也可以装饰非类方法,也就是装饰普通函数,也就意味着下面的代码可以替代2,因为如果装饰的是普通函数,
那么会直接调用该函数,所以不会触发descriptor的__get__方法
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;deco&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__init__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, func):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.func = func

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__call__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, *args, **kwargs):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;before myfunc() called.&quot;&lt;/span&gt;)
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.func(*args, **kwargs)
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;  after myfunc() called.&quot;&lt;/span&gt;)

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__get__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, obj, objtype):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; functools
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; functools.partial(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.__call__, obj)

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Test&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    &lt;span style=&quot;color: #66D9EF;&quot;&gt;@deco&lt;/span&gt;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;myfunc&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; myfunc() called.&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这与2最大的区别就是使用了descriptor，也就是__get__, 之所以这么写是因为，如果像2一样，那么就没有给myfunc
传递self参数，所以python会报缺少参数的错误，下面解释一下代码运行的流程，deco装饰后，myfunc变成一个deco的
类实例，注意deco定义了__get__, 所以myfunc就变成了一个descriptor对象，当你使用test_obj.myfunc(*args,
**kwargs)调用的时候，也就触发了test_obj.myfunc的属性搜索，那么根据descriptor的规则，就变成了
myfunc.__get__(test_obj),该函数返回已将test_obj绑定到myfunc.__call__的第一个参数的partial 函数，接着这个
函数在接受*args, **kwargs参数，总之就是通过descriptor将test_obj传递给了__call__,从而消除了缺少self的问题
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-4&quot;&gt;给装饰器添加参数&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-4&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;deco&lt;/span&gt;(arg):
     &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;_deco&lt;/span&gt;(func):
         &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__deco&lt;/span&gt;():
             &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;before %s called [%s].&quot;&lt;/span&gt; % (func.&lt;span style=&quot;color: #A6E22E;&quot;&gt;__name__&lt;/span&gt;, arg))
             func()
             &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;  after %s called [%s].&quot;&lt;/span&gt; % (func.&lt;span style=&quot;color: #A6E22E;&quot;&gt;__name__&lt;/span&gt;, arg))
         &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; __deco
     &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; _deco
&lt;span style=&quot;color: #66D9EF;&quot;&gt;@deco&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;mymodule&quot;&lt;/span&gt;)
 &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;myfunc&lt;/span&gt;():
     &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; myfunc() called.&quot;&lt;/span&gt;)
&lt;span style=&quot;color: #66D9EF;&quot;&gt;@deco&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;module2&quot;&lt;/span&gt;)
 &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;myfunc2&lt;/span&gt;():
     &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; myfunc2() called.&quot;&lt;/span&gt;)
myfunc()
 myfunc2()
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
需要给装饰器加参数.那么就给多添加一个嵌套函数, 这个参数可以是类以及其它对象
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-4-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-5&quot;&gt;functools模块&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-5&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;wraps: 这个装饰器可以确保函数在装饰后属性的一致,比如上面的例子 myfunc=deco(myfunc), 那么此时
myfunc的__name__, __doc__等属性都不在是原myfunc的值了,而是_deco的值,每一次装饰之后这些函数对象的元信
息都丢失的话,那么这显然是一个大问题,而wraps可以用来应付这个问题
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; functools
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;deco&lt;/span&gt;(func):
     &lt;span style=&quot;color: #66D9EF;&quot;&gt;@functools.wraps&lt;/span&gt;(func)
     &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;_deco&lt;/span&gt;():
         &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;before myfunc() called.&quot;&lt;/span&gt;)
         func()
         &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;  after myfunc() called.&quot;&lt;/span&gt;)
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; _deco
&lt;span style=&quot;color: #66D9EF;&quot;&gt;@deco&lt;/span&gt;
 &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;myfunc&lt;/span&gt;():
     &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; myfunc() called.&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
@functools.wraps(func)这行代码可以保证,通过装饰器调用后,函数__name__, __doc__仍然和原来的函数一致
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;partial: 有时候你知道一个函数的一部分参数,这个时候你可以先绑定这些参数,绑定这些参数之后会返回一个
partial对象,你可以当这个对象就是一个以绑定了一些参数的函数,事实上和lisp的lambda很像,partial大体上等于以
下代码
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;partial&lt;/span&gt;(func, *args, **keywords):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;newfunc&lt;/span&gt;(*fargs, **fkeywords):
        &lt;span style=&quot;color: #FD971F;&quot;&gt;newkeywords&lt;/span&gt; = keywords.copy()
        newkeywords.update(fkeywords)
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; func(*(args + fargs), **newkeywords)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;newfunc.func&lt;/span&gt; = func
    &lt;span style=&quot;color: #FD971F;&quot;&gt;newfunc.args&lt;/span&gt; = args
    &lt;span style=&quot;color: #FD971F;&quot;&gt;newfunc.keywords&lt;/span&gt; = keywords
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; newfunc
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;迭代器&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-5-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-1&quot;&gt;迭代器的基本知识&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-1&quot;&gt;
&lt;p&gt;
迭代器对象是序列对象的一般化,每一个迭代器对象都有一个next方法,该方法每调用一次都会返回下一个元素,当没有元素
可返回时要触发StopIteration异常,这就是迭代对象的实质了
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-2&quot;&gt;生成器generator&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-2&quot;&gt;
&lt;p&gt;
从大多数方面看生成器函数和普通函数一致,它们二者最大的不同时,普通函数是直接通过return返回一个值,而生成器函
数是通过yield返回一个迭代器对象,所以每一个生成器函数调用后都是返回一个迭代器对象,这是本质的区别
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-3&quot;&gt;for循环的迭代过程&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-3&quot;&gt;
&lt;p&gt;
for item in obj语句的执行过程其实是这样
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;先运行iter(obj) 获得迭代器对象 iter_obj
&lt;/li&gt;
&lt;li&gt;重复的调用iter_obj.next() 直到出现StopIteration异常
&lt;/li&gt;
&lt;li&gt;如果上述两步已成功,那么for循环就结束了,如果上述两步没成功,这意味着obj不支持迭代协议,那么for就会尝试使用
下标来遍历那么会使用下标来遍历,也就是从0开始每一轮循环都对下标加一,而且每一轮循环都使用obj[i] 来访问元
素,直到触发异常
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;模块&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;p&gt;
&lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;all__与_X: 当调用from XX import * 时, 如果指定了__all&lt;/span&gt;&lt;/span&gt;, 那么就只导入__all__中的名字,如果没指定__all__,
那么导入所有除了以下划线开头的全部模块级名字, 也就是说不会导入 _X 这样的名字
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-6-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-1&quot;&gt;relative import&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-1&quot;&gt;
&lt;p&gt;
默认是绝对导入,也就是搜索sys.path, 相对导入需要一下的语法:对于如下的一个目录结构
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
package/
 __init__.py
 subpackage1/
     __init__.py
     moduleX.py
     moduleY.py
 subpackage2/
     __init__.py
     moduleZ.py
 moduleA.py
&lt;/pre&gt;
&lt;p&gt;
假设在moduleX.py or subpackage1/__init__.py中，那么下列的相对导入是合法的
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; .moduleY &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; spam
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; .moduleY &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; spam &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;as&lt;/span&gt; ham
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; . &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; moduleY
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; ..subpackage1 &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; moduleY
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; ..subpackage2.moduleZ &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; eggs
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; ..moduleA &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; foo
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; ...package &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; bar
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; ...sys &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; path
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
一个点代表当前文件所在的目录，两个点代表当前文件所在目录的父目录，以此类推，注意相对导入使用__name__属性实
现的，所以对于执行模块必须小心，因为他的__name__属性是__main__
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-7&quot;&gt;OOP&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-7&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-7-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-1&quot;&gt;基本OOP代码示例&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-1&quot;&gt;
&lt;p&gt;
类,类的实例和模块都只是一个命名空间,命名空间的属性都可以修改,所以非常灵活,对于基于类的对象而言,可以使用dir内
置函数来查看命名空间, &lt;b&gt;类与类的实例都是对象,二者都是使用字典对象实现的命名空间,二者的__dict__属性基本就是命名空间
字典&lt;/b&gt;, 看如下代码:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Test&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;    a Test Class&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;val1&lt;/span&gt; = 1
    &lt;span style=&quot;color: #FD971F;&quot;&gt;val2&lt;/span&gt; = 2
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__init__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, arg1, arg2):
        &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.arg1 = arg1
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.arg2 = arg2

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;display&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;):
        &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;        &quot;&quot;&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.arg1, &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.arg2

&lt;span style=&quot;color: #FD971F;&quot;&gt;obj1&lt;/span&gt; = Test(1, 2)
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;dir&lt;/span&gt;(Test)
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;dir&lt;/span&gt;(obj1)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
val1, val2, &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;init&lt;/span&gt;&lt;/span&gt;, display都是类Test本身的属性, 而arg1, arg2就是类实例(obj1)的属性,实际上self产生的就是
类实例对象的属性, 当然类的实例也会继承
类的属性
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-2&quot;&gt;属性搜索树&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-2&quot;&gt;
&lt;p&gt;
当调用obj.attr时,python有一个属性的搜索过程,比如下面的代码
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;D1&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;pass&lt;/span&gt;

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;D2&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;pass&lt;/span&gt;

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;D3&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;pass&lt;/span&gt;

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;C1&lt;/span&gt;(D1, D2):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;pass&lt;/span&gt;

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;C2&lt;/span&gt;(D3):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;pass&lt;/span&gt;

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;B&lt;/span&gt;(C1, C2):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;pass&lt;/span&gt;

&lt;span style=&quot;color: #FD971F;&quot;&gt;a1&lt;/span&gt; = B()
&lt;span style=&quot;color: #FD971F;&quot;&gt;a2&lt;/span&gt; = B()
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面的代码会构成一颗属性搜索树:
&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;static/img/attribute-search-tree.png&quot; alt=&quot;attribute-search-tree.png&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
因为类本身也是对象,所以类本身也有属性,类的属性就是类的方法,以及类的变量, 比如当调用a1.x时,那么搜索的过程就
是这样的: a1, B, C1, D1, D2, C2, D3注意这是深度优先搜索,python的经典类与新式类都是这种搜索模式，但是新式类
有一个diamond pattern，也就是钻石模式，这种模式下有一个以上的超类会通往相同的更高层次的超类，这时候会使用
广度优先搜索(只是有相同超类的那一部分)，举个例子：
&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;static/img/diamond-pattern.png&quot; alt=&quot;diamond-pattern.png&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
如上图所示，如果C2有个w属性，D2也有个w属性，那么当使用a1.w进行属性搜索时，如果使用深度优先搜索，那么会得到
D2.w， 但是C2是D2的子类，并且重载了w属性，这种情况下应该用子类的属性也就是C2的w属性，钻石继承就是为这种情
况准备的，在这种情况下，在C1,D2, C2会使用广度优先算法搜索，这样就可以先得到C2.w .这个特例需要注意
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-3&quot;&gt;类的设计&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-7-3-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-7-3-1&quot;&gt;is a&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-7-3-1&quot;&gt;
&lt;p&gt;
如何现实中两个事物是is a的关系，那么就应该用继承，比如teacher is a person，那么Teacher就应该继承Person
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-3-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-7-3-2&quot;&gt;has a&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-7-3-2&quot;&gt;
&lt;p&gt;
比如一个商店有商品，有营业员，有顾客，那么商店与商品，营业员，顾客就是has a的关系，这时候应该使用组合，也
就是说商店是一个容器，在该容器对象的构造函数中创建营业员对象，创建商品对象，创建顾客对象，具体到python就
是在__init__中创建这些对象
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-4&quot;&gt;常见的运算符重载&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;&lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;getattr&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;setattr___使用obj.attr时如果该属性obj中没有attr属性，这时会调用__getattr&lt;/span&gt;&lt;/span&gt;, __setattr___会
拦截所有的属性赋值，也就是obj.attr = val这样的语句都等价于obj.__setattr___(&#39;attr&#39;, val)，这是
和__getattr__不同的地方，要特别注意
&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;getitem&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;setitem_&lt;/span&gt;&lt;/span&gt;
当出现x[i], x[i] = val, 会分别调用上述方法， 当使用for 迭代时会先尝试__iter__, 如果行不通，那么就使用索
引，也就是用不断递增的索引调用__getitem__, 直到出现IndexError
&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;iter&lt;/span&gt;&lt;/span&gt;
必须返回一个迭代器对象，一个拥有next方法的对象就是迭代器对象，如果使用for 在该对象上迭代，它会先使用
iter内置函数来调用__iter__ 方法获得迭代器对象，然后重复的调用该迭代器对象的next方法，直到该next方法产生
StopIteration异常。
&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;call&lt;/span&gt;&lt;/span&gt;
将类实例作为函数调用时就是使用的该方法，比如obj是一个类实例，那么obj(&#39;a&#39;, &#39;b&#39;)等价于
obj.__call__(&#39;a&#39;,&#39;b&#39;),这是一个很常用的方法
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-5&quot;&gt;Descriptor&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-5&quot;&gt;
&lt;p&gt;
任何对象只要定义了__get__, &lt;span class=&quot;underline&quot;&gt;&lt;span class=&quot;underline&quot;&gt;set&lt;/span&gt;&lt;/span&gt;, __del___三者之一，那么就是descriptor，这是一份不错的[[http://docs.python.org/2/howto/descriptor.html][tutorial]]， 示例代码:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;RevealAccess&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;&quot;&quot;A data descriptor that sets and returns values&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;       normally and prints a message logging their access.&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__init__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, initval=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;, name=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;var&#39;&lt;/span&gt;):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.val = initval
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.name = name

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__get__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, obj, objtype):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Retrieving&#39;&lt;/span&gt;, &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.name
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.val

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__set__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, obj, val):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Updating&#39;&lt;/span&gt; , &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.name
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.val = val

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;MyClass&lt;/span&gt;(&lt;span style=&quot;color: #A6E22E;&quot;&gt;object&lt;/span&gt;):
    &lt;span style=&quot;color: #FD971F;&quot;&gt;x&lt;/span&gt; = RevealAccess(10, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;var &quot;x&quot;&#39;&lt;/span&gt;)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;y&lt;/span&gt; = 5
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
输出
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; m = MyClass()
&amp;gt;&amp;gt;&amp;gt; m.x
Retrieving var &quot;x&quot;
10
&amp;gt;&amp;gt;&amp;gt; m.x = 20
Updating var &quot;x&quot;
&amp;gt;&amp;gt;&amp;gt; m.x
Retrieving var &quot;x&quot;
20
&amp;gt;&amp;gt;&amp;gt; m.y
5
&lt;/pre&gt;
&lt;p&gt;
上例中 m.x 是一个descriptor，因为它是RevealAccess的类实例，而该类定义了__get__与__set__,所以 m.x 实际上等价
于 x.__get__(m)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-8&quot;&gt;python异常&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-8&quot;&gt;
&lt;p&gt;
只说明基于类的异常, 老版的python中基于字符串的异常不考虑
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-8-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-8-1&quot;&gt;try … except语句&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-8-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
try:
    main-block
except class1:
    handler1
except class2, instance:
    handler2
except (class3, class4):
    handler3
except (class5, class6), instance:
    handler4
except:
    handler5
else:
    else-block finally: finally-block
&lt;/pre&gt;
&lt;p&gt;
python2.5以后版本才可以else,finally混在一起,执行try 中语句块时如果没有出现异常,那么就执行else 语句块,如果出
现了异常,那么就从上到下的匹配ecxept子句,最后执行第一个匹配的except 语句块, finally是无论是否发生异常,以及无
论是否捕捉了异常都会执行的
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-8-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-8-2&quot;&gt;raise&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-8-2&quot;&gt;
&lt;p&gt;
raise语句的几种形式
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;raise : 重新触发上一次产生的异常
&lt;/li&gt;
&lt;li&gt;raise instance  : 触发为name的异常
&lt;/li&gt;
&lt;li&gt;raise class, instance : 和2类似,只是data是额外数据
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
&lt;b&gt;上述的instance应该是一个异常类的实例&lt;/b&gt;,目前第二种最常用,为了兼容raise instance还有以下的几种衍生形式
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;raise class : 等同于 raise class()
&lt;/li&gt;
&lt;li&gt;raise class, arg :等同于raise class(arg)
&lt;/li&gt;
&lt;li&gt;raise class, (arg1, arg2,…) : 等同于raise class(arg1, arg2,…)
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-8-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-8-3&quot;&gt;异常&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-8-3&quot;&gt;
&lt;p&gt;
异常都是类, exceptions must be old-style classes or derived from BaseException.也就是说,要么是老式类,要么
是BaseException的子类,实践中用户自定义的类最好继承于Exception,并且必须以Error结尾, &lt;b&gt;注意except语句是基于超
类匹配的&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-9&quot;&gt;python中文处理&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-9&quot;&gt;
&lt;p&gt;
中文处理一直是一个比较棘手的问题,各种乱码一直让程序员苦不堪言,这里主要介绍python中文处理的一般
原则, 先介绍几个基本概念(强烈建议看看这篇&lt;a href=&quot;http://nedbatchelder.com/text/unipain.html&quot;&gt;文章&lt;/a&gt;):
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;unicode: 简单点说你可以将unicode看成一种映射,地球上的每一个符号都在unicode中有一个数(准确的说叫code point)
与之对应
&lt;/li&gt;
&lt;li&gt;utf8, utf16: 刚刚说了地球上的每一个符号在unicode中有一个数与之对应,那么这个数如何存储在计算机上呢?utf8, utf16,
utf32就是存储策略
&lt;/li&gt;
&lt;li&gt;big5, gb2312等: 这些都是各个地区自行发明的双字节码,也就是两个字节代表一个符号
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
python字符处理的基本概念:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;byte string: 字节流, utf8,utf16, gb2312等编码后得到的string都是字节流,通过decode方法可以得到unicode string
&lt;/li&gt;
&lt;li&gt;unicode string: unicode字符串的每一个字符都是一个code point, 它可以通过encode方法转换为各种byte string
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
因此python中文处理的实质就是在byte string与unicode string之间来回转换, 因为python解释器在解释python源文件时,
也是需要编码信息的,所以在文件的前两行必须指定编码信息(coding:utf8), &lt;b&gt;指定的编码必须与python源文件保存时的编码一致&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
python2与python3的区别:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;python2中字面字符串是byte string, 而3中是unicode string
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;ss&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;你好&#39;&lt;/span&gt;                     &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;python2为byte string, python3为unicode string&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;ss&lt;/span&gt; = u&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;你好&#39;&lt;/span&gt;                    &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;python2得到unicode string&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;ss&lt;/span&gt; = b&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;你好&#39;&lt;/span&gt;                    &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;python3得到byte string&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;对二者名称不同
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;&lt;colgroup&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;&lt;col class=&quot;left&quot; /&gt;&lt;/colgroup&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;category&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;python2&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;python3&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;byte string&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;str&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;bytes&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;left&quot;&gt;unicode string&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;unicode&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;str&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/li&gt;
&lt;li&gt;读取文件时,python2得到byte string, 而python3调用open时如果指定了b则得到byte string, 如果没有指定b, 那么
就会使用local.getpreferredencoding()返回的编码方式来decode,然后得到unicode string. python3中调用open时
有一个可选参数来指定解码方式..
&lt;/li&gt;
&lt;li&gt;混合时的处理方式不同,如一个byte string与一个unicode string相加,那么python2会使用sys.getdefaultencoding()
返回的编码方式来decode那个byte string, 然后与unicode string相加得到一个unicode string,但是python3会返回异常
因为python3不允许二者混合.
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-10&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-10&quot;&gt;一些标准库的使用说明&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-10&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-10-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-10-1&quot;&gt;python 正则表达式&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-10-1&quot;&gt;
&lt;p&gt;
python的正则表达式是通过re这个标准库支持的,这是一篇写的不错的&lt;a href=&quot;https://www.evernote.com/shard/s89/sh/8d66ae55-5f2e-4a68-b11d-c8ae8ad3de56/00bfb7913d34061da0083d8286ff1592&quot;&gt;文章&lt;/a&gt;, 我可耻的用evernote保存下来
了,上面有原文章的连接.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-10-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-10-2&quot;&gt;多线程&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-10-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-10-2-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-10-2-1&quot;&gt;Thread&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-10-2-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-10-2-2&quot;&gt;threading&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-10-2-2&quot;&gt;
&lt;p&gt;
threading是一个更高层的模块，它使用更加方便，所以一般情况都是使用该模块
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;threading.Thread: 要创建一个线程，那么需要先创建threading.Thread的子类，并且重写它的run方法，每一个
Thread对象都要调用start方法，该方法启动线程，该线程会运行该对象的run方法
daemon： 如果已经没有活动的non-daemon(daemon=False)线程的话, 整个进程都会退出,所以经常将子线程的daemon
设为True,并且子线程做成一个while True的死循环,这样如果主线程退出,那么整个进程都会退出,那些死循环的子线
程自然也会退出
&lt;/li&gt;
&lt;li&gt;Queue: 同步队列
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; Queue &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; Queue
&lt;span style=&quot;color: #FD971F;&quot;&gt;q&lt;/span&gt; = Queue()
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;thread1&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;item&lt;/span&gt; = q.get()
do_something(item)
q.task_done()

&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;main thread&lt;/span&gt;
q.join()
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
实际上task_done就是将内部的计数器减一, 而put会将内部的计数器加1,然后join会测试如果内部的计数器为0就返
回,不为0就阻塞
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-10-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-10-3&quot;&gt;collections&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-10-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-10-3-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-10-3-1&quot;&gt;Counter&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-10-3-1&quot;&gt;
&lt;p&gt;
字典的子类，可以用于统计可迭代对象中重复元素出现的次数,这是&lt;a href=&quot;http://docs.python.org/2/library/collections.html#counter-objects&quot;&gt;文档&lt;/a&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; collections &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; Counter
&lt;span style=&quot;color: #FD971F;&quot;&gt;cn_str&lt;/span&gt; = Counter(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;hello world&#39;&lt;/span&gt;)
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; cn_str

&lt;span style=&quot;color: #FD971F;&quot;&gt;cn_list&lt;/span&gt; = Counter([&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;red&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;blue&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;red&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;green&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;blue&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;blue&#39;&lt;/span&gt;])
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; cn_list

&lt;span style=&quot;color: #FD971F;&quot;&gt;cn_dict&lt;/span&gt; = Counter(cats=4, dogs=8)
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; cn_dict
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class=&quot;example&quot;&gt;
Counter({&#39;l&#39;: 3, &#39;o&#39;: 2, &#39; &#39;: 1, &#39;e&#39;: 1, &#39;d&#39;: 1, &#39;h&#39;: 1, &#39;r&#39;: 1, &#39;w&#39;: 1})
Counter({&#39;blue&#39;: 3, &#39;red&#39;: 2, &#39;green&#39;: 1})
Counter({&#39;dogs&#39;: 8, &#39;cats&#39;: 4})
&lt;/pre&gt;

&lt;p&gt;
Counter除了有dict的方法外，还有几个特有的方法
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;elements(): 返回可迭代对象，比如调用cn_list.elements() 就会返回[&#39;red&#39;, &#39;blue&#39;, &#39;red&#39;, &#39;green&#39;,
&#39;blue&#39;, &#39;blue&#39;]
&lt;/li&gt;
&lt;li&gt;most_common([n]) : 根据字典色value从大到小排出n个item组成一个list
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-10-3-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-10-3-2&quot;&gt;deque 双端队列&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-10-3-2&quot;&gt;
&lt;p&gt;
可以从左边或者右边添加或者删除元素,这是&lt;a href=&quot;http://docs.python.org/2/library/collections.html#deque-objects&quot;&gt;文档&lt;/a&gt; ,主要有append,appendleft(单个元素),extend,extendleft(可迭代对
象),pop, popleft等等
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-10-3-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-10-3-3&quot;&gt;defaultdict&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-10-3-3&quot;&gt;
&lt;p&gt;
提供了一个default_factory属性,通过初始化defaultdict实例时对该属性赋值,那么以后如果出现key不存在的情况,不
会出现KeyError,而是调用这个默认工厂函数,然后返回该工厂函数的返回值,这是&lt;a href=&quot;http://docs.python.org/2/library/collections.html#defaultdict-objects&quot;&gt;文档&lt;/a&gt; ,这是几段代码示例:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# 以list 作为default_factory
&amp;gt;&amp;gt;&amp;gt; s = [(&#39;yellow&#39;, 1), (&#39;blue&#39;, 2), (&#39;yellow&#39;, 3), (&#39;blue&#39;, 4), (&#39;red&#39;, 1)]
&amp;gt;&amp;gt;&amp;gt; d = defaultdict(list)
&amp;gt;&amp;gt;&amp;gt; for k, v in s:
...     d[k].append(v)
...
&amp;gt;&amp;gt;&amp;gt; d.items()
[(&#39;blue&#39;, [2, 4]), (&#39;red&#39;, [1]), (&#39;yellow&#39;, [1, 3])]

# 以整数作为default_factory
&amp;gt;&amp;gt;&amp;gt; s = &#39;mississippi&#39;
&amp;gt;&amp;gt;&amp;gt; d = defaultdict(int)
&amp;gt;&amp;gt;&amp;gt; for k in s:
...     d[k] += 1
...
&amp;gt;&amp;gt;&amp;gt; d.items()
[(&#39;i&#39;, 4), (&#39;p&#39;, 2), (&#39;s&#39;, 4), (&#39;m&#39;, 1)]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-10-3-4&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-10-3-4&quot;&gt;namedtuple&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-10-3-4&quot;&gt;
&lt;p&gt;
一个tuple的子类,可以给tuple的每一项添加一个名字,以后就可以通过 X.y这样的方式来访问了,看代码:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; collections &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; namedtuple

&lt;span style=&quot;color: #FD971F;&quot;&gt;Point&lt;/span&gt; = namedtuple(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Point&#39;&lt;/span&gt;, [&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;x&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;y&#39;&lt;/span&gt;], verbose=&lt;span style=&quot;color: #AE81FF;&quot;&gt;False&lt;/span&gt;)
&lt;span style=&quot;color: #FD971F;&quot;&gt;p&lt;/span&gt; = Point(11, y=22)
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; p

&lt;span style=&quot;color: #FD971F;&quot;&gt;s&lt;/span&gt; = p[0] + p[1]                 &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;like normal tuple&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; s

&lt;span style=&quot;color: #FD971F;&quot;&gt;s&lt;/span&gt; = p.x + p.y
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; s
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
=Point(x=11, y=22)
33
33
=     上述代码代表一个点,点有x,y两个值,要访问点的x,可以通过p.x 或者p\&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;(也就是和普通的tuple一样)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-10-3-5&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-10-3-5&quot;&gt;OrderedDict&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-10-3-5&quot;&gt;
&lt;p&gt;
OrderedDict是dict的子类,它会记住key插入的顺序,默认的dict是会排序的, 比如下面的代码
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; collections &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; OrderedDict
&lt;span style=&quot;color: #FD971F;&quot;&gt;l&lt;/span&gt; = [(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;b&#39;&lt;/span&gt;, 3), (&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;f&#39;&lt;/span&gt;, 2), (&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;a&#39;&lt;/span&gt;, 1)]
&lt;span style=&quot;color: #FD971F;&quot;&gt;d&lt;/span&gt; = &lt;span style=&quot;color: #A6E22E;&quot;&gt;dict&lt;/span&gt;(l)
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; d

&lt;span style=&quot;color: #FD971F;&quot;&gt;od&lt;/span&gt; = OrderedDict(l)
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; od
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
={&#39;a&#39;: 1, &#39;b&#39;: 3, &#39;f&#39;: 2}
OrderedDict([(&#39;b&#39;, 3), (&#39;f&#39;, 2), (&#39;a&#39;, 1)])
=     popitem(last=True): last为True,那么就是LIFO, 比如上例就是先弹出(a, 1) 然后(f, 2), 如果last为False,那么就
     是FIFO
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-10-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-10-4&quot;&gt;pickle&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-10-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;dump(self, obj, file) 将对象序列化到文件
&lt;/li&gt;
&lt;li&gt;dumps(self, obj)      会返回序列化的字符串
&lt;/li&gt;
&lt;li&gt;load(file)      从文件加载对象
&lt;/li&gt;
&lt;li&gt;loads(str)      从字符串加载对象
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; pickle
&lt;span style=&quot;color: #FD971F;&quot;&gt;d&lt;/span&gt; = {&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;tag&#39;&lt;/span&gt;:&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;django&#39;&lt;/span&gt;}
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;open&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;aa.pickle&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;wb&#39;&lt;/span&gt;) &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;as&lt;/span&gt; fp:
    pickle.dump(d, fp)

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;with&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;open&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;aa.pickle&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;rb&#39;&lt;/span&gt;) &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;as&lt;/span&gt; fp:
    &lt;span style=&quot;color: #FD971F;&quot;&gt;d&lt;/span&gt; = pickle.load(fp)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-10-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-10-5&quot;&gt;json   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;json&quot;&gt;json&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-10-5&quot;&gt;
&lt;p&gt;
和pickle类似,也是dump,dumps,load,loads这几个接口(以s结尾的就是字符串,否则就是文件),json模块默认只能encode
与decode python的内置类型，比如数字，字符串，list，tuple，dict等，如果你要endcode自定义的类，那么你需要扩
展，代码示例如下：
&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/yuyang0/6945963.js&quot;&gt;&lt;/script&gt;&lt;p&gt;
调用的时候直接使用如下代码：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;d&lt;/span&gt; = {
    &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;status&#39;&lt;/span&gt;: 0,
    &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;data&#39;&lt;/span&gt;: &lt;span style=&quot;color: #A6E22E;&quot;&gt;list&lt;/span&gt;(comments),
}

json.dumps(d, cls=CustomTypeEncoder,
           user=request.user)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
cls参数指定用来encode的class，后面的user参数用来向自定义的encoder中添加额外的参数，可以在自定义的encoder的
init函数中获取，可以参见上面的encoder的代码
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-10-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-10-6&quot;&gt;HTMLParser&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-10-6&quot;&gt;
&lt;p&gt;
文档中的示例代码:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; HTMLParser &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; HTMLParser

&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;create a subclass and override the handler methods&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;MyHTMLParser&lt;/span&gt;(HTMLParser):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;handle_starttag&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, tag, attrs):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Encountered a start tag:&quot;&lt;/span&gt;, tag
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;handle_endtag&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, tag):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Encountered an end tag :&quot;&lt;/span&gt;, tag
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;handle_data&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, data):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Encountered some data  :&quot;&lt;/span&gt;, data

&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;instantiate the parser and fed it some HTML&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;parser&lt;/span&gt; = MyHTMLParser()
parser.feed(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&#39;&lt;/span&gt;
            &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Parse me!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
从上面的代码可以看出:该库的使用方法就是在类中处理starttag, endtag, data(标签中间的文本)
然后调用feed方法就好,实际是一个流式html解析器
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-11&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-11&quot;&gt;一些第三方库的使用方法&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-11&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-11-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-11-1&quot;&gt;requests&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-11-1&quot;&gt;
&lt;p&gt;
python的标准库中的urllib,urllib2的接口并不好用,requests的接口更简洁一致,这是官方&lt;a href=&quot;http://docs.python-requests.org/en/latest/&quot;&gt;文档&lt;/a&gt;
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;get
requests.get(url, **kwargs)
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;payload&lt;/span&gt; = {&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;key1&#39;&lt;/span&gt;: &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;value1&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;key2&#39;&lt;/span&gt;: &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;value2&#39;&lt;/span&gt;}
&lt;span style=&quot;color: #FD971F;&quot;&gt;r&lt;/span&gt; = requests.get(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;http://httpbin.org/get&quot;&lt;/span&gt;, params=payload)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;post
requests.post(url, data=None, **kwargs)
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;data: 是要post的数据
&lt;/li&gt;
&lt;li&gt;kwargs: 可以使用headers =  {….}指定http request header
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; json
&lt;span style=&quot;color: #FD971F;&quot;&gt;url&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;https://api.github.com/some/endpoint&#39;&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;payload&lt;/span&gt; = {&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;some&#39;&lt;/span&gt;: &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;data&#39;&lt;/span&gt;}
&lt;span style=&quot;color: #FD971F;&quot;&gt;headers&lt;/span&gt; = {&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;content-type&#39;&lt;/span&gt;: &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;application/json&#39;&lt;/span&gt;}

&lt;span style=&quot;color: #FD971F;&quot;&gt;r&lt;/span&gt; = requests.post(url, data=json.dumps(payload), headers=headers)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;put
requests.put(url, **kwargs)
&lt;/li&gt;
&lt;li&gt;response object
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; requests
&lt;span style=&quot;color: #FD971F;&quot;&gt;r&lt;/span&gt; = requests.get(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;http://www.baidu.com&#39;&lt;/span&gt;)
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; r.text
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; r.url
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; r.encoding
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; r.status_code                    &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;response status code(eg:200)&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; r.headers                        &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;a dict&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; r.headers[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;]        &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;response headers&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; r.cookies[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;example_cookie_name&#39;&lt;/span&gt;] &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;cookies&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; r.json()                         &lt;span style=&quot;color: #75715E;&quot;&gt;#  &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;built-in json function&lt;/span&gt;

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; r.request.headers         &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;http request headers&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-11-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-11-2&quot;&gt;pip&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-11-2&quot;&gt;
&lt;p&gt;
从github安装包
pip install git+git://github.com/yourname/package.git
或者pip install git+&lt;a href=&quot;https://github.com/yourname/package.git&quot;&gt;https://github.com/yourname/package.git&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-11-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-11-3&quot;&gt;pyquery&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-11-3&quot;&gt;
&lt;p&gt;
一个使用jquery语法的html解析器,非常方便,比BeautifulSoup好用,这是它的&lt;a href=&quot;http://pythonhosted.org/pyquery/index.html&quot;&gt;文档&lt;/a&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;form pyquery &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; PyQuery
&lt;span style=&quot;color: #FD971F;&quot;&gt;html&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;hello world&amp;lt;/title&amp;gt;&amp;lt;/html&amp;gt;&#39;&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;d&lt;/span&gt; = PyQuery(html, parser = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;html&#39;&lt;/span&gt;)
d(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;title&#39;&lt;/span&gt;).text()
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在调用PyQuery时尽量指定parser, 因为默认判断有时会出错,比如用xml的parser去解析html会得到不正确的结果.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;d&lt;/span&gt; = PyQuery(html, parser = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;html&#39;&lt;/span&gt;)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;selector&lt;/span&gt;
d(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;body&#39;&lt;/span&gt;)
d(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;div#header&#39;&lt;/span&gt;)
d(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;div.class ul&#39;&lt;/span&gt;)
d(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;meta[name=keywords]&#39;&lt;/span&gt;) &lt;span style=&quot;color: #75715E;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;attribute&lt;/span&gt;

&lt;span style=&quot;color: #FD971F;&quot;&gt;links&lt;/span&gt; = d(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;div.links a&#39;&lt;/span&gt;)
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;该处应使用下标,而不是for link in links&lt;/span&gt;
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;in&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;range&lt;/span&gt;(0, &lt;span style=&quot;color: #A6E22E;&quot;&gt;len&lt;/span&gt;(links)):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;print&lt;/span&gt; links.eq(i).attr(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;href&#39;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-11-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-11-4&quot;&gt;watchdog&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-11-4&quot;&gt;
&lt;p&gt;
看门狗,用来监控文件系统改变,这是&lt;a href=&quot;http://pythonhosted.org/watchdog/&quot;&gt;文档&lt;/a&gt;, 基本使用:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; time
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; watchdog.observers &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; Observer
&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;from&lt;/span&gt; watchdog.events &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; LoggingEventHandler

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__name__&lt;/span&gt; == &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:
    event_handler = LoggingEventHandler()
    observer = Observer()
    observer.schedule(event_handler, path=&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;.&#39;&lt;/span&gt;, recursive=&lt;span style=&quot;color: #AE81FF;&quot;&gt;True&lt;/span&gt;)
    observer.start()
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;try&lt;/span&gt;:
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #AE81FF;&quot;&gt;True&lt;/span&gt;:
            time.sleep(1)
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;except&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;KeyboardInterrupt&lt;/span&gt;:
        observer.stop()
    observer.join()
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
关键的部分有两个:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;recursive=True,默认是False,如果不指定那么那么就不会监控子目录
&lt;/li&gt;
&lt;li&gt;event_handler:这个是文件系统事件的处理对象,可以自己继承watchdog.events.FileSystemEventHandler,
然后重载&lt;a href=&quot;http://pythonhosted.org/watchdog/api.html#watchdog.events.FileSystemEventHandler.on_created&quot;&gt;on_create&lt;/a&gt;d, &lt;a href=&quot;http://pythonhosted.org/watchdog/api.html#watchdog.events.FileSystemEventHandler.on_deleted&quot;&gt;on_deleted&lt;/a&gt;, &lt;a href=&quot;http://pythonhosted.org/watchdog/api.html#watchdog.events.FileSystemEventHandler.on_modified&quot;&gt;on_modified&lt;/a&gt;, &lt;a href=&quot;http://pythonhosted.org/watchdog/api.html#watchdog.events.FileSystemEventHandler.on_moved&quot;&gt;on_moved&lt;/a&gt;,
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-11-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-11-5&quot;&gt;rauth&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-11-5&quot;&gt;
&lt;p&gt;
一个Oauth库,这是&lt;a href=&quot;https://rauth.readthedocs.org/en/latest/&quot;&gt;文档&lt;/a&gt;, 这是一份示例
&lt;a href=&quot;https://gist.github.com/yuyang0/5949932&quot;&gt;代码&lt;/a&gt;, 基本上照着流程走就OK了
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-12&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-12&quot;&gt;常用工具的使用方法&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-12&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-12-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-12-1&quot;&gt;virtualenv&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-12-1&quot;&gt;
&lt;p&gt;
这是一份不错的&lt;a href=&quot;http://docs.python-guide.org/en/latest/dev/virtualenvs.html&quot;&gt;tutorial&lt;/a&gt;
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;virtualenv venv
&lt;/li&gt;
&lt;li&gt;source venv/bin/activate
&lt;/li&gt;
&lt;li&gt;deactivate
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
virtualenvwrapper可以对virtualenv进行一定的增强
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;install
&lt;pre class=&quot;example&quot;&gt;
sudo pip install virtualenvwrapper
export WORKON_HOME=~/envs
source /usr/local/bin/virtualenvwrapper.sh
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;mkvirtualenv my_env
在WORKON_HOME中创建一个名为my_env虚拟环境
&lt;/li&gt;
&lt;li&gt;workon my_env
切换到my_env环境
&lt;/li&gt;
&lt;li&gt;deactivate
&lt;/li&gt;
&lt;li&gt;lssitepackages
&lt;/li&gt;
&lt;li&gt;lsvirtualenv
&lt;/li&gt;
&lt;li&gt;rmvirtualenv my_env
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-12-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-12-2&quot;&gt;ipython&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-12-2&quot;&gt;
&lt;p&gt;
ipython是一个增强的python interpreter,有许多有趣的功能
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;magic function
以 % 或者 %% 开头的都是magic function,其中
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;以%开头会将本行余下的部分作为一个参数传递给该命令,如果%automagic为on(默认), 那么可以省略前面的 %, 可以
使用 %lsmagic 来列出有多少这种命令.
&lt;/li&gt;
&lt;li&gt;以%%开头的命令不仅会将本行余下的部分作为参数,本行下面独立的行也会作为参数
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TAB补全, 可以补全内置的函数,模块以及变量文件名等等
&lt;/li&gt;
&lt;li&gt;%run命令: 该命令可以用来运行脚本(实际是把所有的属性导入当前的namespace,和import功能类似),测试脚本时用该
命令,而不是import,因为该命令可以让改动立即生效,有以下几个选项:
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;t: 可以用来获得脚本的运行时间
&lt;/li&gt;
&lt;li&gt;p: 性能分析,会列出程序中每个函数调用的时间, %prun命令与该选项功能相似,但是它是对一条python命令或者一个函数调
用进行性能测试
&lt;/li&gt;
&lt;li&gt;d: 调试,激活pdb,并在开始处暂停,和gdb类似
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;剖析对象,给定一个对象,观察这个对象的文档,函数定义以及源代码,有以下命令
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;%pdoc: print doc string
&lt;/li&gt;
&lt;li&gt;%pdef: print definition of function
&lt;/li&gt;
&lt;li&gt;%psource: print source code
&lt;/li&gt;
&lt;li&gt;%pfile: get file of this object
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;调试: %pdb命令会打开或关闭在任何未捕捉的异常点调用pdb调试器的功能, 如果该功能打开了,那么遇到任何未捕捉的
异常,会自动调用调试器,这样就可以打印异常点的变量值,执行代码了
&lt;/li&gt;
&lt;li&gt;运行shell命令: !开头,比如 !ping www.baidu.com ,可以将shell命令的输出赋给python变量, 比如
output = !ping www..baidu.com, 那么output就会是ping的输出
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;p&gt;DEFINITION NOT FOUND.&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt; </content>
  </entry>
  
  <entry>
    <id>scheme.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/scheme.html"/>
    <title>scheme笔记</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;scheme笔记&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;scheme笔记&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;几个概念&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;identifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;atom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-4&quot;&gt;list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-5&quot;&gt;S-expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-6&quot;&gt;Number&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-7&quot;&gt;arithmetic expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-8&quot;&gt;logcal expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-9&quot;&gt;condition expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-10&quot;&gt;多条表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-11&quot;&gt;The Law of Car&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-12&quot;&gt;The Law of Cdr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-13&quot;&gt;The Law of Cons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-14&quot;&gt;The Law of Null?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-15&quot;&gt;The Law of Eq?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-16&quot;&gt;The primitive fuctions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-17&quot;&gt;quote，引用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;Naming Conventions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;core syntactic forms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;let&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5&quot;&gt;control flow&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-5-1&quot;&gt;if&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5-2&quot;&gt;cond&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5-3&quot;&gt;when unless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5-4&quot;&gt;case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5-5&quot;&gt;do&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5-6&quot;&gt;map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5-7&quot;&gt;for-each&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5-8&quot;&gt;apply&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5-9&quot;&gt;multiple values&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6&quot;&gt;内置的函数(predictions and some useful procedure of built-in type)&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-6-1&quot;&gt;predication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6-2&quot;&gt;list procedure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6-3&quot;&gt;number procedure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6-4&quot;&gt;char&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6-5&quot;&gt;string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6-6&quot;&gt;vector procedure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6-7&quot;&gt;symbol procedure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6-8&quot;&gt;Hash Table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7&quot;&gt;macros&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-7-1&quot;&gt;define-syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7-2&quot;&gt;let-syntax与letrec-syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7-3&quot;&gt;syntax-rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7-4&quot;&gt;syntax-case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7-5&quot;&gt;syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7-6&quot;&gt;with-syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-8&quot;&gt;input and output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-9&quot;&gt;递归思想&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10&quot;&gt;continuation&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-10-1&quot;&gt;call/cc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10-2&quot;&gt;应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-10-3&quot;&gt;CPS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-11&quot;&gt;停机问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-12&quot;&gt;some example code(the little schemer)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-13&quot;&gt;racket&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-13-1&quot;&gt;struct(新的数据类型)&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-13-1-1&quot;&gt;复制更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-13-1-2&quot;&gt;subtypes(类似于继承)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-13-2&quot;&gt;match(模式匹配)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-13-3&quot;&gt;module&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-13-3-1&quot;&gt;submodule&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-13-3-1-1&quot;&gt;module*                                                                   :module*:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-13-3-1-2&quot;&gt;module+                                                                   :module+:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-13-3-2&quot;&gt;lang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-13-3-3&quot;&gt;require&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-13-3-4&quot;&gt;provide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;scheme笔记&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;几个概念   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;concept&quot;&gt;concept&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;identifier&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;p&gt;
标识符,可以看作是一个唯一的名字,可以用来引用变量,函数等等
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;variable&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
变量
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;atom&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
a string of characters&lt;br /&gt;
a string of digits&lt;br /&gt;&lt;br /&gt;
(quote atom) or &#39;atom&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-4&quot;&gt;list&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-4&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
a collection of atoms enclosed by parentheses.&lt;br /&gt;
example:&lt;br /&gt;
&#39;()&lt;br /&gt;
&#39;(a)&lt;br /&gt;
&#39;(a b c)&lt;br /&gt;
&#39;((a b) c d)&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-5&quot;&gt;S-expression&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-5&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
all lists&lt;br /&gt;
all atoms&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-6&quot;&gt;Number&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-6&quot;&gt;
&lt;p&gt;
we only use whole number
we only use nonegative integers
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-7&quot;&gt;arithmetic expression&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-7&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;(+ 1 2 3 4 5) &lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return 15&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;2: &lt;/span&gt;(- 10 2 3)      &lt;span style=&quot;color: #75715E;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return 5&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;3: &lt;/span&gt;(* 2 3 4)     &lt;span style=&quot;color: #75715E;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return 24&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;4: &lt;/span&gt;(/ 10 5 5)    &lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return 1&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-8&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-8&quot;&gt;logcal expression&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-8&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
and: (and &amp;lt;p1&amp;gt; &amp;lt;p2&amp;gt; … &amp;lt;pn&amp;gt;)&lt;br /&gt;
or:  (or &amp;lt;p1&amp;gt; &amp;lt;p2&amp;gt; ….&amp;lt;pn&amp;gt;)&lt;br /&gt;
not: (not &amp;lt;p&amp;gt;)&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-9&quot;&gt;condition expression&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-9&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;var&lt;/span&gt; 2)
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; (&lt;span style=&quot;color: #A6E22E;&quot;&gt;add&lt;/span&gt; x y) (+ x y)
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;   (&lt;span style=&quot;color: #66D9EF;&quot;&gt;&amp;lt;p1&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;&amp;lt;e1&amp;gt;&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;   (&lt;span style=&quot;color: #66D9EF;&quot;&gt;&amp;lt;p2&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;&amp;lt;e2&amp;gt;&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;   (&lt;span style=&quot;color: #66D9EF;&quot;&gt;&amp;lt;p3&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;&amp;lt;e3&amp;gt;&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;   (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (else-clause))))
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; (&lt;span style=&quot;color: #A6E22E;&quot;&gt;abs&lt;/span&gt; x)
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;   (&amp;lt; x 0) (- x)
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;   (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; x)))
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; (&lt;span style=&quot;color: #A6E22E;&quot;&gt;abs&lt;/span&gt; x)
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (&amp;lt; x 0)
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;      (- x)
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;      x))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-10&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-10&quot;&gt;多条表达式&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-10&quot;&gt;
&lt;p&gt;
(begin ….)
cond的body中有一个隐含的begin，所以cond中可以放多条表达式，而对于if则
必须使用begin明确的将多条表达式包含起来
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-11&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-11&quot;&gt;The Law of Car&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-11&quot;&gt;
&lt;p&gt;
The primitive Car is defined only for non­empty lists.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-12&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-12&quot;&gt;The Law of Cdr&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-12&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;The primitive cdr is defined only for non­empty lists.
&lt;/li&gt;
&lt;li&gt;The cdr of any non-empty list is always another list.
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-13&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-13&quot;&gt;The Law of Cons&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-13&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;The primitive Cons takes two arguments.
&lt;/li&gt;
&lt;li&gt;The second argument to cons must be a list.
&lt;/li&gt;
&lt;li&gt;The result is a list.
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-14&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-14&quot;&gt;The Law of Null?&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-14&quot;&gt;
&lt;p&gt;
The primitive null? is defined only for lists.(only (null? &#39;()) return #t)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-15&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-15&quot;&gt;The Law of Eq?&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-15&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;The primitive eq? takes two arguments.
&lt;/li&gt;
&lt;li&gt;Each must be a non-numeric atom.
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-16&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-16&quot;&gt;The primitive fuctions&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-16&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;number?
&lt;/li&gt;
&lt;li&gt;eq?
&lt;/li&gt;
&lt;li&gt;null?
&lt;/li&gt;
&lt;li&gt;zero?
&lt;/li&gt;
&lt;li&gt;car
&lt;/li&gt;
&lt;li&gt;cdr
&lt;/li&gt;
&lt;li&gt;cons
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
&lt;b&gt;(the three fuction below is defined by the book)&lt;/b&gt;
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;atom?
&lt;/li&gt;
&lt;li&gt;add1
&lt;/li&gt;
&lt;li&gt;sub1
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-17&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-17&quot;&gt;quote，引用&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-17&quot;&gt;
&lt;p&gt;
first–—&amp;gt; symbol(or a variable)
&#39;first-—&amp;gt; an atom
&#39;1 or 1—&amp;gt; a number
当调用函数时，先会对各个参数求值，所以每一个参数要么是atom，list或者一
个已经绑定的symbol
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;Naming Conventions&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;谓词后加? , 但是常用的数字比较=, &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;=后面不需要?
&lt;/li&gt;
&lt;li&gt;类型测试, pair? , atom?
&lt;/li&gt;
&lt;li&gt;字符操作(char-xxx), 字符串操作(string-xxx), 向量操作(vector-xxx)
&lt;/li&gt;
&lt;li&gt;类型转换(type1-&amp;gt;type2)
&lt;/li&gt;
&lt;li&gt;但函数有副作用时,应该以 ! 结尾, 比如 &lt;code&gt;set!&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;core syntactic forms   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;core&quot;&gt;core&lt;/span&gt; &lt;span class=&quot;syntactic&quot;&gt;syntactic&lt;/span&gt; &lt;span class=&quot;form&quot;&gt;form&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;top-level &lt;code&gt;define&lt;/code&gt; forms
实际就是创建新的绑定,可以绑定 &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;lambda procedure&lt;/code&gt; 这是几个示例代
码:
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;double-any&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (f x)
    (f x x)))
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;identical&lt;/span&gt;
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; (&lt;span style=&quot;color: #A6E22E;&quot;&gt;double-any&lt;/span&gt; f x)
  (f x x))

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;xyz&lt;/span&gt; &#39;(x y z))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;constants
&amp;lt;constant&amp;gt; -—&amp;gt; &amp;lt;boolean&amp;gt; | &amp;lt;number&amp;gt; | &amp;lt;character&amp;gt; | &amp;lt;string&amp;gt;
&lt;/li&gt;
&lt;li&gt;variables
&lt;/li&gt;
&lt;li&gt;procedure applications &lt;code&gt;(procedure arg_1 ... arg_n)&lt;/code&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;Find the value of &lt;code&gt;procedure&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Find the value of &lt;code&gt;arg_1&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Find the value of &lt;code&gt;arg_n&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Apply the value of &lt;code&gt;procedure&lt;/code&gt; to the values of &lt;code&gt;arg_1&lt;/code&gt; … &lt;code&gt;arg_n&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quote&lt;/code&gt; expressions (&#39;)
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;quoting an &lt;code&gt;identifier&lt;/code&gt; tells Scheme to treat the identifier as a
&lt;code&gt;symbol&lt;/code&gt; rather than as a &lt;code&gt;variable&lt;/code&gt;. 也就是说scheme解释器不会去当前的
环境中寻找与该标识符绑定的值, 而是直接将该标识符当作symbol也就是数据处理.
&lt;/li&gt;
&lt;li&gt;quoting a list tells scheme to treat the list as data, rather than
as a procedure application
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lambda&lt;/code&gt; expressions
      &lt;code&gt;(lambda (x) (+ x x)) ==&amp;gt; #&amp;lt;procedure&amp;gt;&lt;/code&gt;

&lt;p&gt;
一般形式有这三种:
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;code&gt;(lambda (var1 var2 ...) exp1 exp2 ...)&lt;/code&gt;: var1 var2 …会依次赋值
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(lambda (var1 var2 . var) exp1 exp2)&lt;/code&gt;: var1 var2会依次赋值, 余下的参数
会组成一个列表赋给var
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(lambda var exp1 exp2)&lt;/code&gt;: 将所有的实参作为一个list赋给var, 注意var没有括号
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt; expressions: &lt;code&gt;(if test-expr then-expr else-expr)&lt;/code&gt; 只有 &lt;code&gt;test-expr&lt;/code&gt;
为 &lt;code&gt;#f&lt;/code&gt; 时才会运行 &lt;code&gt;else-expr&lt;/code&gt;, 所以你一般要使用 &lt;code&gt;null?&lt;/code&gt; &lt;code&gt;eq?&lt;/code&gt; 这样的函数
来测试
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set!&lt;/code&gt; expressions(Assignment):  Assignments do not create new bindings,
as with &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;lambda&lt;/code&gt;, but rather change the values of existing
bindings.也就是说赋值不会像let, lambda那样产生新的绑定,而是会改变已存在绑
定的值,如果你给set!指定的符号不存在,它会报错(set!: cannot set undefined
variable)
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
其它的都是一些扩展,也就是可以通过define-syntax定义出来的,比如let,and,or,not等
等,只有以上的部分才需要解释器直接实现的
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define-syntax&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;let&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;syntax-rules&lt;/span&gt; ()
    [(_ ((x v) ...) e1 e2 ...)
     ((&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x ...) e1 e2 ...) v ...)]))

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define-syntax&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;and&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;syntax-rules&lt;/span&gt; ()
    [(_) #t]
    [(_ e) e]
    [(_ e1 e2 e3 ...)
     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; e1 (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;and&lt;/span&gt; e2 e3 ...) #f)]))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
实际上define-syntax实际就是进行模式匹配,像cond,如果匹配那么就进行替换,比如
(and 1)就匹配((_ e) e)所以就被替换为1, _就是and的占位符, 而 &lt;code&gt;pat ...&lt;/code&gt; 代表0个
或者多个表达式, 比如 &lt;code&gt;(x v)&lt;/code&gt; 代表有0个或多个 &lt;code&gt;(x v)&lt;/code&gt; 这样的表达式
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;let   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;let&quot;&gt;let&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;form 1&lt;/span&gt;
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ((a exp1)
      (b exp2))
  (body1)
  (body2))
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;form2&lt;/span&gt;
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;f&lt;/span&gt; ([a exp1]
        [b exp2])
  (body1)
  (body2))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
由于 &lt;code&gt;scheme&lt;/code&gt; 对待中括号与对待小括号是一样的,所以为了可读性, &lt;code&gt;let&lt;/code&gt; 一般可以用如下代
码:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ([a exp1]
      [b exp2])
  (body1)
  (body2))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
form2主要是为了递归, 它使得在函数体中可以引用函数名, 比如下面的代码
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;fac&lt;/span&gt; ([n 10])
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (zero? n)
      1
      (* n (fac (sub1 n)))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;let: 如上所见,实际就是一个扩展语法,a,b只在body中可见, 所以你在exp2中不能使
用a
&lt;/li&gt;
&lt;li&gt;let*: exp2中可以引用a, 也就是a可以用来定义b, 可以用嵌套的 &lt;code&gt;let&lt;/code&gt; 来定义
     &lt;code&gt;let*&lt;/code&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define-syntax&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;let*&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;syntax-rules&lt;/span&gt; ()
    [(_ () e1 e2 ...)
     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; () e1 e2 ...)]
    [(_ ((x1 v1) (x2 v2) ...) e1 e2 ...)
     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ((x1 v1))
       (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let*&lt;/span&gt; ((x2 v2) ...) e1 e2 ...))]))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;letrec: 主要用来解决定义递归函数时,函数名在函数体中不可见的问题,比如
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ([sum (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (lst)
                (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (null? lst) 0
                    (+ (car lst) (sum (cdr lst)))))])
  (sum &#39;(1 2 3 4 5)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
如果运行上面的代码,那么你会 &lt;code&gt;sum undefined&lt;/code&gt; 的错误, 原因是 &lt;code&gt;sum&lt;/code&gt; 在后面的函数
体中不可见, 所以你使用 &lt;code&gt;(sum (cdr lst))&lt;/code&gt; 就会出错,当然你可以使用这种方法
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ([sum (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (sum lst)
                (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (null? lst) 0
                    (+ (car lst) (sum sum (cdr lst)))))])
  (sum sum &#39;(1 2 3 4 5)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
但这种方法不够自然,而且比较丑陋,不符合scheme中定义递归函数的一般模式,所以
就引入了 &lt;code&gt;letec&lt;/code&gt;.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;letrec&lt;/span&gt; ([sum (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (ls)
                (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (null? ls)
                    0
                    (+ (car ls) (sum (cdr ls)))))])
  (sum &#39;(1 2 3 4 5)))
&lt;span style=&quot;color: #75715E;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;the result is 15&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;letrec*: 和 &lt;code&gt;letrec&lt;/code&gt; 类似, 只是后面的绑定可以引用前面已经绑定的变量
&lt;/li&gt;
&lt;li&gt;let-values: 绑定多个变量
syntax:
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;(let-values ((formals expr) …) body1 body2 …)
&lt;/li&gt;
&lt;li&gt;(let*-values ((formals expr) …) body1 body2 …)
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let-values&lt;/span&gt; ([(a b) (values 1 2)] [c (values 1 2 3)])
  (list a b c)) &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;the result is (1 2 (1 2 3))&lt;/span&gt;

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let*-values&lt;/span&gt; ([(a b) (values 1 2)] [(a b) (values b a)])
  (list a b)) &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;the result is (2 1)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;control flow&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-5-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-1&quot;&gt;if   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;if&quot;&gt;if&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-1&quot;&gt;
&lt;p&gt;
当要写多个表达式时应该加入 &lt;code&gt;begin&lt;/code&gt; , 注意 &lt;code&gt;begin&lt;/code&gt; 会依次执行它所包含的表达式,并
返回最后一个表达式的值
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (test-exp)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;begin&lt;/span&gt;
      expression1
      expression2)
    expression3)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
如果 &lt;code&gt;test-exp&lt;/code&gt; 为true, 依次执行 &lt;code&gt;expression1&lt;/code&gt;, &lt;code&gt;expression2&lt;/code&gt; 那么返回
&lt;code&gt;expression2&lt;/code&gt; 的值, 之所以需要 &lt;code&gt;begin&lt;/code&gt; 是由 &lt;code&gt;if&lt;/code&gt; 的语法决定的, &lt;code&gt;if&lt;/code&gt; 的语
法如下:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (test-exp)
    (true-exp)
    (false-exp))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
所以如果你在 &lt;code&gt;true-exp&lt;/code&gt; 的位置放入多条表达式,那么这些表达式的第二条会被当
作 &lt;code&gt;false-exp&lt;/code&gt; ,而且因为 &lt;code&gt;if&lt;/code&gt; 后的表达式的条数超出 &lt;code&gt;2&lt;/code&gt; 条而报错, 所以你需
要把多条表达式括起来,但是你不能直接加一个括号,比如
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
((true-exp1)(true-exp2))
&lt;/pre&gt;
&lt;p&gt;
这样之所以不行是因为scheme会将 (true-exp1) 当作procedure求
值,这显然不对, 所以scheme使用begin, 也就变成了:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(begin
  (true-exp1)
  (true-exp2))
&lt;/pre&gt;
&lt;p&gt;
这就是if使用begin的原因了, 注意在 &lt;b&gt;let, lambda, define,cond的body中都不需
要begin,因为它们都没有if这种特殊的状况&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-2&quot;&gt;cond   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;cond&quot;&gt;cond&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-2&quot;&gt;
&lt;p&gt;
内部相当于有个隐含的begin,所以可以直接写多个表达式
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
 ((test-exp) (exp1) (exp2))
 (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; expression3))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
如果test-exp为true, 那么返回expression2的值
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-3&quot;&gt;when unless   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;when&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;unless&quot;&gt;unless&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;(when (test-exp) exp1 exp2) : test-exp为真就执行exp1, exp2
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define-syntax&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;when&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;syntax-rules&lt;/span&gt; ()
    [(_ e0 e1 e2 ...) (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; e0 (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;begin&lt;/span&gt; e1 e2 ...))]))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;(unless (test-exp) exp1 exp2) : 只有当 &lt;code&gt;test-exp&lt;/code&gt; 为#f时才会运行body中的
表达式
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-4&quot;&gt;case   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;case&quot;&gt;case&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-4&quot;&gt;
&lt;p&gt;
类似于C语言的switch
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ((x 4) (y 5))
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;case&lt;/span&gt; (+ x y)
    ((1 3 5 7 9) &#39;odd)
    ((0 2 4 6 8) &#39;even)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; &#39;out-of-range))) &lt;span style=&quot;color: #75715E;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;===&amp;gt; odd&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-5&quot;&gt;do   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;do&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-5&quot;&gt;
&lt;p&gt;
&lt;code&gt;syntax: (do ((var init update) ...) (test result ...) expr ...)&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
循环(do ((var init update) …) (test res …) exp …)  var的初始值是init,接
着每一次迭代都绑定到update, (test res..)如果为true,那么就终止循环
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;divisors&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (n)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;do&lt;/span&gt; ((i 2 (+ i 1))
         (ls &#39;()
             (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (integer? (/ n i))
                 (cons i ls)
                 ls)))
        ((&amp;gt;= i n) ls))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-6&quot;&gt;map&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-6&quot;&gt;
&lt;p&gt;
(map procedure list1 list2 …) 会返回一个 &lt;code&gt;list&lt;/code&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;map&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x y) (* x y))
     &#39;(1 2 3 4)
     &#39;(8 7 6 5))      &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return (8 14 18 20)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-7&quot;&gt;for-each&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-7&quot;&gt;
&lt;p&gt;
和map类似但是不返回一个list作为结果
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-8&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-8&quot;&gt;apply&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-8&quot;&gt;
&lt;p&gt;
(apply procedure obj … list)
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;code&gt;(apply + &#39;(4 5)) ===&amp;gt; 9&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(apply min  5 1 3 &#39;(6 8 3 2 5))&lt;/code&gt; 结果是1
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-9&quot;&gt;multiple values&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-9&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;(values obj …) :返回多个值,注意它的返回值可以用 &lt;code&gt;let-values&lt;/code&gt; 来绑定,不能用 &lt;code&gt;define&lt;/code&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let-values&lt;/span&gt; ([(a b) (values 1 2)])
  (+ a b))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;(call-with-values producer consumer): producer产生多个值, 然后将这些值传
递给consumer.注意producer必须可以不带参数的方式来调用
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(call-with-values
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; () (values &#39;bond &#39;james))
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x y) (cons y x)))  &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;the result is (james . bond)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;内置的函数(predictions and some useful procedure of built-in type)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-6-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-1&quot;&gt;predication&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;= : 只用来比较整数, 不要用来比较浮点数
&lt;/li&gt;
&lt;li&gt;eq? : 可以类似的看作是指针比较, 即便是内容相同,但是如果是两个不同对象,它
就返回 &lt;code&gt;#f&lt;/code&gt;, 比如 &lt;code&gt;(eq? (cons &#39;a &#39;b) (cons &#39;a &#39;b))&lt;/code&gt; 虽然是同样的list, 可
是它在内存中的位置不同,所以为 #f. 有以下几种情况是相等的.
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;#t, #f, 两个identifier的值如果都是#t或者#f,那么它们相等
&lt;/li&gt;
&lt;li&gt;相同的符号(symbol), 比如
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;sym1&lt;/span&gt; &#39;hello)
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;sym2&lt;/span&gt; &#39;hello)
(eq? sym1 sym2)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&#39;()
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;eqv? : 和 &lt;code&gt;eq?&lt;/code&gt; 很类似, 只是它在一些 &lt;code&gt;eq?&lt;/code&gt; 没有定义的地方也可以使用
&lt;/li&gt;
&lt;li&gt;equal? : 只要内容相同,它就会返回 #t,可以认为它的检查比 &lt;code&gt;eq?&lt;/code&gt; 宽松
&lt;/li&gt;
&lt;li&gt;boolean? : 等价于 &lt;code&gt;(lambda (x) (or (eq? x #t) (eq? x #f)))&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;null? : 只作用于list
&lt;/li&gt;
&lt;li&gt;pair? :
&lt;/li&gt;
&lt;li&gt;number? :
&lt;/li&gt;
&lt;li&gt;complex? :
&lt;/li&gt;
&lt;li&gt;rational? :
&lt;/li&gt;
&lt;li&gt;real? :
&lt;/li&gt;
&lt;li&gt;integer? :
&lt;/li&gt;
&lt;li&gt;char? :
&lt;/li&gt;
&lt;li&gt;string? :
&lt;/li&gt;
&lt;li&gt;vector? :
&lt;/li&gt;
&lt;li&gt;symbol? :
&lt;/li&gt;
&lt;li&gt;procedure? :
&lt;/li&gt;
&lt;li&gt;bytevector? :
&lt;/li&gt;
&lt;li&gt;hashtable? :
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-2&quot;&gt;list procedure&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-2&quot;&gt;
&lt;p&gt;
&lt;code&gt;list&lt;/code&gt; 的语法定义:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
List ::= &#39;()
     ::= (Sexp . List)
&lt;/pre&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;cons: (cons &#39;a &#39;b) ==&amp;gt; (a . b),只能带两个参数
&lt;/li&gt;
&lt;li&gt;cons* : (cons* &#39;a &#39;b &#39;c) ==&amp;gt; (a b . c)    (cons* &#39;a &#39;b &#39;(c)) ==&amp;gt; (a b c)
&lt;/li&gt;
&lt;li&gt;car: the firsts element of pair
&lt;/li&gt;
&lt;li&gt;cdr:
&lt;/li&gt;
&lt;li&gt;set-car! :有副作用, 会原地改变pair的值
&lt;/li&gt;
&lt;li&gt;set-cdr! :
&lt;/li&gt;
&lt;li&gt;car, caar, caaar…etc: 连续执行n次(a的次数)car
(caar &#39;((5)) ) ===&amp;gt; 5
&lt;/li&gt;
&lt;li&gt;cdr cddr cdddr …etc : 连续执行n次(d的个数)cdr
&lt;/li&gt;
&lt;li&gt;cadar : (car (cdr (car lst))) 记住按照顺序从左到右,最右边的先对list起作用
&lt;/li&gt;
&lt;li&gt;list: 创建一个list eg: (list 1 2 3 4) ===&amp;gt; &#39;(1 2 3 4)
&lt;/li&gt;
&lt;li&gt;length: list的长度
&lt;/li&gt;
&lt;li&gt;append: 将一个list添加另一个list的后边,eg: (append &#39;(1 2) &#39;(3 4)) ===&amp;gt; &#39;(1 2 3 4)
&lt;/li&gt;
&lt;li&gt;reverse: 将list倒转
&lt;/li&gt;
&lt;li&gt;(list-ref list n): 第n个元素
&lt;/li&gt;
&lt;li&gt;(list-tail list n) : 倒数第n个元素
&lt;/li&gt;
&lt;li&gt;memq memv member memp 分别用eq? eqv? equal? 指定的procedure 来测试一个元
素是否属于list, 如果属于那么就返回包括该元素以及该元素后面的元素组成的
list, &lt;code&gt;(memq &#39;a &#39;(b c a d e)) --&amp;gt; (a d e)&lt;/code&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;memq&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x ls)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
      ((null? ls) #f)
      ((eq? (car ls) x) ls)
      (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (memq x (cdr ls))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;remq (obj list) remv remove remp 删除list中的所有obj
&lt;/li&gt;
&lt;li&gt;assq assv assoc assp 可以看做是关联数组((key1 . val1) (key2 . val2) …)
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;assq&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x ls)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
      ((null? ls) #f)
      ((eq? (caar ls) x) (car ls))
      (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (assq x (cdr ls))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
返回第一个匹配的pair
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;(filter procedure list): return a list of the elements of list for which
procedure returns true
&lt;/li&gt;
&lt;li&gt;(partition procedure list): 返回两个list,第一个list包含所以使
       &lt;code&gt;procedure&lt;/code&gt; 为#f的元素,第二个包含所有使 &lt;code&gt;procedure&lt;/code&gt; 为 &lt;code&gt;#f&lt;/code&gt; 的元素,
       &lt;code&gt;partition&lt;/code&gt; 的返回值可以使用 &lt;code&gt;let-values&lt;/code&gt; 来绑定或者使用
       &lt;code&gt;call-with-values&lt;/code&gt; 来调用其它函数
&lt;/li&gt;
&lt;li&gt;(find procedure list) : 返回第一个使procedure为#t的元素
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-6-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-3&quot;&gt;number procedure&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;zero? :
&lt;/li&gt;
&lt;li&gt;positive? :
&lt;/li&gt;
&lt;li&gt;negative? :
&lt;/li&gt;
&lt;li&gt;even? :
&lt;/li&gt;
&lt;li&gt;odd? : 奇数
&lt;/li&gt;
&lt;li&gt;数学函数: max, min, floor, ceiling(向+无穷取整), truncate(向0取整),round(最接近的整数),
abs,gcd,expt(指数),三角系列函数(san,cos….)
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-4&quot;&gt;char&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-4&quot;&gt;
&lt;p&gt;
字符使用 &lt;code&gt;#\x&lt;/code&gt; 来表示,比如 &lt;code&gt;a&lt;/code&gt; 就是 &lt;code&gt;#\a&lt;/code&gt;,
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;(char=? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(char&amp;lt;? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(char&amp;gt;? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(char&amp;lt;=? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(char&amp;gt;=? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(char-ci=? char1 char2 char3 …) 大小写敏感
&lt;/li&gt;
&lt;li&gt;(char-ci&amp;lt;? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(char-ci&amp;gt;? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(char-ci&amp;lt;=? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(char-ci&amp;gt;=? char1 char2 char3 …)
&lt;/li&gt;

&lt;li&gt;(char-upcase char) :大写,相对应的还有个char-downcase
&lt;/li&gt;
&lt;li&gt;(char-&amp;gt;integer char)
&lt;/li&gt;
&lt;li&gt;(integer-&amp;gt;char n)
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-5&quot;&gt;string&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-5&quot;&gt;
&lt;p&gt;
双引号内的是字符串
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;(string=? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(string&amp;lt;? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(string&amp;gt;? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(string&amp;lt;=? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(string&amp;gt;=? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(string-ci=? char1 char2 char3 …) 大小写敏感
&lt;/li&gt;
&lt;li&gt;(string-ci&amp;lt;? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(string-ci&amp;gt;? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(string-ci&amp;lt;=? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(string-ci&amp;gt;=? char1 char2 char3 …)
&lt;/li&gt;
&lt;li&gt;(string char …): 构建个包含指定的字符的字符串
&lt;/li&gt;
&lt;li&gt;(make-string n), (make-string n char)
&lt;/li&gt;
&lt;li&gt;(string-append string …)
&lt;/li&gt;
&lt;li&gt;(substring string start end)
&lt;/li&gt;
&lt;li&gt;(string-upcase string)
&lt;/li&gt;
&lt;li&gt;(string-&amp;gt;list): 把string转换成包含char的list
&lt;/li&gt;
&lt;li&gt;(char-&amp;gt;list lst)
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-6-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-6&quot;&gt;vector procedure&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-6&quot;&gt;
&lt;p&gt;
list访问时需要遍历,不够高效, vector可以像数组一样O(1)时间内访问
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;(vector obj …)
&lt;/li&gt;
&lt;li&gt;make-vector: (make-vector 5 &#39;a) ===&amp;gt;  #(a a a a a)
&lt;/li&gt;
&lt;li&gt;vector-length: vector的长度
&lt;/li&gt;
&lt;li&gt;(vector-ref vec n)
&lt;/li&gt;
&lt;li&gt;(vector-set! vec n obj)
&lt;/li&gt;
&lt;li&gt;(vector-fill vec obj): 所有的元素都替换为obj
&lt;/li&gt;
&lt;li&gt;list-&amp;gt;vector :
&lt;/li&gt;
&lt;li&gt;vector-&amp;gt;list :
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6-7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-7&quot;&gt;symbol procedure&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-7&quot;&gt;
&lt;p&gt;
每一个symbol在解释器内部都是指向同一个对象,所以用eq?来测试相同的symbol会返
回#t, 这也使得比较操作很高效
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;symbol=? :symbol是否相等,也可以用eq?来比较
&lt;/li&gt;
&lt;li&gt;symbol-&amp;gt;string:
&lt;/li&gt;
&lt;li&gt;string-&amp;gt;symbol:
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6-8&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-8&quot;&gt;Hash Table&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-8&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;(make-eq-hashtable) : 使用eq?来比较两个key, 返回一个hashtable
&lt;/li&gt;
&lt;li&gt;(make-eq-hashtable size)
&lt;/li&gt;
&lt;li&gt;(make-eqv-hashtable) : 使用eqv?来比较两个key
&lt;/li&gt;
&lt;li&gt;(make-eqv-hashtable size)
&lt;/li&gt;
&lt;li&gt;(make-hashtable hash equiv?) : hash指定hash函数, equiv?指定比较两个key的
函数
&lt;/li&gt;
&lt;li&gt;(make-hashtable hash equiv? size)
&lt;/li&gt;

&lt;li&gt;(hashtable-set! hashtable key obj) :
&lt;/li&gt;
&lt;li&gt;(hashtable-ref hashtable key default) :
&lt;/li&gt;
&lt;li&gt;(hashtable-delete! hashtable key) :
&lt;/li&gt;
&lt;li&gt;(hashtable-size hashtable) : hashtable的大小
&lt;/li&gt;
&lt;li&gt;(hashtable-contains? hashtable key) :测试是否包含指定的key
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-7&quot;&gt;macros&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-7&quot;&gt;
&lt;p&gt;
定义一个宏实际上就是把一个keyword与一系列的transformers绑定
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-7-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-1&quot;&gt;define-syntax&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-1&quot;&gt;
&lt;p&gt;
和define类似
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define-syntax&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;let*&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;syntax-rules&lt;/span&gt; ()
    [(_ () b1 b2 ...) (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; () b1 b2 ...)]
    [(_ ((i1 e1) (i2 e2) ...) b1 b2 ...)
     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ([i1 e1])
       (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let*&lt;/span&gt; ([i2 e2] ...) b1 b2 ...))]))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-2&quot;&gt;let-syntax与letrec-syntax&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ([f (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x) (+ x 1))])
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let-syntax&lt;/span&gt; ([f (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;syntax-rules&lt;/span&gt; ()
                    [(_ x) x])]
               [g (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;syntax-rules&lt;/span&gt; ()
                    [(_ x) (f x)])])
    (list (f 1) (g 1)))) &lt;span style=&quot;color: #75715E;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;(1 2)&lt;/span&gt;

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ([f (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x) (+ x 1))])
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;letrec-syntax&lt;/span&gt; ([f (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;syntax-rules&lt;/span&gt; ()
                       [(_ x) x])]
                  [g (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;syntax-rules&lt;/span&gt; ()
                       [(_ x) (f x)])])
    (list (f 1) (g 1)))) &lt;span style=&quot;color: #75715E;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;(1 1)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-3&quot;&gt;syntax-rules&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-3&quot;&gt;
&lt;p&gt;
返回一个transformer, 基本语法:
&lt;code&gt;(syntax-rules (literal ...) (pattern template) ...)&lt;/code&gt;
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;literal: 一些关键字, 出现在pattern会原样匹配
&lt;/li&gt;
&lt;li&gt;pattern: 用于匹配输入的表达式的模式
&lt;/li&gt;
&lt;li&gt;template: 输出
&lt;/li&gt;
&lt;li&gt;下划线&#39;&lt;sub&gt;&#39;&lt;/sub&gt;: 可以匹配任何结构,一般用来代表宏名
&lt;/li&gt;
&lt;li&gt;… : 代表前面的部分重复0次或者多次
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
一个例子,这个例子实现一个类 &lt;code&gt;if&lt;/code&gt; 的条件判断语句,他的形式是 &lt;code&gt;(my-if cond then
    exp1 else exp2)&lt;/code&gt; 这看起来更可读性更好:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define-syntax&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;my-if&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;syntax-rules&lt;/span&gt; (then else)
    [(_ condition then true-exp else false-exp)
     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; condition true-exp false-exp)]))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;code&gt;then, else&lt;/code&gt; 是关键字,所以它会原样的匹配输入
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-4&quot;&gt;syntax-case&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-4&quot;&gt;
&lt;p&gt;
比 &lt;code&gt;syntax-rules&lt;/code&gt; 更具一般性,而且更通用, 使用syntax-case的一般形式是:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(define-syntax macro-name
   (lambda (x)
     (syntax-case x (other keywords go here if any)
       [
         (macro-name macro-arg1 macro-arg2)
         ;;Expansion of macro (one or multiple forms)
         ;;(syntax is a reserved word)
         (syntax (expansion of macro goes here))
       ]  ...
 )))
&lt;/pre&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define-syntax&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;my-if&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x)
    (syntax-case x (then else)
      [(_ condition then true-exp else false-exp)
       (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;syntax&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; condition true-exp false-exp))])))
&lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Define a new macro&lt;/span&gt;
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define-syntax&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;swap!&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x)
    &lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;we don&#39;t have any keywords this time&lt;/span&gt;
    (syntax-case x ()
      (
       (swap! a b)
       (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;syntax&lt;/span&gt;
        (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ((c a))
          (set! a b)
          (set! b c)))
       )
      )))

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define-syntax&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;syntax-rules&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x)
    (syntax-case x ()
      [(_ (i ...) ((keyword . pattern) template) ...)
       #&#39;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x)
           (syntax-case x (i ...)
             [(_ . pattern) #&#39;template] ...))])))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-5&quot;&gt;syntax&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-5&quot;&gt;
&lt;p&gt;
&lt;code&gt;(syntax template)&lt;/code&gt; 的缩写为 &lt;code&gt;#&#39;template&lt;/code&gt;, syntax和quote很类似,只是它会将
template中的pattern variable替换掉, 并且会绑定上下文信息
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-7-6&quot;&gt;with-syntax&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-7-6&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define-syntax&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;with-syntax&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x)
    (syntax-case x ()
      [(_ ((p e) ...) b1 b2 ...)
       #&#39;(syntax-case (list e ...) ()
           [(p ...) (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; () b1 b2 ...)])])))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-8&quot;&gt;input and output&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-8&quot;&gt;
&lt;p&gt;
scheme的输入输出用到一个叫做port的对象,port也是first class object, 默认解释器会打开2个port, 一个输入,一个输
出,分别会绑定到shell的输入输出,很多实现还会打开一个error port,这些和C语言很相似,用于IO的scheme procedure都
可以带一个可选的参数port, 如果不指定port, 那么就默认使用(current-input-port)以及(current-output-port)返回的
port,current-input-port, current-output-port返回的port可以通过with-input-from-file以及with-output-from-file
改变,这样就可以实现重定向的效果, 常用的IO procedure有:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;(open-input-file filename)
&lt;/li&gt;
&lt;li&gt;(close-input-port input-port)
&lt;/li&gt;
&lt;li&gt;(call-with-input-file filename proc) : 打开filename并将得到的port传递给proc, 并且调用完成时会关闭port
&lt;/li&gt;
&lt;li&gt;(with-input-from-file filename thunk) : 将current input port重新绑定到文件,这可以实现重定向
&lt;/li&gt;
&lt;li&gt;(read input-port), (read) : 返回下一个object
&lt;/li&gt;
&lt;li&gt;(read-char), (read-char input-port): next character
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
some code example
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;call-with-input-file&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;myfile.ss&quot;&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (p)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;f&lt;/span&gt; ((x (read p)))
      (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (eof-object? x)
          &#39;()
          (cons x (f (read p)))))))

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;read-word&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (p)
    (list-&amp;gt;string
      (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;f&lt;/span&gt; ()
        (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;let&lt;/span&gt; ((c (peek-char p)))
          (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
            ((eof-object? c) &#39;())
            ((char-alphabetic? c)
             (read-char p)
             (cons c (f)))
            (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; &#39;())))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
output和input很相似
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-9&quot;&gt;递归思想&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-9&quot;&gt;
&lt;p&gt;
递归的思想要从逻辑上理解，在设计一个递归函数时，一开始就要明确该函数在逻辑上的作用(不要一开始就陷入编码细节
中)，然后分清该函数在逻辑上与
子问题的联系，并以此为 依据来进行函数体的设计, 特别需要注意检查结束条件,比如加法(0), 乘法(1), list(&#39;())就是
一些结束条件.
&lt;/p&gt;

&lt;p&gt;
递归函数的设计要点：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;要明确检查终止条件（null？ zero？）
&lt;/li&gt;
&lt;li&gt;要明确与子问题的关系，弄清分类的情况（cond）
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-10&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-10&quot;&gt;continuation   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;continuation&quot;&gt;continuation&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-10&quot;&gt;
&lt;p&gt;
这是一份关于continuation的&lt;a href=&quot;http://www.cs.unm.edu/~williams/cs491/appcont.pdf&quot;&gt;文档&lt;/a&gt;, 将continuation讲的非常清楚,我简要的总结下我的理解:
先说几个概念与符号:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;escape procedure: 它和普通的procedure是一样的,而且也有相同的行为,会返回相
同的值,唯一的不同的是这个函数它返回后就会替换调用栈,也就是说它会返回解释器
的最顶层或者解释器的REPL循环, 一个普通的procedure对应的escape procedure通
过在符号后添加&lt;sup&gt;来表示&lt;/sup&gt;,比如 &lt;code&gt;k&lt;/code&gt; 是一个普通的procedure, 那么它对应的escape
procedure就是 &lt;code&gt;k^&lt;/code&gt; , 还有 &lt;code&gt;lambda&lt;/code&gt; 是用来构建普通的procedure, 那么
&lt;code&gt;lambda^&lt;/code&gt; 就是用来构建 &lt;code&gt;escape procedure&lt;/code&gt;.(注意 &lt;code&gt;lambda^&lt;/code&gt; 不是scheme的一
部分)下面举个例子:
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;k&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x y)
    (+ x y)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
现在假设你使用 &lt;code&gt;(+ 3 (k 1 2))&lt;/code&gt; 那么结果是6, 但是如果你使用 &lt;code&gt;(+ 3 (k^ 1
      2))&lt;/code&gt; 它就会返回 &lt;code&gt;3&lt;/code&gt;, 原因是 &lt;code&gt;k^&lt;/code&gt; 与 &lt;code&gt;k&lt;/code&gt; 虽然有相同的返回值,但是它会替换
调用栈,所以也就不会执行后面的 &lt;code&gt;(+ 3)&lt;/code&gt;,而是直接返回 &lt;code&gt;k^&lt;/code&gt; 的值
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;continuation: 通俗点说 &lt;code&gt;continuation&lt;/code&gt; 实际就是代表接下来要做的事或要进行的
操作, 也就是所谓的 &lt;code&gt;the rest of computation&lt;/code&gt;, 所以当你要找一个函数来代表
某一点的continuation时,你只要弄清楚该点接下来要进行的操作,把这些操作封装
进一个函数就好 有了 &lt;code&gt;escape procedure&lt;/code&gt; 的概念后,那么continuation可以看作
就是escape procedure.
&lt;/li&gt;
&lt;li&gt;scheme的 call/cc
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(+ 2 (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;call/cc&lt;/span&gt;
      (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (k^)
        (* 5 (k^ 4)))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
从上例可以看出 &lt;code&gt;call/cc&lt;/code&gt; 的参数是一个lambda函数, 该函数也有一个参数(&lt;code&gt;k^&lt;/code&gt;),
很显然 &lt;code&gt;k^&lt;/code&gt; 是一个escape procedure, 当然 &lt;code&gt;k^&lt;/code&gt; 也代表当前的
&lt;code&gt;continuation&lt;/code&gt;,在上例中,它的定义可以大致认为是这样的:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(lambda^ (v)
         (+ 2 v))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
因为上例直接返回最顶层,所以可以直接这样
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (v)
  (+ 2 v))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
所以当你使用 &lt;code&gt;(k^ 4)&lt;/code&gt; 时, 它就返回 &lt;code&gt;6&lt;/code&gt;, 同时替换调用栈,返回解释器的最上层,同
时从这个例子你也可以体会continuation的含义, continuation就是接下来要做的
事或者操作, 那么上例中 &lt;code&gt;call/cc&lt;/code&gt; 之后接下来要做的事显然就是 (+ 2
ret-of-call/cc),也就是加2
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-10-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-10-1&quot;&gt;call/cc&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-10-1&quot;&gt;
&lt;p&gt;
&lt;code&gt;call/cc&lt;/code&gt; &lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;是 &lt;code&gt;call-with-current-continuation&lt;/code&gt; 的缩写. 它的基本形式是这样的:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;call/cc&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (k)
    (* 5 (k 4))))
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;the result is 4&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;code&gt;call/cc&lt;/code&gt; 的参数是一个函数, 这个函数有一个参数, 这个参数会绑定到当前的
&lt;code&gt;continuation&lt;/code&gt;, 具体到这个例子就是: &lt;code&gt;k&lt;/code&gt; 代表当前的continuation(也就是
&lt;code&gt;call/cc&lt;/code&gt; 调用时的 &lt;code&gt;continuation&lt;/code&gt;), 现在当你应用该 &lt;code&gt;continuation&lt;/code&gt; 也就是使
用 &lt;code&gt;(k 4)&lt;/code&gt; 时代码会立即从 &lt;code&gt;call/cc&lt;/code&gt; 中返回, 并且返回值是 &lt;code&gt;4&lt;/code&gt;, 注意它不会执行
前面的 (* 5), 所以不要以为是返回 20. 下面在举几个例子:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;call/cc&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (k)
    (* 5 4)))                           &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return 20&lt;/span&gt;

(+ 2
   (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;call/cc&lt;/span&gt;
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (k)
      (* 5 (k 4)))))                    &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return 6&lt;/span&gt;

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;return&lt;/span&gt; #f)
(+ 1 (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;call/cc&lt;/span&gt;
      (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (cont)
        (set! return cont)
        1)))                            &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return 2&lt;/span&gt;
(return 22)                             &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return 23&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
再来看一个比较不好懂的例子
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(((&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;call/cc&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (k) k))
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x) x)) &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;HEY!&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;code&gt;(call/cc (lambda(k) k))&lt;/code&gt; 返回当前的 &lt;code&gt;continuation&lt;/code&gt;, 我假设该continuation为
&lt;code&gt;ct&lt;/code&gt;, 那么 &lt;code&gt;(ct (lambda(x) x))&lt;/code&gt; 就会返回 &lt;code&gt;(lambda(x) x)&lt;/code&gt;, 然后 &lt;code&gt;((lambda(x)
    x) &quot;HEY!&quot;)&lt;/code&gt;, 自然就返回 &quot;HEY!&quot;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-10-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-10-2&quot;&gt;应用&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-10-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;BREAK与RESUME, 通过BREAK来暂停, 通过RESUME来从暂停的位置启动.
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;BREAK&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (message)
    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;call/cc&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (k^)
               (set! RESUME K^)
               ((lambda^ (x) x) message)))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-10-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-10-3&quot;&gt;CPS&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-10-3&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation-passing_style&quot;&gt;CPS&lt;/a&gt;(continuation passing style). 核心就是每一个函数都会带一个额外的参数
(continuation),前面说了continuation代表的是the rest of computation, 因此这个
参数(continuation)代表了调用者需要对该函数的返回值进行的处理, 因此一个CPS方
式编写的函数最后都会使用函数的计算结果来调用你传递的那个continuation.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-11&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-11&quot;&gt;停机问题&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-11&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;last-try&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;2: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; ( x )
&lt;span class=&quot;linenr&quot;&gt;3: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;and&lt;/span&gt; ( will-stop ? last-try)
&lt;span class=&quot;linenr&quot;&gt;4: &lt;/span&gt;         ( eternity x ))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上述代码中:eternity会永远运行,比如:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;eternity&lt;/span&gt;
  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x)
    (eternity x)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
假设存在停机函数 &lt;code&gt;will-stop?&lt;/code&gt;, &lt;code&gt;will-stop?&lt;/code&gt; 可以测试出一个函数是否会停机.那么:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;假设 &lt;code&gt;last-try&lt;/code&gt; 会停机, 那么 &lt;code&gt;(will-stop? last-try)&lt;/code&gt; 返回 #t, 因此也就会运行
   &lt;code&gt;(eternity x)&lt;/code&gt;, 前面说了, eternity会永远运行, 所以 &lt;code&gt;last-try&lt;/code&gt; 不会停机.
&lt;/li&gt;
&lt;li&gt;假设 &lt;code&gt;last-try&lt;/code&gt; 不停机, 那么 &lt;code&gt;(will-stop? last-try)&lt;/code&gt; 返回 #f, 因此也就不会运
行 &lt;code&gt;(eternity x)&lt;/code&gt;, 那么 &lt;code&gt;last-try&lt;/code&gt; 很显然就会返回. 所以 &lt;code&gt;last-try&lt;/code&gt; 会停机
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
因此这就是个悖论.因此停机函数 will-stop?不存在
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-12&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-12&quot;&gt;some example code(the little schemer)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-12&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;  1: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;test if x is a atom&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;  2: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;atom?&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;  3: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x)
&lt;span class=&quot;linenr&quot;&gt;  4: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;and&lt;/span&gt; (not (pair? x))
&lt;span class=&quot;linenr&quot;&gt;  5: &lt;/span&gt;         (not (null? x)))))
&lt;span class=&quot;linenr&quot;&gt;  6: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;add1&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;  7: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt;(x)
&lt;span class=&quot;linenr&quot;&gt;  8: &lt;/span&gt;    (+ x 1)))
&lt;span class=&quot;linenr&quot;&gt;  9: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;sub1&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 10: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x)
&lt;span class=&quot;linenr&quot;&gt; 11: &lt;/span&gt;    (- x 1)))
&lt;span class=&quot;linenr&quot;&gt; 12: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 13: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 14: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;test if x is the member of lat(list)&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 15: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;member?&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 16: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (x l)
&lt;span class=&quot;linenr&quot;&gt; 17: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 18: &lt;/span&gt;      ((null? l) #f)
&lt;span class=&quot;linenr&quot;&gt; 19: &lt;/span&gt;      (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;or&lt;/span&gt; (eq? x (car l))
&lt;span class=&quot;linenr&quot;&gt; 20: &lt;/span&gt;                (member? x (cdr l)))))))
&lt;span class=&quot;linenr&quot;&gt; 21: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;test if the list is composed only of atom&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 22: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;lat?&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 23: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (l)
&lt;span class=&quot;linenr&quot;&gt; 24: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 25: &lt;/span&gt;     ((null? l) #t)
&lt;span class=&quot;linenr&quot;&gt; 26: &lt;/span&gt;     ((atom? (car l)) (lat? (cdr l)))
&lt;span class=&quot;linenr&quot;&gt; 27: &lt;/span&gt;     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; #f))))
&lt;span class=&quot;linenr&quot;&gt; 28: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;(firsts &#39;((1 2 3) (a b c) (e f g)))&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 29: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return (1 a e)&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 30: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;firsts&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 31: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (l)
&lt;span class=&quot;linenr&quot;&gt; 32: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 33: &lt;/span&gt;     ((null? l) &#39;())
&lt;span class=&quot;linenr&quot;&gt; 34: &lt;/span&gt;     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (cons (car (car l))
&lt;span class=&quot;linenr&quot;&gt; 35: &lt;/span&gt;                (firsts (cdr l)))))))
&lt;span class=&quot;linenr&quot;&gt; 36: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;将new插入lat中第一个old的后面&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 37: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;insertR&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 38: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (new old lat)
&lt;span class=&quot;linenr&quot;&gt; 39: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 40: &lt;/span&gt;     ((null? lat) &#39;())
&lt;span class=&quot;linenr&quot;&gt; 41: &lt;/span&gt;     ((eq? old (car lat))
&lt;span class=&quot;linenr&quot;&gt; 42: &lt;/span&gt;      (cons old
&lt;span class=&quot;linenr&quot;&gt; 43: &lt;/span&gt;            (cons new
&lt;span class=&quot;linenr&quot;&gt; 44: &lt;/span&gt;                  (cdr lat))))
&lt;span class=&quot;linenr&quot;&gt; 45: &lt;/span&gt;     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (cons (car lat) (insertR new old (cdr lat)))))))
&lt;span class=&quot;linenr&quot;&gt; 46: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;将new插入lat中第一个lat的前面&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 47: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;insertL&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 48: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (new old lat)
&lt;span class=&quot;linenr&quot;&gt; 49: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 50: &lt;/span&gt;     ((null? lat) &#39;())
&lt;span class=&quot;linenr&quot;&gt; 51: &lt;/span&gt;     ((eq? old (car lat)) (cons new lat))
&lt;span class=&quot;linenr&quot;&gt; 52: &lt;/span&gt;     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (cons (car lat) (insertL new old (cdr lat)))))))
&lt;span class=&quot;linenr&quot;&gt; 53: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;将new插入lat中第所有old的后面&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 54: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;multiinsertR&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 55: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (new old lat)
&lt;span class=&quot;linenr&quot;&gt; 56: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 57: &lt;/span&gt;     ((null? lat) &#39;())
&lt;span class=&quot;linenr&quot;&gt; 58: &lt;/span&gt;     ((eq? old (car lat))
&lt;span class=&quot;linenr&quot;&gt; 59: &lt;/span&gt;      (cons old
&lt;span class=&quot;linenr&quot;&gt; 60: &lt;/span&gt;            (cons new (multiinsertR new old (cdr lat)))))
&lt;span class=&quot;linenr&quot;&gt; 61: &lt;/span&gt;     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (cons (car lat) (multiinsertR new old (cdr lat)))))))
&lt;span class=&quot;linenr&quot;&gt; 62: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 63: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;以*结尾意味着对每一个元素递归&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 64: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;(rember* &#39;aa &#39;(aa (aa bb) (aa bb cc)))&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 65: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return ((bb) (bb cc))&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 66: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;rember*&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 67: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (a l)
&lt;span class=&quot;linenr&quot;&gt; 68: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 69: &lt;/span&gt;     ((null? l) &#39;())
&lt;span class=&quot;linenr&quot;&gt; 70: &lt;/span&gt;     ((atom? (car l))
&lt;span class=&quot;linenr&quot;&gt; 71: &lt;/span&gt;      (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 72: &lt;/span&gt;       ((eq? a (car l)) (rember* a (cdr l)))
&lt;span class=&quot;linenr&quot;&gt; 73: &lt;/span&gt;       (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (cons (car l) (rember* a (cdr l))))))
&lt;span class=&quot;linenr&quot;&gt; 74: &lt;/span&gt;     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (cons (rember* a (car l))
&lt;span class=&quot;linenr&quot;&gt; 75: &lt;/span&gt;                 (rember* a (cdr l)))))))
&lt;span class=&quot;linenr&quot;&gt; 76: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;insertR*&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 77: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (new old lat)
&lt;span class=&quot;linenr&quot;&gt; 78: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 79: &lt;/span&gt;     ((null? lat) &#39;())
&lt;span class=&quot;linenr&quot;&gt; 80: &lt;/span&gt;     ((atom? (car lat))
&lt;span class=&quot;linenr&quot;&gt; 81: &lt;/span&gt;      (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (eq? old (car lat))
&lt;span class=&quot;linenr&quot;&gt; 82: &lt;/span&gt;          (cons old (cons new
&lt;span class=&quot;linenr&quot;&gt; 83: &lt;/span&gt;                          (insertR* new old (cdr lat))))
&lt;span class=&quot;linenr&quot;&gt; 84: &lt;/span&gt;          (cons (car lat) (insertR*  new old (cdr lat)))))
&lt;span class=&quot;linenr&quot;&gt; 85: &lt;/span&gt;     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (cons (insertR* new old (car lat))
&lt;span class=&quot;linenr&quot;&gt; 86: &lt;/span&gt;                 (insertR* new old (cdr lat)))))))
&lt;span class=&quot;linenr&quot;&gt; 87: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;insertL*&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 88: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (new old lat)
&lt;span class=&quot;linenr&quot;&gt; 89: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 90: &lt;/span&gt;     ((null? lat) &#39;())
&lt;span class=&quot;linenr&quot;&gt; 91: &lt;/span&gt;     ((atom? (car lat)) (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (eq? old (car lat))
&lt;span class=&quot;linenr&quot;&gt; 92: &lt;/span&gt;                            (cons new (cons old
&lt;span class=&quot;linenr&quot;&gt; 93: &lt;/span&gt;                                            (insertL* new old (cdr
&lt;span class=&quot;linenr&quot;&gt; 94: &lt;/span&gt;                                                               lat))))
&lt;span class=&quot;linenr&quot;&gt; 95: &lt;/span&gt;                            (cons (car lat) (insertL* new old (cdr
&lt;span class=&quot;linenr&quot;&gt; 96: &lt;/span&gt;                                                               lat)))))
&lt;span class=&quot;linenr&quot;&gt; 97: &lt;/span&gt;     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (cons (insertL* new old (car lat))
&lt;span class=&quot;linenr&quot;&gt; 98: &lt;/span&gt;                 (insertL* new old (cdr lat)))))))
&lt;span class=&quot;linenr&quot;&gt; 99: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;100: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;lat中a出现的次数，如果lat的元素时list则递归&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;101: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;occur*&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;102: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (a lat)
&lt;span class=&quot;linenr&quot;&gt;103: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;104: &lt;/span&gt;     ((null? lat) 0)
&lt;span class=&quot;linenr&quot;&gt;105: &lt;/span&gt;     ((atom? (car lat)) (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (eq? a (car lat))
&lt;span class=&quot;linenr&quot;&gt;106: &lt;/span&gt;                            (add1 (occur* a (cdr lat)))
&lt;span class=&quot;linenr&quot;&gt;107: &lt;/span&gt;                            (occur* a (cdr lat))))
&lt;span class=&quot;linenr&quot;&gt;108: &lt;/span&gt;     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (+ (occur* a (car lat))
&lt;span class=&quot;linenr&quot;&gt;109: &lt;/span&gt;              (occur* a  (cdr lat)))))))
&lt;span class=&quot;linenr&quot;&gt;110: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;eqlist&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;111: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (l1 l2)
&lt;span class=&quot;linenr&quot;&gt;112: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;113: &lt;/span&gt;     ((&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;and&lt;/span&gt; (null? l1)
&lt;span class=&quot;linenr&quot;&gt;114: &lt;/span&gt;           (null? l2)) #t)
&lt;span class=&quot;linenr&quot;&gt;115: &lt;/span&gt;     ((&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;or&lt;/span&gt; (null? l1)
&lt;span class=&quot;linenr&quot;&gt;116: &lt;/span&gt;          (null? l2)) #f)
&lt;span class=&quot;linenr&quot;&gt;117: &lt;/span&gt;     ((&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;and&lt;/span&gt; (atom? (car l1))
&lt;span class=&quot;linenr&quot;&gt;118: &lt;/span&gt;           (atom? (car l2)))
&lt;span class=&quot;linenr&quot;&gt;119: &lt;/span&gt;           (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (eq? (car l1)
&lt;span class=&quot;linenr&quot;&gt;120: &lt;/span&gt;                    (car l2))
&lt;span class=&quot;linenr&quot;&gt;121: &lt;/span&gt;               (eqlist (cdr l1) (cdr l2))
&lt;span class=&quot;linenr&quot;&gt;122: &lt;/span&gt;               #f))
&lt;span class=&quot;linenr&quot;&gt;123: &lt;/span&gt;     ((&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;or&lt;/span&gt; (atom? (car l1))
&lt;span class=&quot;linenr&quot;&gt;124: &lt;/span&gt;          (atom? (car l2))) #f)
&lt;span class=&quot;linenr&quot;&gt;125: &lt;/span&gt;     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;and&lt;/span&gt; (eqlist (car l1) (car l2))
&lt;span class=&quot;linenr&quot;&gt;126: &lt;/span&gt;                (eqlist (cdr l1) (cdr l2)))))))
&lt;span class=&quot;linenr&quot;&gt;127: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;集合操作&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;128: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;intersect&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;129: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (set1 set2)
&lt;span class=&quot;linenr&quot;&gt;130: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;131: &lt;/span&gt;     ((null? set1) &#39;())
&lt;span class=&quot;linenr&quot;&gt;132: &lt;/span&gt;     ((member? (car set1) set2)
&lt;span class=&quot;linenr&quot;&gt;133: &lt;/span&gt;      (cons (car set1)
&lt;span class=&quot;linenr&quot;&gt;134: &lt;/span&gt;            (intersect (cdr set1) set2)))
&lt;span class=&quot;linenr&quot;&gt;135: &lt;/span&gt;     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (intersect (cdr set1) set2)))))
&lt;span class=&quot;linenr&quot;&gt;136: &lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;137: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;union&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;138: &lt;/span&gt;  (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; (set1 set2)
&lt;span class=&quot;linenr&quot;&gt;139: &lt;/span&gt;    (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;cond&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;140: &lt;/span&gt;     ((null? set1) set2)
&lt;span class=&quot;linenr&quot;&gt;141: &lt;/span&gt;     ((member? (car set1) set2)
&lt;span class=&quot;linenr&quot;&gt;142: &lt;/span&gt;      (union (cdr set1) set2))
&lt;span class=&quot;linenr&quot;&gt;143: &lt;/span&gt;     (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt; (cons (car set1)
&lt;span class=&quot;linenr&quot;&gt;144: &lt;/span&gt;     (union (cdr set1) set2))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-13&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-13&quot;&gt;racket   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;racket&quot;&gt;racket&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-13&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-13-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-13-1&quot;&gt;struct(新的数据类型)   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;struct&quot;&gt;struct&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-13-1&quot;&gt;
&lt;p&gt;
语法形式: &lt;code&gt;(struct struct-id (field-id ...))&lt;/code&gt;
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;struct-id : 是一个constructor, 可以用来构建一个该数据类型的实例
&lt;/li&gt;
&lt;li&gt;struct-id? :一个predication,测试是否是该数据类型的实例
&lt;/li&gt;
&lt;li&gt;struct-id-field-id: 从实例中获取 &lt;code&gt;field-id&lt;/code&gt; 属性的值
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
下面来看个例子:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(struct posn (x y))                     &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;定义一个posn类型&lt;/span&gt;
(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;pos1&lt;/span&gt; (posn 1 2))                &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;struct-id: 构建一个posn实例&lt;/span&gt;
(posn? pos1)                            &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;struct-id?: 是否为一个posn对象实例&lt;/span&gt;
(posn-x pos1)                           &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;struct-id-field-id: 获得x属性&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-13-1-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-13-1-1&quot;&gt;复制更新&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-13-1-1&quot;&gt;
&lt;p&gt;
根据已有对象更新其中的特定域然后返回新对象
&lt;/p&gt;

&lt;p&gt;
语法形式: &lt;code&gt;(struct-copy struct-id struct-expr [field-id expr] ...)&lt;/code&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
Examples:
&lt;/p&gt;

&lt;p&gt;
&amp;gt; (define p1 (posn 1 2))
&amp;gt; (define p2 (struct-copy posn p1 [x 3]))
&amp;gt; (list (posn-x p2) (posn-y p2))
&lt;/p&gt;

&lt;p&gt;
&#39;(3 2)
&amp;gt; (list (posn-x p1) (posn-x p2))
&lt;/p&gt;

&lt;p&gt;
&#39;(1 3)
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-13-1-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-13-1-2&quot;&gt;subtypes(类似于继承)   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;subtypes&quot;&gt;subtypes&lt;/span&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-13-1-2&quot;&gt;
&lt;p&gt;
语法形式: &lt;code&gt;(struct struct-id super-id (field-id ...))&lt;/code&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(struct posn (x y))
(struct pos3d posn (z))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
那么pos3d就有 &lt;code&gt;(x y z)&lt;/code&gt; 三个属性
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-13-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-13-2&quot;&gt;match(模式匹配)   &lt;span class=&quot;tag&quot;&gt;&lt;span class=&quot;match&quot;&gt;match&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-13-2&quot;&gt;
&lt;p&gt;
正则表达式只能用来匹配字符串,而 &lt;code&gt;match&lt;/code&gt; 可以用来匹配任何的 &lt;code&gt;scheme value&lt;/code&gt;,
它的语法形式如下:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(match target-expr
  [pattern expr ...+] ...)
&lt;/pre&gt;
&lt;p&gt;
将 &lt;code&gt;target-expr&lt;/code&gt; 与 pattern匹配, 如果匹配成功就执行后面的expr, 对pattern的
语法要做以下说明:
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;literal: 字面值直接用 &lt;code&gt;equal?&lt;/code&gt; 测试是否相等
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(match 2
       [1 &#39;one]
       [2 &#39;two]
       [3 &#39;three])
(match #f
       [#t &#39;yes]
       [#f &#39;no])
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;(list lvp …): 会绑定对应的标识符,注意几个特殊符号,vector和list类似
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;… 或 &lt;span class=&quot;underline&quot;&gt;_&lt;/span&gt; :  代表0次或者多次
&lt;/li&gt;
&lt;li&gt;..k 或 _&lt;sub&gt;k&lt;/sub&gt; : 代表至少 &lt;code&gt;k&lt;/code&gt; 此
&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(match &#39;(1 + 2)
[(list a &#39;+ b) (+ a b)])         &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return 3&lt;/span&gt;

(match &#39;(1 2 3)
[(list 1 a ...) a])                 &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return &#39;(2 3)&lt;/span&gt;

(match &#39;(1 2 3 4)
[(list 1 a ..3) a]
[_ &#39;else])                          &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;return &#39;(2 3 4)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上例中 &lt;code&gt;a b&lt;/code&gt; 就被绑定为 1, 2
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;(struct-id pat …)或者(struct struct-id (pat …)):匹配一个实例,并且绑定
一些变量
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(define-struct tree (val left right))
(match (make-tree 0 (make-tree 1 #f #f) #f)
       [(tree a (tree b  _ _) _) (list a b)])       &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;&#39;(0 1)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;(struct struct-id _) :匹配任何 struct-id的实例
&lt;/li&gt;
&lt;li&gt;(? expr pat …): expr是一个predication, 只有它返回true的时候,才会匹配后
面的pat
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(match &#39;(1 3 5)
       [(list (? odd?) ...) &#39;yes])
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;(quasiquote qp): unqote或unquote-splicing的部分会绑定为变量,其它部分会原样匹配
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(match &#39;(1 + 2)
[`(,a + ,b) (+ a b)])
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
a b都是unquote指定的部分,所以绑定为变量, 其它部分比如 +就原样匹配
&lt;/p&gt;

&lt;p&gt;
关于quasiquote的一些说明:
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;quasiquote(`): 和quote(&#39;)类似, 只是表达式中的unquote会求值在返回,如果没
有unquote,那么它的行为就和 &lt;code&gt;quote&lt;/code&gt; 一样,来看几个例子:
&lt;code&gt;(cons a b)等价于 `(,a ,b)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;unquote(,): 指定的部分会先求职,在插入list中
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(quasiquote (1 2 (unquote (+ 1 2)) (unquote (- 5 1))))
&lt;span style=&quot;color: #75715E;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;equivalent&lt;/span&gt;
`(1 2 ,(+ 1 2) ,(+ 5 1))                &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;&#39;(1 2 3 6)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;unquote-splicing(,@): 和unquote的行为类似, 只是它所指定的表达式求值后必
须返回list,这个list中的元素会拆开然后插入原list中
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;`(1 2 ,@(list (+ 1 2) (2 2)) 5)         &lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;&#39;(1 2 3 4 5)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-13-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-13-3&quot;&gt;module&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-13-3&quot;&gt;
&lt;p&gt;
module的基本语法是:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(module name-id initial-module-path
  decl ...)
&lt;/pre&gt;
&lt;p&gt;
例子:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(module cake racket
        (provide print-cake)

        (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; (&lt;span style=&quot;color: #A6E22E;&quot;&gt;print-cake&lt;/span&gt; n)
          (show &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;   ~a   &quot;&lt;/span&gt; n #\.)
          (show &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; .-~a-. &quot;&lt;/span&gt; n #\|)
          (show &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; | ~a | &quot;&lt;/span&gt; n #\space)
          (show &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;---~a---&quot;&lt;/span&gt; n #\-))

        (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; (&lt;span style=&quot;color: #A6E22E;&quot;&gt;show&lt;/span&gt; fmt n ch)
          (printf fmt (make-string n ch))
          (newline)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;name-id: module的名字,上例是 &lt;code&gt;cake&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;initial-module-path: 初始化要导入的module, 上例是 &lt;code&gt;racket&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;provide : 可选的,也就是规定哪些东西是可以导出的,上例中 &lt;code&gt;print-cake&lt;/code&gt; 会导
出,但是 &lt;code&gt;show&lt;/code&gt; 是模块私有, 如果不提供 &lt;code&gt;provide&lt;/code&gt; 那么所有的属性都是私有的,
所以一个模块必须指定 &lt;code&gt;provide&lt;/code&gt; 才对导入者有意义
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
声明一个模块并不会直接对模块的 &lt;code&gt;body&lt;/code&gt; 部分求值,只有当使用 &lt;code&gt;require&lt;/code&gt; 明确导
入该模块时才会求值
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-13-3-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-13-3-1&quot;&gt;submodule&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-13-3-1&quot;&gt;
&lt;p&gt;
一个文件只能包含一个顶层模块,这个模块可以通过 &lt;code&gt;module&lt;/code&gt; 指定,也可以通
过 &lt;code&gt;lang lang-name&lt;/code&gt; 来间接的指定, 那么在这个顶层模块中又可以定义子模块,比
如如下代码:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;#lang racket
(module zoo racket
        (provide tiger)
        (&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;tiger&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Tony&quot;&lt;/span&gt;))

(require &#39;zoo)

tiger
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面的代码(假设文件名是park.rtk) &lt;code&gt;#lang racket&lt;/code&gt; 指定了顶层模块, 而 &lt;code&gt;zoo&lt;/code&gt; 是
一个子模块, 在顶层模块中可以直接通过 &lt;code&gt;(require &#39;zoo)&lt;/code&gt; 来包含子模块, 如果是
在该文件以外, 你需要导入该文件的模块, 使用 &lt;code&gt;(require &quot;park.rtk&quot;)&lt;/code&gt; 只会导入
顶层模块, 使用submode语法比如 &lt;code&gt;(require (submod &quot;park.rtk&quot; zoo))&lt;/code&gt; 就可以导
入子模块了
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-13-3-1-1&quot; class=&quot;outline-6&quot;&gt;
&lt;h6 id=&quot;sec-1-13-3-1-1&quot;&gt;module*                                                                   :module*:&lt;/h6&gt;
&lt;div class=&quot;outline-text-6&quot; id=&quot;text-1-13-3-1-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
(module* name-id initial-module-path-or-#f
decl ...)
&lt;/pre&gt;
&lt;p&gt;
使用 &lt;code&gt;module&lt;/code&gt; 声明的子模块可以可以被父模块导入, 但是子模块不能导入父模块,
而恰恰相反,使用 &lt;code&gt;module*&lt;/code&gt; 声明的模块可以导入父模块, 可是父模块不能导入该子
模块, 如果指定 &lt;code&gt;#f&lt;/code&gt; 作为默认导入模块, 那么父模块中的所有绑定在子模块中都可
见.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;#lang racket

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; (&lt;span style=&quot;color: #A6E22E;&quot;&gt;print-cake&lt;/span&gt; n)
  (show &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;   ~a   &quot;&lt;/span&gt; n #\.)
  (show &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; .-~a-. &quot;&lt;/span&gt; n #\|)
  (show &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; | ~a | &quot;&lt;/span&gt; n #\space)
  (show &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;---~a---&quot;&lt;/span&gt; n #\-))

(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;define&lt;/span&gt; (&lt;span style=&quot;color: #A6E22E;&quot;&gt;show&lt;/span&gt; fmt n ch)
  (printf fmt (make-string n ch))
  (newline))

(module* main #f
         (print-cake 10))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
在上面的 &lt;code&gt;main&lt;/code&gt; 这个submodule中, 顶层模块的所有绑定都可见, 注意当一个
submodule的名字为main时,有一个特殊的地方,也就是说当前的文件作为执行文件时
(racket file-name.rtk),即便你没有使用 &lt;code&gt;(require &#39;main)&lt;/code&gt; 语句, 这个子模块仍
然会运行,和python的=ifmain= 很类似,所以这个main模块可以写一些本模块的测试
代码
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-13-3-1-2&quot; class=&quot;outline-6&quot;&gt;
&lt;h6 id=&quot;sec-1-13-3-1-2&quot;&gt;module+                                                                   :module+:&lt;/h6&gt;
&lt;div class=&quot;outline-text-6&quot; id=&quot;text-1-13-3-1-2&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
(module+ name-id
decl ...)
&lt;/pre&gt;
&lt;p&gt;
等价于
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(module* name-id #f
  decl ...)
&lt;/pre&gt;
&lt;p&gt;
module+一般用来写 &lt;code&gt;test&lt;/code&gt; 模块, 多个test模块会合并为一个test模块, 使用raco
test filename.rkt来运行测试代码
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-13-3-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-13-3-2&quot;&gt;lang&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-13-3-2&quot;&gt;
&lt;p&gt;
racket的源文件一般需要使用 &lt;code&gt;#lang lang-name&lt;/code&gt; 这样的方式来指定语言,这个实际是一
个module的简写方式,比如 &lt;code&gt;#lang racket&lt;/code&gt; 等价于:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
(module name racket
  decl ...)
&lt;/pre&gt;
&lt;p&gt;
所以 &lt;code&gt;#lang racket&lt;/code&gt; 的意思就是定义一个module, 该模块的名字一般继承自文件名,
然后将racket作为初始模块导入.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-13-3-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-13-3-3&quot;&gt;require&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-13-3-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;如果是文件那么应该使用这样的语法:
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-scheme&quot;&gt;(require &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;aa.rkt&quot;&lt;/span&gt;)
(require &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;../aa.rkt&quot;&lt;/span&gt;)
(require &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;../subdirectory/aa.rkt&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
以当前文件的路径为当前路径,使用和shell类似的路径表达方式来确定需要导入的模
块的名字,记住要带扩展名
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;当前文件的子模块: &lt;code&gt;(require &#39;name)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;标准模块: &lt;code&gt;(require racket)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;子模块: &lt;code&gt;(require (submod &quot;aa.rkt&quot; submod-name))&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-13-3-4&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-13-3-4&quot;&gt;provide&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-13-3-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;导出所有: &lt;code&gt;(provide (all-defined-out))&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;只导出通过require引入的绑定: &lt;code&gt;(provide (all-from-out))&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;导出除指定的外所有的绑定: &lt;code&gt;(provide (except-out name ...))&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;重命名: &lt;code&gt;(provide (rename-out [orgn-id export-id]))&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;p class=&quot;footpara&quot;&gt;
&lt;a href=&quot;http://community.schemewiki.org/?call-with-current-continuation&quot;&gt;http://community.schemewiki.org/?call-with-current-continuation&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt; </content>
  </entry>
  
  <entry>
    <id>web-py-source-code.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/web-py-source-code.html"/>
    <title>webpy源代码分析</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;webpy源代码分析&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;缘起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;一 源码分析要有所取舍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;一次web请求的从生到死&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-3-1&quot;&gt;准备&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-3-1-1&quot;&gt;程序的初始化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-1-2&quot;&gt;wsgi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-2&quot;&gt;接受web请求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-3&quot;&gt;处理web请求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3-4&quot;&gt;返回response&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;缘起&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
最近一直学习web开发方面的东西，个人是python的死忠，所以自然的也就开始玩python的web开发框架，可是对于我这种爱
钻牛角尖的人来说，仅仅使用是不够的，我必须要搞清楚它是怎么运行的，因此也就有了分析python web框架源码的念头，
我熟悉的web框架基本就是web.py与django了，后者太庞大，不太适合，而且某种程度上有点臃肿，而web.py短小精悍，没
有多余的东西，所以很显然源码分析也就选定它了
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;一 源码分析要有所取舍&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
web开发目前已经变得很专业，专业的同义词其实就是很复杂，web相关的东西一个月也说不完，因此源码分析的时候我们必
须有所取舍，要抓住实质性的东西，因为只有这些东西才能帮你更好的理解web开发，理解python web框架，实际上web开发
的实质就是：
&lt;/p&gt;
&lt;p&gt;
&lt;img src=&quot;static/img/web-request-response.png&quot; alt=&quot;web-request-response.png&quot; /&gt;
实际就是一个接收request，返回response的过程，只是因为应用的需要以及开发的便捷，所以才加入了像db，template，
session等等一些特性，但是就实质而言这些东西都不是必须。所以我在分析的时候先不会理会这些东西，等到搞清楚了实
质之后再来视情况而定的选择部分内容进行分析
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;一次web请求的从生到死&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
先上源码：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; web

&lt;span style=&quot;color: #FD971F;&quot;&gt;urls&lt;/span&gt; = (
    &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;/(.*)&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;hello&#39;&lt;/span&gt;
)
&lt;span style=&quot;color: #FD971F;&quot;&gt;app&lt;/span&gt; = web.application(urls, &lt;span style=&quot;color: #A6E22E;&quot;&gt;globals&lt;/span&gt;())

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;hello&lt;/span&gt;:
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;GET&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, name):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;not&lt;/span&gt; name:
            &lt;span style=&quot;color: #FD971F;&quot;&gt;name&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;World&#39;&lt;/span&gt;
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Hello, &#39;&lt;/span&gt; + name + &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;!&#39;&lt;/span&gt;

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__name__&lt;/span&gt; == &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:
    app.run()
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
有没有很眼熟？没错就是官网上的例子，这个例子很简单可是麻雀虽小，五脏俱全,它已经将web开发的实质体现出来，并且
没有牵扯到db，template等等干扰我们视线的东西，这就是绝佳的实例。因此我们就以上述代码为例来分析一次web请求从
生到死的全过程，来详尽的分析与这一过程相关的代码
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;准备&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-3-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-1-1&quot;&gt;程序的初始化&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-1-1&quot;&gt;
&lt;p&gt;
回到上面的代码，我们来看看代码的初始化，最核心的也就是app，由
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;app&lt;/span&gt; = web.application(urls, &lt;span style=&quot;color: #A6E22E;&quot;&gt;globals&lt;/span&gt;())
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
可知app是一个application类实例，我们来看一下application类实例的初始化代码
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__init__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, mapping=(), fvars={}, autoreload=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;):
    ...
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.init_mapping(mapping)
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.fvars = fvars
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.processors = []

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.add_processor(loadhook(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;._load))
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.add_processor(unloadhook(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;._unload))
    ...
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
关键是其中的init_mapping, 我们可以看看它的代码
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;init_mapping&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, mapping):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.mapping = &lt;span style=&quot;color: #A6E22E;&quot;&gt;list&lt;/span&gt;(utils.group(mapping, 2))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
list(utils.group(mapping, 2))的作用就是将mapping切割为2个元素一组的list，比如:(1, 2, 3,4)==&amp;gt;[[1,2],[3,4]],
我们可以看到通过init_mapping之后，self.mapping就将urls元组切割为2个元素一组组成的list了，这就为以后匹配url
提供了方便
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-3-1-2&quot;&gt;wsgi&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-1-2&quot;&gt;
&lt;p&gt;
wsgi是一种规范，它对框架的要求就是：必须定义一个接受两个参数的可调用对象，可调用对象可以是函数，类方法，类
以及一个包含__call__的类实例，这两个参数分别为environ，start_response, 前者是一个字典，该字典会包含许多有
关该HTTP请求所谓信息比如REQUEST_METHOD, PATH_INFO等等，后者一般是一个函数。最后这个可调用对象必须返回
一个迭代对象,详细内容可以看我写的这份&lt;a href=&quot;wsgi.html&quot;&gt;文档&lt;/a&gt;。 下面来看看web.py中wsgi相关的代码.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;run&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, *middleware):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; wsgi.runwsgi(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.wsgifunc(*middleware))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这段代码我们先不要理会runwsgi,因为我们只关注framework这一端,所以关键就在self.wsgifunc这个函数了,我们来看看
它的代码:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;wsgifunc&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, *middleware):
    ....
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;wsgi&lt;/span&gt;(env, start_resp):
        &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;clear threadlocal to avoid inteference of previous requests&lt;/span&gt;
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;._cleanup()

        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.load(env)
        ....

        &lt;span style=&quot;color: #FD971F;&quot;&gt;result&lt;/span&gt; = &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.handle_with_processors()
        ....
        &lt;span style=&quot;color: #FD971F;&quot;&gt;result&lt;/span&gt; = web.safestr(&lt;span style=&quot;color: #A6E22E;&quot;&gt;iter&lt;/span&gt;(result))

        &lt;span style=&quot;color: #FD971F;&quot;&gt;status&lt;/span&gt;, &lt;span style=&quot;color: #FD971F;&quot;&gt;headers&lt;/span&gt; = web.ctx.status, web.ctx.headers
        start_resp(status, headers)

        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;cleanup&lt;/span&gt;():
            &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;._cleanup()
            &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;yield&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;force this function to be a generator&lt;/span&gt;

        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; itertools.chain(result, cleanup())

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;for&lt;/span&gt; m &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;in&lt;/span&gt; middleware:
        &lt;span style=&quot;color: #FD971F;&quot;&gt;wsgi&lt;/span&gt; = m(wsgi)

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; wsgi
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
首先声明代码进行了简化,去掉了一些错误处理以及try catch异常捕捉.现在来看看这段代码,wsgi是一个内部函数,它接
受两个参数,看这就是wsgi规定的那个可调用对象了.这个函数对每一个HTTP请求都会调用一次,它接受http request, 返
回http response,所以一个web请求的过程,实际就浓缩在了这个函数中了. 所以这个函数就是重点分析对象
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;_cleanup : 这个函数主要是清理上一次线程局部存储
&lt;/li&gt;
&lt;li&gt;load : 这个函数的代码大体如下:
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;load&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, env):
    &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;&quot;&quot;Initializes ctx using env.&quot;&quot;&quot;&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;ctx&lt;/span&gt; = web.ctx
    ctx.clear()
    &lt;span style=&quot;color: #FD971F;&quot;&gt;ctx.status&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;200 OK&#39;&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;ctx.headers&lt;/span&gt; = []
    &lt;span style=&quot;color: #FD971F;&quot;&gt;ctx.output&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;&#39;&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;ctx.environ&lt;/span&gt; = &lt;span style=&quot;color: #FD971F;&quot;&gt;ctx.env&lt;/span&gt; = env
    &lt;span style=&quot;color: #FD971F;&quot;&gt;ctx.host&lt;/span&gt; = env.get(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;HTTP_HOST&#39;&lt;/span&gt;)
    ...
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
web.ctx可以看作是一个字典对象(threadeddict),只是这个对象不仅可以通过key访问比如obj[&#39;key1&#39;],也可以通过属
性来访问,比如obj.key1,同时因为它是threading.local的子类,所以它虽然是个全局对象,但是它是线程安全的.详细的
代码可以看web/utils.py中ThreadedDict的代码,所以这部分略过,只要知道它是一个类字典结构就好,从load的代码可
以看出,它实际是将env中的http相关的信息存入web.ctx这个全局的对象中
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;handle_with_processors: 这个是主要的处理代码
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot;&gt;接受web请求&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-3&quot;&gt;处理web请求&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-3-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-4&quot;&gt;返回response&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>wsgi.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/wsgi.html"/>
    <title>wsgi</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;wsgi&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;wsgi (Python Web Server Gateway Interface)&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;The Application/Framework Side(web应用端)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;The Server/Gateway Side (web server端)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;wsgi (Python Web Server Gateway Interface)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
简单的说wsgi是定义了一种规范，它可以使任何符合该规范的web应用(比如网站)都可以运行在任何符合该规范的web
server上，就像插座与插头，要想插头插入插孔中，你就必须让插头的尺寸与插座中插孔的尺寸匹配，也就是既要规定插头
的尺寸，也要规定插孔的尺寸，同理为了实现使任何符合wsgi规范的web应用(比如网站)都可以运行在任何符合wsgi规范的
web server上的目的，wsgi也就必须既规范web应用同时也要规范web server，该规范在&lt;a href=&quot;http://www.python.org/dev/peps/pep-3333/&quot;&gt;EPE 3333&lt;/a&gt; 中说明
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;The Application/Framework Side(web应用端)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
这一端必须定义一个接受两个参数的可调用对象，可调用对象可以是函数，类方法，类以及一个包含__call__的类实例，
下面是pep3333的示例代码：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;HELLO_WORLD&lt;/span&gt; = b&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Hello world!\n&quot;&lt;/span&gt;

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;simple_app&lt;/span&gt;(environ, start_response):
    &lt;span style=&quot;color: #FD971F;&quot;&gt;status&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;200 OK&#39;&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;response_headers&lt;/span&gt; = [(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Content-type&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;text/plain&#39;&lt;/span&gt;)]
    start_response(status, response_headers)
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; [HELLO_WORLD]

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;AppClass&lt;/span&gt;:
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__init__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;, environ, start_response):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.environ = environ
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.start = start_response

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;__iter__&lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;):
        &lt;span style=&quot;color: #FD971F;&quot;&gt;status&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;200 OK&#39;&lt;/span&gt;
        &lt;span style=&quot;color: #FD971F;&quot;&gt;response_headers&lt;/span&gt; = [(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Content-type&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;text/plain&#39;&lt;/span&gt;)]
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;self&lt;/span&gt;.start(status, response_headers)
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;yield&lt;/span&gt; HELLO_WORLD
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面是两个代码示例，一个是使用函数，一个是使用类，对于类这里做一些说明，首先调用AppClass(environ,
start_response)就会返回一个AppClass实例，然后服务端会对返回的实例调用for data in instsnce_of_AppClass,这样
就会触发__iter__方法，也就是返回HELLO_WORLD。注意在可调用对象中调用start_response时应该传递http头中状态行
以及http头部，在该实例中分别是&#39;200 OK&#39;, [(&#39;Content-Type&#39;: &#39;text/plain&#39;)], 而且应该返回一个可迭代对象(比如
list或者有__iter__方法的类实例), 而且这个可迭代对象的每一项都是HTTP报文body的内容
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;The Server/Gateway Side (web server端)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
在server指定的代码会在每一次http请求时调用。它主要是environ以及一个名为start_response的函数传递给在web应用
端定义的可调用对象，然后获得返回值
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;import&lt;/span&gt; os, sys

&lt;span style=&quot;color: #FD971F;&quot;&gt;enc&lt;/span&gt;, &lt;span style=&quot;color: #FD971F;&quot;&gt;esc&lt;/span&gt; = sys.getfilesystemencoding(), &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;surrogateescape&#39;&lt;/span&gt;

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;unicode_to_wsgi&lt;/span&gt;(u):
    &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Convert an environment variable to a WSGI &quot;bytes-as-unicode&quot; string&lt;/span&gt;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; u.encode(enc, esc).decode(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;iso-8859-1&#39;&lt;/span&gt;)

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;wsgi_to_bytes&lt;/span&gt;(s):
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; s.encode(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;iso-8859-1&#39;&lt;/span&gt;)

&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;run_with_cgi&lt;/span&gt;(application):
    &lt;span style=&quot;color: #FD971F;&quot;&gt;environ&lt;/span&gt; = {k: unicode_to_wsgi(v) &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;for&lt;/span&gt; k,v &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;in&lt;/span&gt; os.environ.items()}
    &lt;span style=&quot;color: #FD971F;&quot;&gt;environ&lt;/span&gt;[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;wsgi.input&#39;&lt;/span&gt;]        = sys.stdin.&lt;span style=&quot;color: #A6E22E;&quot;&gt;buffer&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;environ&lt;/span&gt;[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;wsgi.errors&#39;&lt;/span&gt;]       = sys.stderr
    &lt;span style=&quot;color: #FD971F;&quot;&gt;environ&lt;/span&gt;[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;wsgi.version&#39;&lt;/span&gt;]      = (1, 0)
    &lt;span style=&quot;color: #FD971F;&quot;&gt;environ&lt;/span&gt;[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;wsgi.multithread&#39;&lt;/span&gt;]  = &lt;span style=&quot;color: #AE81FF;&quot;&gt;False&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;environ&lt;/span&gt;[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;wsgi.multiprocess&#39;&lt;/span&gt;] = &lt;span style=&quot;color: #AE81FF;&quot;&gt;True&lt;/span&gt;
    &lt;span style=&quot;color: #FD971F;&quot;&gt;environ&lt;/span&gt;[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;wsgi.run_once&#39;&lt;/span&gt;]     = &lt;span style=&quot;color: #AE81FF;&quot;&gt;True&lt;/span&gt;

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; environ.get(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;HTTPS&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;off&#39;&lt;/span&gt;) &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;in&lt;/span&gt; (&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;on&#39;&lt;/span&gt;, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;1&#39;&lt;/span&gt;):
        &lt;span style=&quot;color: #FD971F;&quot;&gt;environ&lt;/span&gt;[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;wsgi.url_scheme&#39;&lt;/span&gt;] = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;https&#39;&lt;/span&gt;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt;:
        &lt;span style=&quot;color: #FD971F;&quot;&gt;environ&lt;/span&gt;[&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;wsgi.url_scheme&#39;&lt;/span&gt;] = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;http&#39;&lt;/span&gt;

    &lt;span style=&quot;color: #FD971F;&quot;&gt;headers_set&lt;/span&gt; = []
    &lt;span style=&quot;color: #FD971F;&quot;&gt;headers_sent&lt;/span&gt; = []

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;write&lt;/span&gt;(data):
        &lt;span style=&quot;color: #FD971F;&quot;&gt;out&lt;/span&gt; = sys.stdout.&lt;span style=&quot;color: #A6E22E;&quot;&gt;buffer&lt;/span&gt;

        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;not&lt;/span&gt; headers_set:
            &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;raise&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;AssertionError&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;write() before start_response()&quot;&lt;/span&gt;)

        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;elif&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;not&lt;/span&gt; headers_sent:
            &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Before the first output, send the stored headers&lt;/span&gt;
            &lt;span style=&quot;color: #FD971F;&quot;&gt;status&lt;/span&gt;, &lt;span style=&quot;color: #FD971F;&quot;&gt;response_headers&lt;/span&gt; = &lt;span style=&quot;color: #FD971F;&quot;&gt;headers_sent&lt;/span&gt;[:] = headers_set
            out.write(wsgi_to_bytes(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;Status: %s\r\n&#39;&lt;/span&gt; % status))
            &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;for&lt;/span&gt; header &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;in&lt;/span&gt; response_headers:
                out.write(wsgi_to_bytes(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;%s: %s\r\n&#39;&lt;/span&gt; % header))
                out.write(wsgi_to_bytes(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;\r\n&#39;&lt;/span&gt;))

        out.write(data)
        out.flush()

    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;start_response&lt;/span&gt;(status, response_headers, exc_info=&lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;):
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; exc_info:
            &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;try&lt;/span&gt;:
                &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; headers_sent:
                    &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Re-raise original exception if headers sent&lt;/span&gt;
                    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;raise&lt;/span&gt; exc_info[1].with_traceback(exc_info[2])
                &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;finally&lt;/span&gt;:
                    &lt;span style=&quot;color: #FD971F;&quot;&gt;exc_info&lt;/span&gt; = &lt;span style=&quot;color: #AE81FF;&quot;&gt;None&lt;/span&gt;     &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;avoid dangling circular ref&lt;/span&gt;
                &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;elif&lt;/span&gt; headers_set:
                    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;raise&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;AssertionError&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Headers already set!&quot;&lt;/span&gt;)

        &lt;span style=&quot;color: #FD971F;&quot;&gt;headers_set&lt;/span&gt;[:] = [status, response_headers]

        &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Note: error checking on the headers should happen here,&lt;/span&gt;
        &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;*after* the headers are set.  That way, if an error&lt;/span&gt;
        &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;occurs, start_response can only be re-called with&lt;/span&gt;
        &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;exc_info set.&lt;/span&gt;

        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;return&lt;/span&gt; write

    &lt;span style=&quot;color: #FD971F;&quot;&gt;result&lt;/span&gt; = application(environ, start_response)
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;try&lt;/span&gt;:
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;for&lt;/span&gt; data &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;in&lt;/span&gt; result:
            &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; data:    &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;don&#39;t send headers until body appears&lt;/span&gt;
                write(data)
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;not&lt;/span&gt; headers_sent:
            write(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;&#39;&lt;/span&gt;)   &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;send headers now if body was empty&lt;/span&gt;
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;finally&lt;/span&gt;:
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;hasattr&lt;/span&gt;(result, &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;close&#39;&lt;/span&gt;):
            result.close()
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面的代码很清楚，result = application(environ, start_response)就是调用web应用端指定的可调用对象,获得返回
值赋给result,接着调用 for data in result 遍历result,如果data不为空那么就调用write写入socket,注意write函数
会检查是否已经将http报文的头部写入了socket,如果没有那么就先写入报文头,然后写入data,记住HTTP报文头是由web应
用端调用start_response通过参数传递给server端的,而Http报文 Body的部分是包含在可调用对象返回值中的也就是
result中的
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;start_response: 必须接受HTTP报文的status行以及header列表作为参数,还有一个exec_info是可选参数,必须返回一
个可调用对象(本例就是write函数),这个对象接受一个byte string,并且将该byte string发送给客户端(比如浏览器),
这样在web应用端就可以可选的将内容写入客户度,本例的web应用端没有使用该功能
&lt;/li&gt;
&lt;li&gt;environ
这只能是一个python字典,不能是字典的子类,这个字典包含了一个HTTP请求的所有基本信息,这是pep3333的详细&lt;a href=&quot;http://www.python.org/dev/peps/pep-3333/#environ-variables&quot;&gt;解释&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>org-mode-dropbox-blog.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/org-mode-dropbox-blog.html"/>
    <title>使用org-mode与dropbox搭建静态博客</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;使用org-mode与dropbox搭建静态博客&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;org-mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;dropbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-3&quot;&gt;搭建静态博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;org-mode&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
org-mode是emacs的一个主模式,所以如果你不用emacs那么一切都无从谈起,vim有一个org-mode的移植版本
根据官方的的说法:Org mode is for keeping notes, maintaining TODO lists, planning projects, and authoring
documents with a fast and effective plain-text system.可以看出org-mode可以记笔记,管理TODO list等等,它最大
的特点是可以把你的文档折叠起来,而且有一个强大的导出系统,他可以将你的文档导出为html,pdf,postscript等等,而且
org-mode还有一个叫Babel的神器,它可以让你在文档中直接运行代码,支持的语言非常之多,我常用的C,python,lisp,dot等等
都支持,org-mode是一个宝库,只要你肯花时间总能发现惊喜.分享个高手的视频(需翻墙):
&lt;/p&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Ho6nMWGtepY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;dropbox&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
DropBox 是一款非常优秀的免费网络文件同步工具(云存储服务)。当你在不同的电脑、平板、手机上都安装了 Dropbox 之后，
无论在其中任何一个设备上新增、修改或删除文件，Dropbox 将会通过网络全自动地将这个更改应用到你全部的设备上去，让
你所有的设备上的文件都能保持完全一致，并且可以随时随地使用你的文件！与国内的类似产品相比有以下优点：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;全平台支持: dropbox支持windows，mac，linux，ios，android等，特别是它支持linux，这对于linux党简直就是福音,
这也是我使用dropbox的重要原因
&lt;/li&gt;
&lt;li&gt;稳定: 现在dropbox已经很稳定了，基本没有宕机的担忧了(记得金山快盘曾经因为技术问题使很多用户的文件被删掉了)，
而且它已经成为硅谷中比较成功的初创公司了,短期内不用担心它会倒闭了(YUNIO,坚果中枪了),而且dropbox是公司主力产
品,也不用担心它会无缘无故关闭(google reader的关闭让我很抓狂).
&lt;/li&gt;
&lt;li&gt;第三方工具众多,这相对于国内的类似产品是一个巨大的优势,dropbox有很多妙用基本都是利用第三方工具实现的,本文利用
dropbox搭建静态博客就是利用的pancake.io这个第三方应用.
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
那么dropbox的劣势主要是
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;可能被墙:facebook被墙我能理解,但dropbox被墙我是真的不理解,可是是事实是dropbox确实被墙过.
&lt;/li&gt;
&lt;li&gt;速度相对慢一些,这一点对我而言问题不大,因为同步本来就是后台应用,慢一点也无所谓.
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
打个广告,点这个链接&lt;a href=&quot;http://db.tt/PtdhKnAr&quot;&gt;http://db.tt/PtdhKnAr&lt;/a&gt; 注册dropbox后,你与我都可以获得500MB的空间奖励,双赢,何乐而不为呢,:)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;搭建静态博客&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
     目前搭建静态博客有很多种方法,很流行的一种就是利用github pages,我之所以不用这种方法是因为,这种方法不能和org-mode无缝
衔接,而且一旦文档修改就必须使用git将文档push到github上,比较麻烦,不像dropbox一旦改动自动同步.而且我觉得版本管理对编写
博客意义不大.
&lt;/p&gt;

&lt;p&gt;
上文提到org-mode可以导出为html,这是搭建博客的基础,先配置org-mode:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;&lt;span class=&quot;linenr&quot;&gt; 1: &lt;/span&gt;(&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;require&lt;/span&gt; &#39;&lt;span style=&quot;color: #AE81FF;&quot;&gt;org-publish&lt;/span&gt;)
&lt;span class=&quot;linenr&quot;&gt; 2: &lt;/span&gt;(setq org-publish-project-alist
&lt;span class=&quot;linenr&quot;&gt; 3: &lt;/span&gt;      &#39;(
&lt;span class=&quot;linenr&quot;&gt; 4: &lt;/span&gt;        (&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;blog-notes&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 5: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:base-directory&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;~/Documents/note/&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 6: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:base-extension&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;org&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 7: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:publishing-directory&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;~/Documents/blog/&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt; 8: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:recursive&lt;/span&gt; t
&lt;span class=&quot;linenr&quot;&gt; 9: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;         &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;:publishing-function org-publish-org-to-html ;;org 7.X&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;10: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:publishing-function&lt;/span&gt; org-html-publish-to-html
&lt;span class=&quot;linenr&quot;&gt;11: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;         &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;:link-home &quot;index.html&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;12: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;         &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;:link-up &quot;sitemap.html&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;13: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:html-link-home&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;index.html&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;14: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:html-link-up&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;sitemap.html&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;15: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:headline-levels&lt;/span&gt; 5
&lt;span class=&quot;linenr&quot;&gt;16: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:section-numbers&lt;/span&gt; nil
&lt;span class=&quot;linenr&quot;&gt;17: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:auto-preamble&lt;/span&gt; t
&lt;span class=&quot;linenr&quot;&gt;18: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:auto-sitemap&lt;/span&gt; t                &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;Generate sitemap.org automagically...&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;19: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:sitemap-filename&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;sitemap.org&quot;&lt;/span&gt;  &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;... call it sitemap.org (it&#39;s the default)...&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;20: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:sitemap-title&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;Sitemap&quot;&lt;/span&gt;         &lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;... with title &#39;Sitemap&#39;.&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;21: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:author&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;your name&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;22: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:email&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;your email&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;23: &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;;         &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;:style    &quot;&amp;lt;link rel=\&quot;stylesheet\&quot; type=\&quot;text/css\&quot; href=\&quot;css/main.css\&quot;/&amp;gt;&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;24: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:html-head&lt;/span&gt;  &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;&amp;lt;link rel=\&quot;stylesheet\&quot; type=\&quot;text/css\&quot; href=\&quot;css/main.css\&quot;/&amp;gt;&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;25: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:html-preamble&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;可以添加博客的头部&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;26: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:html-postamble&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; 评论系统代码(disqus,多说等等)&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;27: &lt;/span&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;    &amp;lt;p class=\&quot;author\&quot;&amp;gt;Author: %a (%e)&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Last Updated %d . Created by %c &amp;lt;/p&amp;gt;&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;28: &lt;/span&gt;         )
&lt;span class=&quot;linenr&quot;&gt;29: &lt;/span&gt;        (&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;blog-static&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;30: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:base-directory&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;~/Documents/note/&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;31: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:base-extension&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;css&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;js&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;pdf&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;png&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;jpg&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;gif&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;mp3&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;ogg&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;\\&lt;/span&gt;&lt;span style=&quot;color: #E6DB74; font-weight: bold;&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;swf&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;32: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:publishing-directory&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;~/Documents/blog/&quot;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;33: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:recursive&lt;/span&gt; t
&lt;span class=&quot;linenr&quot;&gt;34: &lt;/span&gt;         &lt;span style=&quot;color: #A6E22E;&quot;&gt;:publishing-function&lt;/span&gt; org-publish-attachment
&lt;span class=&quot;linenr&quot;&gt;35: &lt;/span&gt;         )
&lt;span class=&quot;linenr&quot;&gt;36: &lt;/span&gt;        (&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;blog&quot;&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;:components&lt;/span&gt; (&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;blog-notes&quot;&lt;/span&gt; &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;blog-static&quot;&lt;/span&gt;))
&lt;span class=&quot;linenr&quot;&gt;37: &lt;/span&gt;        &lt;span style=&quot;color: #75715E;&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;linenr&quot;&gt;38: &lt;/span&gt;        ))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
主要的属性有以下几个:
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;base-directory: 存放org-mode源文档的目录
&lt;/li&gt;
&lt;li&gt;publishing-directory: 导出的html存放的目录
&lt;/li&gt;
&lt;li&gt;html-preamble: 内容会添加到导出html的content的开头,我在preamble添加了博客的导航以及标题,如果你想简单点
那么这里可以去掉
&lt;/li&gt;
&lt;li&gt;html-postamble: 内容会添加到导出html的content的开头与结尾, 我在在postamble添加了disqus的评论代码
&lt;/li&gt;
&lt;li&gt;html-head: 要添加到导出的html的head标签内的代码,我添加了个css样式表(css/main.css)
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
需要注意,上面的配置是org版本是8.0,如果你用7.X版本,那么就是使用对应的注释代码,如将第十行的
org-html-publish-to-html换成org-publish-org-to-html.最后还需要一个css,这是我的&lt;a href=&quot;static/css/main.css&quot;&gt;css&lt;/a&gt; ,这个css还有点问题,
目前还在完善中.通过以上设置后,你在emacs中按M-x org-publish-project 然后输入blog就可以将base-directory
中的org文件导出到publishing-directory,静态文件也会相应的导出,这是我publishing-diretory的目录结构:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;static/img/publish-dir-tree.png&quot; alt=&quot;publish-dir-tree.png&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
到这一步本地的配置基本就完成了,接着要用到pancake.io,先去
&lt;a href=&quot;http://pancake.io/&quot;&gt;官网&lt;/a&gt; 直接用dropbox账号登陆,它会请求dropbox的权限,同意后就会在dropbox的Apps目录创建一个Pancake.io的目录,然后
将你刚刚导出的那些html文件(包括静态文件)都扔到Pancake.io目录中(我建议直接将publishing-directory设为your-dir/Dropbox/Apps/Pancake.io ),
如果你添加了博客的标题与导航,那么你可能还需要在publishing-directory中创建about.html, guestbook.html,search.html,
如何创建可以参见本博客的代码自行修改,注意本博客的搜索使用的是google的自定义搜索,所以你需要自己去创建并获得Id,替换
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;customSearchControl&lt;/span&gt; = &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;google.search.CustomSearchControl&lt;/span&gt;(&lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;005863396545237100197:nhuiw5cz1q4&#39;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
中的ID.这样一个静态博客就大功告成了,以后你只要在你的base-directory编辑,增加org文档,然后调用org-publish-project,
那么博客就会自动更新,当然也建议更新index.org,就这么简单…
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>information-theory.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/information-theory.html"/>
    <title>信息论</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;信息论&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;信息量的概率解释&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;信息量的概率解释&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
   转自&lt;a href=&quot;https://groups.google.com/forum/#!msg/pongba/KKw54CIr7PI/4JlCijxwgKQJ&quot;&gt;TopLanguage&lt;/a&gt;
   要理解熵为啥这样定义， 我们先假设一下我们能天才般的体会到香农同学的&quot;熵是对于不确定
性的度量&quot;，也就是说， 我希望大家先同意， 熵是和统计有关
的。 有了这个想法，我才好用统计的方法来推导熵。 要是你觉得信息熵和统计没关系，我就没法做了 :) 我这里的思路，就是公理化信息熵的思路，和
Kolmogorov 公理化概率论的思路是一致的。以下不区分使用 （系统的信息量／熵）。 这个公理定义系统是我自己想的，不见得对哈。
&lt;/p&gt;

&lt;p&gt;
首先， 我们先假设有这么几条对于（自信息量，即一个事件自己带有的信息量）的公理，这个公里体系是类比于概率公理的。 我想大家都承认的。
&lt;/p&gt;

&lt;p&gt;
1。 非负性。 信息量是 &amp;gt;= 0 的东东, 是个非负的实数。 显然嘛，一条消息带有的信息，要不废话，要不告诉你点啥，不管怎么样，一件事情不可
能带给你负的信息量。 就像没啥东东概率是负的一样。 这个公理大家都同意吧， 同意我就往下说了 :)
&lt;/p&gt;

&lt;p&gt;
2。 信息量这个东东， 和概率是联系在一起的。 假如一个人天天告诉你你早就确定的东东， 那么这个人给你的信息量为0。 概率上说就是，假如一个随
机事件发生的概率是1， 那么这个事件系统作为一个信号源， 带有的信息量＝0。  我们把这个叫规范性。 假如你非要认为概率为1的事件也能给你信息
量，你可以天天看太阳东升西落也能学知识 :)
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;可列可加性。 独立分布事件带有的信息量可以加起来。 消息 X 和 消息 Y 如果独立的， 那么 XY 的联合信息量＝ 消息X信息量
&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
＋ 消息Y 信息量。  我想这个没人反对的 对吧。
&lt;/p&gt;

&lt;p&gt;
有了这个，我们看， 怎么定义信息量和信息熵。 我们已经说了，假设我们天才的知道信息量就是概率的函数。 我们假设这个函数叫 f(p),
我们研究研究这个函数的性质：
&lt;/p&gt;

&lt;p&gt;
我们通过1 知道 f(p) &amp;gt;= 0 for all 0=&amp;lt;p&amp;lt;=1
通过2 我们知道  f(p) =0 if p =1
通过3 我们知道， f(p * q) = f(p) + f(q) 这个是因为独立同分布事件的概率是两个概率相乘。
&lt;/p&gt;

&lt;p&gt;
我们研究这个好玩的东东， 其实就是解一个函数方程了。 大家都知道 f(x+y) = f(x) + f(y) 这个函数方程的解是 f(1) *
x [假设f 是连续函数]
为了转化为上面那个形式，我们把概率取对数,  写成  t = log p 就有
&lt;/p&gt;

&lt;p&gt;
f(t) &amp;gt;= 0, for    t&amp;lt;=0
f(t) = 0 if t = 0
f(t1 + t2) = f(t1)  + f(t2)
&lt;/p&gt;

&lt;p&gt;
从最后一个我们知道 f = f(1) * t  = f(1) * log p. 我们看符号就知道， f(1) &amp;lt; 0. 我们不妨就取
f(1) = -1. 这个地方这个常数不重要， 取几，就相对于香农的标准定义膨胀了几倍信息量而已。 这个解满足所有的形式。
&lt;/p&gt;

&lt;p&gt;
现在，我们就有了自信息量的定义了。 概率为 p 的事件 按照我们的公理体系，一定含有 - a * log p 的信息量。 其中 a 是正实
数。
&lt;/p&gt;

&lt;p&gt;
有了这个自信息量， 熵就是很显然的了。 熵就是这个总体的信息量，就是一个系统关于信息量的平均值，或者说数学期望， 所以呢，就是
&lt;/p&gt;

&lt;p&gt;
sum p * - a log p  = - a sum p log p. 假设 a =1, 就是香农的定义鸟。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>investment.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/investment.html"/>
    <title>投资笔记</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;投资笔记&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;Investment&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;投资原则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;some advice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;财务报表基础&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-3-1&quot;&gt;资产负债表&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-3-1-1&quot;&gt;资产(流动性高的排前面)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-1-2&quot;&gt;负债(偿还期限短的排前面)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-1-3&quot;&gt;所有者权益&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-1-4&quot;&gt;一般的财务比率&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2&quot;&gt;损益表(或利润表)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-3&quot;&gt;现金流量表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;常用的会计术语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5&quot;&gt;分析公司的五个方面：&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-5-1&quot;&gt;成长性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5-2&quot;&gt;收益性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6&quot;&gt;财务伪装&lt;/a&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1-6-1&quot;&gt;六个危险信号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6-2&quot;&gt;七个缺陷&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-7&quot;&gt;财务英文词汇：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Investment&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;投资原则&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;做好功课
&lt;/li&gt;
&lt;li&gt;寻找有强大竞争力的公司
一家公司是如何使竞争者无路可走，从而保持高额的回报率
&lt;/li&gt;
&lt;li&gt;拥有安全边际(至少25%，如果公司的前景没有参考，那么应该留得更大)
&lt;/li&gt;
&lt;li&gt;长期持有
&lt;/li&gt;
&lt;li&gt;知道何时卖出
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;some advice&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;不要试图通过发现下一个微软公司而获得巨额收益。你应该关注于发现股价已低于估值的可靠的公司。所以不要预测市场上哪个小公司会成为大公司，而应该潜心的寻找那些股票价格远低于其价值的公司。
&lt;/li&gt;
&lt;li&gt;了解市场的历史能帮助你避免重复那些易犯的错误。如果人们试图使你确信“这次与以往不同”，不要理睬他们。
&lt;/li&gt;
&lt;li&gt;不要陷入“一个好产品将创造一个高质量公司”这样一个假设的陷阱里。在你被一项激动人心的技术或者一个极好的产品掏光口袋之前，确信你已经核实了该公司的商业模式。
&lt;/li&gt;
&lt;li&gt;不要害怕使用你的优势。买入的最好时机是当所有人都从一个特定种类的资产出逃的时候。牛市在悲观中诞生，在质疑中成长，在乐观中成熟，在兴奋中死亡，悲观中买进，在乐观中卖出，不要受他人意志的影响，虽然违背众人的意志很难。
&lt;/li&gt;
&lt;li&gt;试图选择市场时机是一个傻瓜游戏。有足够的证据证明市场是不能选择时机的。减少投资风险的最佳路径是认真注意估值。不要寄希望于其他投资者会以高价接收你的盘，即使你买的是好公司股票也不要这样。博傻理论害死人，不要觉得自己不会是最后一个傻瓜，人的贪婪很容易让人成为最后一个傻瓜，所以不要跟风追逐一些正面消息泛滥，势头强劲的股票，记住好公司不一定是好股票，选股必须先对公司估值，当目前的股价低于其估值，且留有一定的安全边际时才值得投资。
&lt;/li&gt;
&lt;li&gt;一个公司财务绩效的真实度量标准是现金流，而不是财务报告的每股盈利。
   &lt;b&gt;彼得林奇的成功投资&lt;/b&gt;
&lt;/li&gt;
&lt;li&gt;买普通股可以赚大钱也可以损失惨重，风险与收益并存。
&lt;/li&gt;
&lt;li&gt;投资时向公司投资，而不是向市场投资。
&lt;/li&gt;
&lt;li&gt;预测经济的变化趋势和市场与股价的短期走势没有意义
&lt;/li&gt;
&lt;li&gt;不要管短期波动，股票的长期回报是可以预测，而且比长期债劵的回报要高
&lt;/li&gt;
&lt;li&gt;股票投资选准一只股票就可以了，要善于发现那些还没有被专业投资机构发现的优质股票
&lt;/li&gt;
&lt;li&gt;不做研究的投资就像不看牌玩扑克一样盲目
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;财务报表基础&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;资产负债表&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;p&gt;
资产负债表公司特定的时间点的资产与负债情况
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-3-1-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-1-1&quot;&gt;资产(流动性高的排前面)&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;流动资产
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;现金和现金等价物，短期投资，
&lt;/li&gt;
&lt;li&gt;应收账款:可以用应收账款与销售收入的增长速度比较来衡量公司的收款能力或者公司是否使用了一个宽松的信用条件,
而且应该考察应收账款是否集中在少数客户手中,越集中风险越大.一般该项目还有一个 &lt;b&gt;坏账准备&lt;/b&gt; 的条目,要注意检查
坏账准备的准确性,可以和同行业的公司比较.
&lt;/li&gt;
&lt;li&gt;存货: 存货计算有两种方法,即先进先出,后进先出,之所以存在这两种情况是因为同一种产品,在不同的时间它的进货
价格可能是不同的,所以这两种方法就是为了确定到底应该用什么时候的价格来计算存货价值.存货周转率可以使用销售
成本除以平均存货水平，如果产品贬值快的话，那么存货周转率低是一个不好的兆头.
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;非流动资产（
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;固定资产，
&lt;/li&gt;
&lt;li&gt;投资（长期债劵，对其他公司的股票投资），无形资产）
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;无形资产
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;商誉: 收购其他公司时的溢价(收购价格与被收购公司的净账面价值(资产减去负债)的差值)，很可能会大幅减少
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-1-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-1-2&quot;&gt;负债(偿还期限短的排前面)&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;流动负债（期限短于一年必须以现金偿还的债务）
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;商业本票
&lt;/li&gt;
&lt;li&gt;应付账款
&lt;/li&gt;
&lt;li&gt;预计负债:应付利息,水电费,员工工资(大陆会单独列出)
&lt;/li&gt;
&lt;li&gt;应计所得税
&lt;/li&gt;
&lt;li&gt;一年内到期的中长期债务
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;非流动负债（一年或一年以上的借款，如公司发行的长期债券，银行的长期借款等）
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-1-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-1-3&quot;&gt;所有者权益&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-1-3&quot;&gt;
&lt;p&gt;
总资产减去总负债，未分配利润（利润中没有被股东分红分出去的部分，是一个累计账户，包含多年的累计利润）
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-1-4&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-3-1-4&quot;&gt;一般的财务比率&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-1-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;流动比率 = 流动资产 / 流动负债
该比率一般要高于1,因为如果流动资产低于流动负债,那么公司短期内很有可能出现财务危机,
但是这不是绝对的,对于有些公司,低的流动比率反而是更好的征兆
&lt;/li&gt;
&lt;li&gt;负债比率 = 总负债 / 总资产
应该将企业与过去正常情况下的财务结构比较,看负债比率是否明显恶化,同时将公司与同行业公司比较,
看公司的负债比率是否明显偏高, 同时要观察现金流量表,看是否能创造足够的现金来应付本金与利息
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;损益表(或利润表)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;p&gt;
损益表是公司一段时间里损失或者赚了多少会计利润（不同于现金利润）, 可以提供绩效评估的功能.
收入应满足2个条件: 服务或产品已经提供给顾客, 公司预期能够收回现金
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;b&gt;收入((净)销售收入)&lt;/b&gt; :净销售＝销售收入－销售退回与折让－销售折扣,
一个季度或者一年公司销售多少，有可能按照业务类型或者地域而单独列出。
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;销售成本&lt;/b&gt;  :当期销售商品的进货成本,可能因为存货评价方式的不同而不同(先进先出,后进先出)
是与直接创造收入有关的费用，大公司可能会将该科目分解为销售成本和服务成本。人工成本，原材料（制造商）或者货物批发价格（零售商）。
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;毛利&lt;/b&gt; :收入减去销售成本，不在损益表中。
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;销售和管理费用&lt;/b&gt; :营业费用，包括营销费用，管理人员工资，有时也包括研发费用，不过研发费用一般作为单独科目列出
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;折旧和摊销&lt;/b&gt; :公司购买一项资产，并打算使用一段时间，那么未来的几年里都要逐步的摊销这部分成本。
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;非经营性损益&lt;/b&gt; :公司会把它的的非常规营业的一次性费用与收益放在一起，如关闭一个工厂的费用或者卖出一个分部的收益，要重点考察，连续性的非经营性费用是管理层缺乏信心的一个标志，理想情况下，这个项目大部分时间应该是空白的。
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;营业利润（营业收入）&lt;/b&gt; :销售收入等于收入减去销售成本和全部营业费用，是公司在实际经营活动中赚取的利润，与之相对的是利息收益、一次性收益和其他一些非营业性项目。实际上，公司常常把非经营性费用（比如销账）算到营业利润中，营业利润是一个接近于真实的数字，用营业利润计算营业毛利润率，和同行业的公司比较
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;利息收益／费用&lt;/b&gt; :公司获得或者支出的利息
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;赋税&lt;/b&gt; :公司缴纳的所得税
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;净利润&lt;/b&gt; :税后利润
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;股份数字&lt;/b&gt; :基准（目前也就是这份报表的统计期内实际存在的平均股份数），稀释（包括实际存在的股份数与可转换为股票（但目前可能没有转换，包括股票期权和可转换债劵）的有价证劵的和），每股盈利（单独看没有太大的意义）
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-3&quot;&gt;现金流量表&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-3&quot;&gt;
&lt;p&gt;
现金流量表是记录全部流入流出公司现金的情况，包括经营活动发生的现金流量，投资活动发生的现金流量和筹集资金活动发生的现金流量。
经营活动发生的现金流是需要重点关注的项目.
现金流量表有两种编制方法：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;直接法: 将经营，筹资，投资活动带来的现金流一一列出
&lt;/li&gt;
&lt;li&gt;间接法: 对公司的净利润进行校正与调整，其校正过程如下：
必须将折旧费用加回来
必须将处理资产损失
应收账款增加，则现金流量减少，存货增加则现金流量减少，应付账款增加则现金流量增加

&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;b&gt;净利润（净收益）&lt;/b&gt; ：就是损益表的销售收入。
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;折旧和摊销&lt;/b&gt; ：这不是现金费用，应该与净利润相加
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;员工股票计划的税收收益&lt;/b&gt; ：员工执行期权会产生低税账单，公司可以从中获得收益但是这和股价的变化有很大的关系，因为股票价格下跌时员工是不会执行期权的。
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;营运资本变动&lt;/b&gt; ：从外部借钱，应收账款的变动，赊销，存货的增多或者减少都会导致营运资本的变动
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;一次性费用&lt;/b&gt; ：譬如说公司的重组费用，收购费用，这很多时候是非现金费用，计算时要加上来。
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;经营活动现金净额&lt;/b&gt; ：经营活动现金流量就是从净利润中加上或减去这个科目的结果
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;
营收以及利润快速增长的公司如果发生财务危机，大部分情况是因为应收账款和存货大幅增长
&lt;/p&gt;

&lt;p&gt;
你分析一家公司的时候，要确认你弄清楚了1美元的现金在公司里是怎样流转的。如果你不这样做，你也许根本没有弄明白这家公司，
因此也不能轻率地购买它的股票
&lt;/p&gt;

&lt;p&gt;
损益表和现金流量表的关键区别权责发生制是理解财务报表的一个关键的概念。当一项服务或一种物品提供给买家的时候，
损益表记录销售收入与相应的费用，但是现金流量表只关心现金的流入和流出，现金流量表把资产负债表和损益表联系了起来。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;常用的会计术语&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
会计利润：所有者支付除资本以外的所有要素报酬之后剩下的利润，会计利润必须要与收入和费用（包括折旧）尽可能的匹配。然而现金利润测算的是实际生意中流入流出了多少。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;分析公司的五个方面：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;p&gt;
一个成功的投资者是购买一个好主意，而不是购买一个收购机器，如果不知道一个企业除掉收购之后的真实增长率是多少，那就不要买他的股票
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-5-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-1&quot;&gt;成长性&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;&lt;b&gt;成长性&lt;/b&gt; ：销售增长主要来自于四个方面：销售更多的产品和服务，提高价格，销售新的产品和服务，收购别的公司。要特别弄清楚公司的成长来自于哪些方面，并且每一方面占得比重是多少，对于收购要特别注意。
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;成长的质量&lt;/b&gt; ：当公司的利润增长长期（5到10年）超过销售增长时，要明白公司是如何获得超额的利润的，通过削减成本可以提高利润率，但是不可持续，因为你不可能无休止的削减成本，特别是不适当的削减成本，少交税，回购股票对股东有利，可是也是短期的，是低质量的成长
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-2&quot;&gt;收益性&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-2&quot;&gt;
&lt;p&gt;
有两个评估指标：资本收益率和自由现金流量
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;资产收益率（ROA  return on assert）：评估将资产转变成利润的效率
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;销售净利率 = 净利润/销售收入
&lt;/li&gt;
&lt;li&gt;资产周转率 = 销售收入 / 资产
&lt;/li&gt;
&lt;li&gt;资产收益率 = 销售净利率 * 资产周转率 = 净利润/资产
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;净资产收益率（ROE）：反应的是公司使用所有者权益（资产 – 负债）的效率，评估的是使用股东的钱投资产生的回报的程度
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;财务杠杆比率 = 资产/ 所有者权益
&lt;/li&gt;
&lt;li&gt;净资产收益率 = 资产收益率 * 财务杠杆比率 = 净利润 / 所有者权益
&lt;/li&gt;
&lt;li&gt;财务杠杆比率是衡量一家公司的负债在总资产占得分量是大还是小，财务杠杆比率越高，意味着公司的负债比率越高。如果公司的业务很稳定，那么较高的负债对公司影响不大，但如果公司的业务不稳定或者是周期性的，那么高的财务杠杆比率会比较危险。非金融公司在没有过分的财务杠杆比率的前提下如果能取得10%的净资产收益率就是可以投资的。
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;自由现金流（FCF）：
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;自由现金流 = 经营性现金流 – 资本性支出
&lt;/li&gt;
&lt;li&gt;%5的销售收入转变成自由现金流是必要的。
&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
拥有高的净资产收益率与高的自由现金流的公司值得投资
投入资本收益率（ROIC）：矫正了资产收益率与净资产收益率所带来的一些扭曲，比二者更全面，是更好的盈利度量工具
财务健康状况
过高的财务杠杆比率可以放大收益，也可以扩大风险，所以对于过高的财务杠杆比率的公司要重点关注。
空头情形
对公司可能出现的各种负面潜在因素进行列举分析
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;财务伪装&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-6-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-1&quot;&gt;六个危险信号&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;衰退的现金流：如果公司净利润仍在大幅增长，可是经营性现金流却在粗略的同比例增长或者还有衰退，，那么就应该特别注意。
&lt;/li&gt;
&lt;li&gt;连续的一次性费用：
&lt;/li&gt;
&lt;li&gt;连续的收购：
&lt;/li&gt;
&lt;li&gt;CFO或者审计师离开公司：频繁的更换审计师，或者CFO离奇的离开公司要特别注意，特别是当有公司会计账目丑闻传出时。
&lt;/li&gt;
&lt;li&gt;没有收到货款的账单：相对于销售收入而言过快的应收账款增长
&lt;/li&gt;
&lt;li&gt;变更赊销付款条件和应收账款：
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-2&quot;&gt;七个缺陷&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;投资收益：试图将投资收益合并入营业利润来推高财务业绩。
&lt;/li&gt;
&lt;li&gt;养老金缺陷：
&lt;/li&gt;
&lt;li&gt;养老金补充：
&lt;/li&gt;
&lt;li&gt;化为乌有的现金流：员工执行期权的税收收益过高的话是一个不好的现象，因为这和股价密切相关，所以这样的现金流随时可能化为乌有。所以对于现金流很充沛而且股价上涨很快的公司要分析有多少事来自员工执行期权的税收收益。
&lt;/li&gt;
&lt;li&gt;存货增长过快：开拓新市场时存货暂时增长是正常的，但是如果一般情况下，存货的增长速度比销售收入的增长快，那是一个不好的情况，特别是存货贬值快的行业。
&lt;/li&gt;
&lt;li&gt;不好的变更：如把固定资产的折旧年限加长，还有坏账准备金没有与应收账款同步增长，这些都有粉饰财务报表的嫌疑。
&lt;/li&gt;
&lt;li&gt;费用化还是非费用化：某些费用公司可以将它资本化，也就是计入资产，这样隐藏了费用，也就粉饰了财务报表
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
给公司估值
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;市销率：是各种比率中最基础的，用每股的价格除以每股的销售收入，市销率有个比较大的弊端，就是不同的公司销售收入的价值不同，如零售公司的销售收入的价值就较低，因为其利润率低。
&lt;/li&gt;
&lt;li&gt;市净率：把一只股票的市场价值和当期资产负债表的账面价值（也就是所有者权益或净资产）比较，对服务类公司不可靠，但是对金融类公司或者有巨额有形资产的公司则比较好
&lt;/li&gt;
&lt;li&gt;市盈率：
&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;
巴菲特的投资策略：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;不理睬对经济大趋势的预测，也不理睬对股价走势的预测，只注重长期价值
&lt;/li&gt;
&lt;li&gt;只买力所能及的股票，也就是对公司和公司所在的行业要足够的熟悉
&lt;/li&gt;
&lt;li&gt;要找对待股东的钱像对待自己的钱一样认真的公司
&lt;/li&gt;
&lt;li&gt;要详细的研究股票的竞争对手的前景，要看第一手的信息，不要看分析家的报告，因为那是二手的信息，但是分析不用过于精细
&lt;/li&gt;
&lt;li&gt;一旦看重某种股票就要义无反顾的买（这点不是适合每一个人，一般人要控制风险，只将自己能够承担风险的资金投入进去，不是每一个人都能像巴菲特那样预测准确）
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-7&quot;&gt;财务英文词汇：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-7&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;ROE                      净资产收益率
&lt;/li&gt;
&lt;li&gt;ROA                      资产收益率
&lt;/li&gt;
&lt;li&gt;ROIC                     投入资本收益率
&lt;/li&gt;
&lt;li&gt;Fixed assert             固定资产
&lt;/li&gt;
&lt;li&gt;Non-current asset        非流动资产
&lt;/li&gt;
&lt;li&gt;Current assert           流动资产
&lt;/li&gt;
&lt;li&gt;Current Investment       短期投资
&lt;/li&gt;
&lt;li&gt;Bank and Cash            货币现金
&lt;/li&gt;
&lt;li&gt;Share capital            股本
&lt;/li&gt;
&lt;li&gt;Profit before income tax 税前盈利
&lt;/li&gt;
&lt;li&gt;Income tax               所得税
&lt;/li&gt;
&lt;li&gt;Net profit               净利润
&lt;/li&gt;
&lt;li&gt;Inventory                存货
&lt;/li&gt;
&lt;li&gt;Balance sheet            资产负债表
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>code-snippet.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/code-snippet.html"/>
    <title>有用的代码片段</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;有用的代码片段&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;linux相关&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;count lines of code in a directory
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;find . -name &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;*.php&#39;&lt;/span&gt; | xargs wc -l
&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;works on names with space&lt;/span&gt;
( find ./ -name &lt;span style=&quot;color: #E6DB74;&quot;&gt;&#39;*.[h|c|cc|cpp|php]&#39;&lt;/span&gt; -print0 | xargs -0 cat ) | wc -l
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;删除链表节点
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #66D9EF;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;remove_if&lt;/span&gt;(&lt;span style=&quot;color: #66D9EF;&quot;&gt;node&lt;/span&gt; ** &lt;span style=&quot;color: #FD971F;&quot;&gt;head&lt;/span&gt;, &lt;span style=&quot;color: #66D9EF;&quot;&gt;remove_fn&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;rm&lt;/span&gt;)
{
    &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #66D9EF;&quot;&gt;node&lt;/span&gt;** &lt;span style=&quot;color: #FD971F;&quot;&gt;curr&lt;/span&gt; = head; *curr; )
    {
        &lt;span style=&quot;color: #66D9EF;&quot;&gt;node&lt;/span&gt; * &lt;span style=&quot;color: #FD971F;&quot;&gt;entry&lt;/span&gt; = *curr;
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;if&lt;/span&gt; (rm(entry))
        {
            *curr = entry-&amp;gt;next;
            free(entry);
        }
        &lt;span style=&quot;color: #F92672; font-weight: bold;&quot;&gt;else&lt;/span&gt;
            curr = &amp;amp;entry-&amp;gt;next;
    }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;linux相关&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;&lt;li&gt;重启network
sudo /etc/init.d/networking restart
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  
  <entry>
    <id>饮食调养.html</id>
    <link type="text/html" rel="alternate" href="http://yuyang.farbox.com/饮食调养.html"/>
    <title>饮食调养</title>
    <updated>2013-04-26T00:00:00-07:00</updated>
    <author>
      <name>Yu Yang</name>
      <uri>http://yuyang.farbox.com/</uri>
    </author>
    <content type="html"> 
&lt;h1 class=&quot;title&quot;&gt;饮食调养&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;禁忌&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-2&quot;&gt;主食&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;禁忌&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
避免吃过硬、过酸、过辣、过咸、过冷、过热及过分粗糙的食物。如凉拌荤素菜、酸辣白菜、糖醋藕片等，烈酒、辣椒、
洋葱、咖喱、胡椒粉、芥末粉、浓咖啡等对胃黏膜有刺激作用，不宜食用
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;主食&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
主食可采用细面条、面片、馒头、花卷、发糕、包子、馄饨、面包、大米饭等。切忌吃不发酵的面食，如家常烙饼、馅儿
饼、水饺等。还有粗粮粗做与难消化的食品，如玉米饼、糯米饭、年糕等，这些食品在胃内停留时间长，会加重胃肠负担。
&lt;/p&gt;

&lt;p&gt;
宜食肉纤维短而柔软的肉类 如鱼、虾、鸡肉、嫩牛肉、瘦猪肉，慢性浅表性胃炎如果胃酸过多，那么多饮用牛奶、豆浆、
烤面包以及新鲜蔬菜，水果等以中和胃酸。
&lt;/p&gt;

&lt;p&gt;
食物的制作要细、碎、软、烂。烹调方法中多采用蒸、煮炖、烩、煨等，以保护胃黏膜。多食不含粗纤维的蔬菜和水果，
如嫩黄瓜、西红柿(去皮籽)、去皮嫩茄子、冬瓜、嫩白菜、菠菜叶、土豆、胡萝卜等，烹制时应切细丝、小丁、薄片、煮
熟，有的制成泥，如土豆泥等，以易于消化;水果要成熟的，食时要去皮籽，如香蕉、苹果、梨等，并应养成细嚼慢咽的习
惯。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
 </content>
  </entry>
  

</feed>
